[{"authors":["admin"],"categories":null,"content":"直近の状況 子どもがまだ小さいため極力リモートワーク＆勤務時間も抑えめで活動中…。\n株式会社 R レガシー iOS アプリの開発メンバーとして、主に Objective-C を使って開発。 Swift は一部の View Controller やテストなど、他から依存されていない箇所で部分的に使用。\nリアーキテクティングやテストの導入などモダン化を地道に進めながら、日々のエンハンス開発を行う。\n株式会社 S AWS + Heroku + RoR という構成のサービスにおいて、業務委託としてインフラ・サーバー・フロントエンドまで幅広く技術支援を行う。\n技術的に複雑で困難な要件を単発で請け負って開発することが主。 特に Elastic Transcoder 等を用いたコンテンツ変換システムの継続的な保守と開発を行う。\n指向 プロダクトにとって最高のリターンを最短で得るために自分の技術力を投資することに価値を見出す。 特定の技術分野に拘りはなく、必要とさていれるが足りていない、という部分を補っていくスタンス。 とはいえ、これまでの経歴から主にサーバーサイドやインフラなどバックエンドに強みは感じている。\n個人的な指向としては、複雑な現実世界を何如にシンプルにモデリングしコードに落とし込めるか、といことを考えるのが楽しいのと、 読む人間に優しいイミュータブルで簡潔な実装を好む。 また、個人ではなくチームで最良の成果を引き出せることがエンジニアとして求められることだと考えているため、 チーミングや開発プロセスといった人間的な部分にも興味があり学んでいる。\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"ja","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"直近の状況 子どもがまだ小さいため極力リモートワーク＆勤務時間も抑えめで活動中…。 株式会社 R レガシー iOS アプリの開発メンバーとして、主に Objective-C を使っ","tags":null,"title":"yewton","type":"authors"},{"authors":null,"categories":null,"content":"","date":1578265692,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1578265692,"objectID":"fd36605688ef45e10dc233c860158012","permalink":"/cv/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/cv/","section":"","summary":"","tags":null,"title":"","type":"widget_page"},{"authors":null,"categories":["雑記"],"content":"最近仕事用のmacを新調して環境を作り直す機会があったことと、 2020 年が始まるということもあり、久々にサイトを更新することにした。\nオープン職務経歴書を書きたかった、というのもある。\n更新にあたっていくつか困難があった。\nまず、このサイトのソースが最近の Hugo では動かせなくなっていた。\nこのサイトのテーマには Icarus を使わせていただいているのだが、最終更新が 2017 年となっており、 Hugo 0.55.0 以降で動かなくなってしまっていたり、 Deprecated Warning が出るようになっていた。\nPRは出されている のだけれど、マージされる様子が無い。\nそもそも、当時のバージョンに対してカスタマイズしたレイアウトを作ってしまったので、 単純なテーマの更新だけでは追随できない。\nどのバージョンなら動くのか突き止めるのも骨が折れた。 asdf-gohugo を入れて、少しずつバージョンを上げながら確認していった。\nasdf plugin add hugo https://bitbucket.org/mgladdish/asdf-gohugo そして、そもそも Hugo の使い方を忘れていた。\nHugo 導入記事 や Hugo 用 Emacs ライブラリ を書いておいてなんだが、当時から3年も経ってほとんど忘れてしまっていた。\nそこで改めて調べてみると、イマドキは org-mode で書くことも出来るらしい。\nこの3年ですっかり org-mode 無しでは生きられない体になってしまっていたし、 せっかくなので本記事からは ox-hugo を使って書くことにする。\n使い始めるにあたって色々調べたり考えたりすることも多かったので、そのうち記事にしようと思う。 結論としては、org-mode と Hugo の組み合わせは最高だし、その橋渡しをしてくれる ox-hugo は本当にグッジョブだということ。\n\u0026hellip;\nそんなこんなで色々対応していたものの、デプロイする仕組みなどは当時と変わりなく動いたのでその点は助かった。\norg-mode で書けるようになったことだし、少しは記事を書いていきたい所だが、まずは Hugo の最新版に追従する作業が待っている…。\n","date":1546354800,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1546354800,"objectID":"2eb677bfe6084f68eb72ec50dd2cea0b","permalink":"/2019/01/happy-new-year/","publishdate":"2019-01-02T00:00:00+09:00","relpermalink":"/2019/01/happy-new-year/","section":"post","summary":"最近仕事用のmacを新調して環境を作り直す機会があったことと、 2020 年が始まるということもあり、久々にサイトを更新することにした。 オープン職務経","tags":["emacs","hugo","ox-hugo"],"title":"久々の更新","type":"post"},{"authors":null,"categories":["技術系"],"content":"最近はじめて Fire タブレット をキャンペーンで購入して、 こういう本読むだけとか書い物するだけとかの単機能なタブレットも結構いいな、と思った。 そして、うちに使ってない Nexus 7 があることを思い出した。\nこの Nexus 7 、どうして使っていなかったかというと、 Lollipop にアップデートしてしまったから。 Nexus 7 2012 は Lollipop にアップデートしてしまうと、 動作が重過ぎて使い物にならなくなる。\nどうせ使いものにならないなら、ということで SlimKat や PureNexus を 焼いて使ってみたりもしたが、 前者は軽いけど見た目や使用感がちょっと微妙( 4.4 ベースだし…)で、 後者は使っていくうちにやっぱり重くなっていって駄目だった。\n今回 Fire を買ってあらためて 7 インチの Android タブレットが欲しくなってしまったので、 もう一度蘇生を試みることにした。\nそして Reddit のこのスレ を満つけ、 そこから Speed up the Nexus 7 with F2FS and SlimKat という記事に辿り着いた。\n元々は SlimKat と F2FS の記事だったようだが、2017 年に更新があり、 Beanstalk 6.0.1 と ParrotMod が 勧められていた(執筆者自身は試していないようだったが)。\nBeanstalk CyanogenMod 13 (Marshmallow) をベースに作られたカスタム Rom 。 フォーラム の記述によると、\n Smoother than Butter\nFriendly Battery\nTons of Features\nDirtyUnicorns Features\nAlways Up-to-date\n100% Build from Source\n …らしい。\nParrotMod Nexus 7 2012 をすげーいい感じにしてくれるやつ。\n FLASH MEMORY SPEED INCREASE! up to 4x better performance WITHOUT F2FS OR DYNAMIC FSYNC\n という速度の向上を筆頭に、様々な最適化を行って快適にしてくれるようだ。\n結果 Amazon Kindle , YouTube 、Feedly , 1Password あたりを主に動かしているが、 アプリ起動時にたまに固まることがあるものの、大抵一度タスクキルして起動し直せば問題なく動作している。 娯楽用途としては十分な性能になった。\nもし、使わなくなった Nexus 7 2012 がご家庭に眠っているのなら、 Beanstalk と ParrotMod を試してみる価値はアリだと思う。\n","date":1491742531,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1491742531,"objectID":"6f64c5bf0ec5e58699b6b42784a2b324","permalink":"/2017/04/grouper-beanstalk/","publishdate":"2017-04-09T21:55:31+09:00","relpermalink":"/2017/04/grouper-beanstalk/","section":"post","summary":"最近はじめて Fire タブレット をキャンペーンで購入して、 こういう本読むだけとか書い物するだけとかの単機能なタブレットも結構いいな、と思った。 そして","tags":["Android"],"title":"Nexus 7 2012 (grouper) に Beanstalk と ParrotMod を入れて蘇生する","type":"post"},{"authors":null,"categories":["技術系"],"content":"仕事で Atlassian 製品を使っていて、個人的にも便利なタスク・ドキュメント管理に欲しいな、と思い、 Atlassian のスターターライセンスについてのドキュメントを読んでいた。\nすると気になるフレーズが目に入った。 「ドラゴンズレアとは何ですか？」 ──\n 6 つのスターター ライセンスの統合スイートをセットアップすると素晴らしい結果になりますが、セットアップ手順は複雑で時間がかかります。アトラシアンでは、アトラシアン アプリケーション スイートを統合するため方法をドラゴンズレアという説明書にまとめました。また、この困難だけれども素晴らしい旅を完了された方全員向けに、限定版アトラシアン ドラゴン スレイヤー T シャツを提供しています。今すぐ冒険を始めましょう! 勇気がある方はドラゴンに立ち向かいましょう!\n せっかくもらえるもんなら、とドラゴン退治をすることにした。\n 2017/1/20 時点の注意\nどうやら現在、 Tシャツを要求するためのページが 404 になってしまっている ようす ( Dragon slayed, but can't get t-shirt? - Atlassian Answers ) 。\nせっかくやってもTシャツはもらえないかもしれないので注意。\n   2017/2/5 時点の情報\nどうやらサイトが復旧したようす You Slayed the Dragon | Atlassian\n  環境要件 ドキュメントには「最低 3 GB の RAM と 500 MB のアプリケーションファイル用の空き容量」とある。\nしかし、実際にやってみたところ 3 GB では全てのアプリケーションを立ち上げることが出来なかった。 最終的に 6 つのアプリケーションを稼動させることになるのだが、 5 つが限界だった。 最低 RAM は 4 GB は必要 だと思う。\nまたディスク容量に関しては、まっさらな環境に諸々構築したあとの総使用量が 6 GB 程だった。 こちらも 最低ストレージは 10 GB は必要 だと思う。\n自分は Google Cloud Platform を利用して構築した。 Google Compute Engine の vCPU x 1 (メモリ 3.75 GB)の標準インスタンスを使ったが、 前述の通りメモリが足りなくなってしまったので、 vCPU x 2 (メモリ 7.5 GB)のインスタンスを使う方がよいと思う。\nOS は Debian GNU/Linux 8 (jessie) を使用した。\nHere Be Dragons それでは ドキュメント に従って冒険を始めよう。\n基本的には書かれてある通りにやればいいだけなのだが、いくつか自分が躓いたポイントがあるので紹介していきたい。\nDragons Stage 1 - Install JIRA Step 1. Install Java まず Java を用意しなければならないのだが、なんと Oracle JDK 1.7.x でなければならない。 1.7 系はすでにサポートが終了しているのだが、 このクエストではこのバージョンしか想定していないようなので、大人しく従っておく。\nwget --header \u0026#34;Cookie: oraclelicense=accept-securebackup-cookie\u0026#34; http://download.oracle.com/otn-pub/java/jdk/7u79-b15/jdk-7u79-linux-x64.tar.gz Debian で Oracle Java を利用するには [JavaPackage - Debian Wiki](https://wiki.debian.org/JavaPackage \u0026ldquo;JavaPackage - Debian Wiki\u0026rdquo;) にあるような作業が必要になる。\nsudo sed -i \u0026#39;s/deb http:\\/\\/httpredir.debian.org\\/debian\\/ jessie main/deb http:\\/\\/httpredir.debian.org\\/debian\\/jessie main contrib/\u0026#39; /etc/apt/sources.list sudo apt-get update -y \u0026amp;\u0026amp; sudo apt-get install -y libgl1-mesa-glx libfontconfig1 libxslt1.1 libxtst6 libxxf86vm1 libgtk2.0-0 java-package make-jpkg jdk-7u79-linux-x64.tar.gz sudo dpkg -i oracle-java7-jdk_7u79_amd64.deb Step 2. Install your PostgreSQL Database Server こちらも 8.4.x. というバージョン指定がある。 Java と同様に既に サポート終了 しているため、 Debian のリポジトリでは配布されていない。 そのため、リポジトリを追加してからインストールする必要がある。\nsudo sh -c \u0026#39;echo \u0026#34;deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main\u0026#34; \u0026gt; /etc/apt/sources.list.d/pgdg.list\u0026#39; wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - sudo apt-get update -y \u0026amp;\u0026amp; sudo apt-get upgrade -y \u0026amp;\u0026amp; sudo apt-get install -y postgresql-8.4 Step 3. Create your JIRA Database in PostgreSQL Atlassian 製品はデータベースとして MySQL や PostgreSQL を利用出来る。 ただ、日本語や絵文字などマルチバイト文字を扱う場合は PostgresSQL を使うのが無難なようだ( 参考 )。\n個人的にあまり馴染みがないのだけれど、このドラゴンズレアでも PostgreSQL が指定されているので従っておく。\nsudo -u postgres createuser -S -d -r -P -E jirauser # パスワード入力 sudo -u postgres createdb --owner jirauser --encoding utf8 jira Step 4. Install JIRA JIRA のバージョンも指定されている。 6.3.15 を使う必要がある。\nwget https://www.atlassian.com/software/jira/downloads/binary/atlassian-jira-6.3.15-x64.bin chmod a+x atlassian-jira-6.3.15-x64.bin sudo ./atlassian-jira-6.3.15-x64.bin JIRA にはインストーラーがついているので簡単。\nStep 5. Set Up JIRA, Step 6. Set up a Project and Create your JIRA Dashboard あとはドキュメントに従って Web UI 上で操作を行えばよい。\nもしかすると、以下のようなよく分からないエラーに遭遇するかもしれない。\nlet.ServletException: javax.servlet.jsp.JspTagException: Soy rendering failed for template '%s'. 説明 The server encountered an internal error that prevented it from fulfilling this request. 例外 org.apache.jasper.JasperException: javax.servlet.ServletException: javax.servlet.jsp.JspTagException: Soy rendering failed for template '%s'. 環境依存なのか、言語を日本語にしていた影響なのか分からないが、エラーが発生したらブラウザをリロードすれば大体直っていた。\nDragons Stage 2 - JIRA Add-Ons ドキュメントに従うだけで特に問題はないが、 Capture for JIRA を動かそうとしたときに以下のエラーが出ていた。\n Your Bonfire license has expired. Please visit My Atlassian to renew\n ボンファイアとはなんのこったい、と思ったのだが、どうやら Capture for JIRA のことらしい。 インストール後のアクティベーションが正常に終わっていなかったようだった。 改めて管理画面から評価用ラインセンスを払い出してことなきを得た。\nDragons Stage 3 - Install Confluence Step 1. Create your Confluence Database in PostgreSQL JIRA のときと同様に行う。\nsudo -u postgres createuser -S -d -r -P -E confuser sudo -u postgres createdb --owner confuser --encoding utf8 confluence Step 2. Install Confluence インストールまでは以下の通り:\nwget https://www.atlassian.com/software/confluence/downloads/binary/atlassian-confluence-5.7.1-x64.bin chmod a+x atlassian-confluence-5.7.1-x64.bin sudo ./atlassian-confluence-5.7.1-x64.bin この後、\n Because Confluence will be running on the same machine as JIRA (already installed), you need to ensure that the URL paths are different for Confluence and JIRA.\n という理由で設定ファイルを一部いじる必要がある。 以下のように一旦 Confluence を停止、設定を修正して再起動する:\nsudo /opt/atlassian/confluence/bin/stop-confluence.sh sudo sed -i \u0026#39;s/\u0026lt;Context path=\u0026#34;\u0026#34;/\u0026lt;Context path=\u0026#34;\\/confluence\u0026#34;/\u0026#39; /opt/atlassian/confluence/conf/server.xml sudo /opt/atlassian/confluence/bin/start-confluence.sh Step 3 以降 ドキュメントに従って進めれば問題ないはず。\nDragons Stage 4 - Install Team Calendars in Confluence ドキュメントに従って Web UI を操作すれば 👌 。\nDragons Stage 5 - Install FishEye and Crucible Step 1. Install Mercurial sudo apt-get -y install mercurial Step 2. Create your FishEye Database in PostgreSQL これまでと同様に行う:\nsudo -u postgres createuser -S -d -r -P -E fishuser sudo -u postgres createdb --owner fishuser --encoding utf8 fisheye Step 3. Install FishEye and Crucible インストーラーが無いので若干手順が複雑になる。\nまず必要なファイルをダウンロードして展開する:\nwget https://www.atlassian.com/software/fisheye/downloads/binary/fisheye-3.7.0.zip sudo unzip -d /opt/atlassian/ fisheye-3.7.0.zip アプリケーションのデータディレクトリを作成する。 他のアプリケーションに合わせて /var/atlassian/application-data/fecru にする:\nsudo mkdir /var/atlassian/application-data/fecru FISHEYE_INST という環境変数が上記のデータディレクトリを指すようにする:\nsudo sh -c \u0026#39;echo \u0026#34;export FISHEYE_INST=/var/atlassian/application-data/fecru\u0026#34; \u0026gt; /etc/profile.d/fecru.sh\u0026#39; source /etc/profile.d/fecru.sh 設定ファイルを一部修正しつつ配置する:\nsudo cp /opt/atlassian/fecru-3.7.0/config.xml /var/atlassian/application-data/fecru/ sudo sed -i \u0026#39;s/\u0026lt;web-server\u0026gt;/\u0026lt;web-server context=\u0026#34;\\/fisheye\u0026#34;\u0026gt;/\u0026#39; /var/atlassian/application-data/fecru/config.xml Fecru サービスを稼動させるためのユーザーを作成する:\nsudo useradd -m -c \u0026#39;Atlassian FishEye/Crucible\u0026#39; fecru 権限を適切に修正し、サービスを立ち上げる:\nsudo chown fecru -R /opt/atlassian/fecru-3.7.0/ sudo chown fecru -R /var/atlassian/application-data/fecru/ nohup sudo -u fecru /opt/atlassian/fecru-3.7.0/bin/run.sh \u0026amp; 本来は systemd とかでちゃんとサービス化した方がいいと思う 😟\nStep 4 以降 ドキュメントに従えば 👌\nDragons Stage 6 - Get JIRA and FishEye Talking このコメント にあるように、恐らく FishEye の Site URL を設定してからでないと JIRA リンクが上手く動かないので、 まず FishEye 上で Administration -\u0026gt; Global Settings -\u0026gt; Server から Site URL を設定しておく。\nあとはドキュメントの手順通り設定を行えばよい。\nDragons Stage 7 - Get JIRA and Crucible Talking ドキュメントの通りで 🆗\nDragons Stage 8 - Install Bamboo Step 1. Create your Bamboo Database in PostgreSQL これまでと同様:\nsudo -u postgres createuser -S -d -r -P -E bamuser sudo -u postgres createdb --owner bamuser --encoding utf8 bamboo Step 2. Install Bamboo Fecru と同様にこちらもインストーラーが無いので複雑な手順が必要になる:\nsudo -u postgres createuser -S -d -r -P -E bamuser sudo -u postgres createdb --owner bamuser --encoding utf8 bamboo wget https://www.atlassian.com/software/bamboo/downloads/binary/atlassian-bamboo-5.3.tar.gz sudo useradd -m -c \u0026#39;Atlassian Bamboo\u0026#39; bamboo sudo tar -C /opt/atlassian -zxvf atlassian-bamboo-5.3.tar.gz sudo chown bamboo -R /opt/atlassian/atlassian-bamboo-5.3 sudo sh -c \u0026#39;echo \u0026#34;bamboo.home=/home/bamboo\u0026#34; \u0026gt; /opt/atlassian/atlassian-bamboo-5.3/atlassian-bamboo/WEB-INF/classes/bamboo-init.properties\u0026#39; sudo sed -i \u0026#39;s/\u0026lt;Context path=\u0026#34;\u0026#34;/\u0026lt;Context path=\u0026#34;\\/bamboo\u0026#34;/\u0026#39; /opt/atlassian/atlassian-bamboo-5.3/conf/server.xml sudo -u bamboo /opt/atlassian/atlassian-bamboo-5.3/bin/start-bamboo.sh Step 3. Set Up Bamboo まず Maven 3 の環境を整える必要がある。 ドキュメントの指示通 り Atlassian Plugin SDK をインストールする:\nsudo sh -c \u0026#39;echo \u0026#34;deb https://sdkrepo.atlassian.com/debian/ stable contrib\u0026#34; \u0026gt; /etc/apt/sources.list.d/atlassian.list\u0026#39; sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys B07804338C015B73 sudo apt-get install -y apt-transport-https sudo apt-get -y update sudo apt-get install -y atlassian-plugin-sdk あとはドキュメント通りに進めればよいが、 Maven Executable のパスを指定する箇所は /usr/share/atlassian-plugin-sdk-6.2.9/apache-maven-3.2.1 のように 指定しなければならない(ドキュメントには /usr/local/Atlassian/atlassian-plugin-sdk/apache-maven とあるがそこには無い)。\nDragons Stage 9 - Bamboo Gadgets and JIRA Victory ドキュメントの指示通り JIRA に Bamboo ガジェットを追加すれば完了。\nThe Battle is Won, the Dragon is Slain!\nTシャツを要求する ページの指示通りやると、クーポンコードがもらえるので、 それを使って注文すればいい。\n自分の注文情報はこんな感じ:\n 注文してから 1〜2 週間で届くらしい。\n","date":1472884447,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1472884447,"objectID":"d64c77e3aaee20553d06ef4265089c6b","permalink":"/2016/09/how-to-get-atlassian-dragon-slayer-t-shirt/","publishdate":"2016-09-03T15:34:07+09:00","relpermalink":"/2016/09/how-to-get-atlassian-dragon-slayer-t-shirt/","section":"post","summary":"仕事で Atlassian 製品を使っていて、個人的にも便利なタスク・ドキュメント管理に欲しいな、と思い、 Atlassian のスターターライセンスについてのドキュメントを読んで","tags":["Atlassian"],"title":"Atlassian から無料でTシャツをもらう方法、あるいはドラゴンの倒し方","type":"post"},{"authors":null,"categories":["雑記"],"content":"前回の更新から三ヶ月以上経ってしまった。 月日が経つのは早いものだ。\nまとめたいことがいくつかあるので、まとめておく。\nAtlassian からTシャツをタダでもらう方法 Atlassian の製品のセットアップを公式ドキュメントに従って行うとTシャツが貰える。\n実際もらえたのでやり方をまとめたい。\n無料のプライベート Wiki は Google Sites が最強な気がする Atlassian の構築はそもそも個人的に家庭で Confluence 的なのを使いたかったので手を出したものだった。\nとはいえ金がかかるのでいい方法は無いかと探していたら、 Google Sites に辿りついた。\norg-publish で気軽に Web サイトを作る 無料のプライベート Wiki を探している過程で org-publish にも手を出した。\nプライベートにするのが面倒だったので諦めたけれど、 org-mode で書いた内容を、見た目もほぼそのまま公開出来るというのは便利かもしれないのでまとめたい。\nhelm から ivy に移行したい helm が活発過ぎて周辺エコシステムが付いていけないとか、 ivy の方が軽量でよいとかいう話を聞くので、 ivy に移行してみたい。\nヘビーに helm 使ってるわけでないので、さくっと乗り換えたい気持ち。\nIFTTT Do Button で定型文を Slack に投稿する 普通に使ってると、IFTTT はひとつの Slack Team としか連携出来ないので、 MAKE をアクションにして Web Hook でどうにかした話をまとめたい。\n","date":1472477375,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1472477375,"objectID":"9e9167f9e1d4598946252c1a42b49d22","permalink":"/2016/08/misc/","publishdate":"2016-08-29T22:29:35+09:00","relpermalink":"/2016/08/misc/","section":"post","summary":"前回の更新から三ヶ月以上経ってしまった。 月日が経つのは早いものだ。 まとめたいことがいくつかあるので、まとめておく。 Atlassian からTシャツをタダでもら","tags":[],"title":"三ヶ月以上ぶりに何かを書く","type":"post"},{"authors":null,"categories":["雑記"],"content":"この辺 を参考にせよ、 と persp-mode 公式に書いてあったので、パクれそうかやってみた。\n結論としては、出来なかった。 なので、 併せて記載されていた こっち の設定を使う状態のまま。\nSpacemacs の設定は、 Spacemacs 独自のステートの概念(Vimmer が喜ぶやつ)と密接に関連しているようで、 素の Emacs に組込むのは骨が折れそうだった。\nそもそも何で Spacemacs の設定をパクろうとしていたかというと、 後者の設定だと、 C-x b したときに前のバッファが選択されずに 現在のバッファが選択された状態になるのが違和感があったから、だった。 素の Emacs では単に C-x b RET としたときは、前のバッファに戻るという挙動になる。 もしかしたら Spacemacs では元の挙動を再現した実装になっているのかもしれない、 と思って見てみたが、前述の通り失敗に終わった。\npersp-mode では、直前のバッファが現在のパースペクティブに含まれているとは限らないから、仕方ないのかな…。\n","date":1462358726,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1462358726,"objectID":"939a3bf0e2fc44f0cb40db3dc1d726f6","permalink":"/2016/05/helm-persp/","publishdate":"2016-05-04T19:45:26+09:00","relpermalink":"/2016/05/helm-persp/","section":"post","summary":"この辺 を参考にせよ、 と persp-mode 公式に書いてあったので、パクれそうかやってみた。 結論としては、出来なかった。 なので、 併せて記載されていた こっち の設定","tags":["emacs","helm","persp-mode"],"title":"Spacemacs から helm と persp-mode の設定をパクろうと思ったけど難しかった","type":"post"},{"authors":null,"categories":["ゲーム感想"],"content":"この間 Amazon で『いけにえと雪のセツナ』が 2,000 円だったので買ってみた。\n曰く、「あの頃、みんなRPGに夢中だった。 当時遊んだ数多のRPGは、今もぼくたちの記憶に強く残っている。 パーティ編成、街での買い物、ダンジョン攻略、ギリギリで倒した強敵たち。 そして、エンディングで流した涙－。名作たちが与えてくれた感動は、今もなお色褪せない。とりもどそう、ぼくたちのRPG。」\n…凄い売り文句だ。\nバトルシステムはあのクロノ・トリガーをベースにしているらしい。 否が応にも期待値が高まる謳い文句だ。 高まりすぎて不安になる。\nネットのレビューを見てみると、やっぱりその期待値とのギャップに落胆している人が多いように見受けられた。 個人的には、単体のゲームとしてみればすごく楽しかったし、確かに荒削りな部分もあったけれど、 今後に大いに期待したくなる内容だったと思う。\nTokyo RPG Factory は、こういう意欲的な作品を今後も是非リリースしていって欲しい。 いちユーザーとしてそう強く願う。\n個人的にプレイしていて色々と思うところがあったので、まとめておきたくなったのでまとめる。 ネタバレ全開。\n(開発者の)制限プレイ なんといっても本作、雪国しか出てこない。\n本当にずーっと雪景色で、たまに古代遺跡の石畳を見るくらい。 プレイ時間の大部分は白い画面と向きあうことになる。\nさらに、音楽はピアノオンリーである。 さすがにバトルシーンでは多少パーカッションやベースが入ったりもするが、ピアノが常にメインとなる。 ピアノフォルテの面目躍如といったところ。\nこういう制限のなかで、いかに面白く見せられるか、というところに挑戦する姿勢が、 ファミコン時代の同時発色数4色、音は3音+ノイズだけだったころと通じるものを感じた。 やっぱり、日本人は限られたリソースの中で工夫してよいものを作るっていうのが、 得意とするところなんじゃないかなぁ、などと日本人観に思いを馳せてみたりもした。 舞台が雪国っていう中で、火属性無双にならないようにとか、 魔物のデザインとか、すごく苦労したんじゃないかと思う。\nこの制限が、結果としてよい方向にいったわけでは必ずしもないと思うけれども、 自分はこの挑戦する姿勢がすごく好きだった。\n次は南国+ウクレレ縛りプレイとかに挑戦してもらいたい。\n装備+法石システム 本作の装備品は、武器と法器の2種類しかない。 この点が残念だという人もいるらしい。 個人的には、兜盾鎧小手みたいに分かれている意味って、 雰囲気作り以上の意味はないように思えるので、特に気にならなかった。 単純な攻撃力や防御力だけではなく、 サポート効果も加味して装備を整えるという本質的な部分は、 法石システムによって実現されている。\n今後のことを考えて昇華率アップ系の法器にするか、 それともいま、このバトルを乗り切るための法器にするか、 みたいなことに頭を悩ますのも楽しかった。\nただ、魔法は法石じゃないほうが、嬉しかったかな…。 連携技もすごい豊富でワクワクするのに、 セットする法石に制限があるので、 「とりあえず見るだけ見てみたい」みたいなのをやりたくても出来ない。 クロノ・トリガーだったら、キャラの組み合わせを変えるだけでよかったので、 本作では法石の組み合わせも変えないといけないのが、単に手間にしか思えなかった…。\nバトル全般 〈グラーティア〉 + 〈久遠の剣閃〉とか、 そういうものすごく相性のよい魔法の組合せに気付いてしまってからは、一気にバトルが大味になってくる。\nでもまあ、こういうのが運用出来るようになるのがそもそも終盤だし、 俺つえー出来るための組合せを探すのもそれはそれで楽しいので、あんまり気になっていない。 自分がヌルゲーマーだからかもしれない…。 〈ガグンラーズ〉があればMP補給無用で雑魚はサクサク片づくのとか、非常に助かったし。 〈叫ぶ〉+〈パーマネンス〉+ 〈ユグドラシル〉 + 〈アルティメット〉 でエンド無双になるのとか快感だったし。 クロノ・トリガーも終盤シャイニングだけ唱えてればだいたいなんとかなったし、そんなもん。 中盤は中盤で、エンドの〈回転斬り〉無双だった気もするが…。 まあそれはそれで「お、大体回転斬りでいけるやん!」って気づく過程が楽しかった。\n全体的に、MP温存せずに雑魚にもガンガン使っていく感じで進められるのが快適だった。\nキャラ毎の個性もハッキリしていてよかったけれど、 結局エンド+クオン+(セツナ or キール)最強だなーということで、 あんまり他のメンバーを使わなくなってしまった。 ディノタウルス系用にブロウビート要因のヨミを使うことはあったけど、それくらい。 まあ、クロノ・トリガーでも魔王やカエルは趣味枠だった気がする…。\n法石に蝕まれた魔物 隠し中ボスみたいなのが攻略ルート上に普通に出現する。 気付かずにバトルを仕掛けると普通に全滅して普通にゲームオーバーになる。\nこの理不尽さも、懐しいかも…。\nまあ本作では100％逃走可能なアイテムがあるので、実際はそこまで脅威ではない。 とはいえ、こういうのに出くわすまではそもそも逃げることなんてなかったので、 逃走用アイテムがあることも忘れていたりするのだけれど。\nこういう微妙にプレイヤーを突き放した感じも、なんだか懐しい。\nストーリー エンドやセツナに感情移入出来ないとか、選択肢の意味がほとんど無いとか、 そういう評判をネット上ではよく見かけた。\n個人的には、そこはそんなに気にならなかった。 選択肢しだいで、クオンがちょっとエンドのこと見直してくれたり、 エンドが謎にチームリーダーとして慕われてたりとか、 素直に嬉しかったし、にこにこしながら見ることが出来た。\nセーブポイントが伏線になってたりとか、そういうところも好き。 昔からたまにある設定だから目新しさはないけど。\nどんどんみんなの絆が深まっていくのに、旅の目的はセツナが無事に死ぬこと、 っていう矛盾に悶々と出来たのはよかった。\nただ、エンドやキトが何者なのか？とか、 絶海群島の何のイベントも起きない人々は何なのか？とか、 もう少し知りたかった。もやもやする。 想像の余地を残されたのだろうか。うーん、困る。\nVita 版 せっかくゲームはいい出来なのに、処理落ちがホントにひどい。 一番最初に使える連携技の時点で処理落ちする。 パーティメンバーを全員表示するたびに処理落ちする。 最終的に慣れてしまったけれど…。\n最悪なのは、エンディングイベント中にアプリケーションエラーで落ちたこと。 一番落ちてはならぬところだぞ…。\nこれは Tokyo RPG Factory を恨めばいいのか、 Unity を恨めばいいのか、 Sony を恨めばいいのか、どれなんだ。 教えてくれ。\nロード時間も長めだけれど、 PS 時代もこんなもんだったなーくらいの感覚でそこまで気にはならなかった。\n総評 ゲームとしては値段分の価値が十分あるし、これからもこういう作品をどんどん出してほしいと思える内容だった。\nただ、 Vita 版はゲーム性以外の部分がかなり残念…。\nもし次回作を出すならフルプライスで買うから、変なハード間差異だけは出さないでほしい…。\n","date":1462345811,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1462345811,"objectID":"31771947b41a5b0dd5b38c44455a23e7","permalink":"/2016/05/setsuna/","publishdate":"2016-05-04T16:10:11+09:00","relpermalink":"/2016/05/setsuna/","section":"post","summary":"この間 Amazon で『いけにえと雪のセツナ』が 2,000 円だったので買ってみた。 曰く、「あの頃、みんなRPGに夢中だった。 当時遊んだ数多のRPGは、今もぼくた","tags":["ゲーム","いけにえと雪のセツナ"],"title":"『いけにえと雪のセツナ』感想","type":"post"},{"authors":null,"categories":["雑記"],"content":"前回の更新から平気で3ヶ月経っていた。 光陰矢のごとしである。\n一個多少マトモな記事を上げたら何か燃え尽きてしまったのと、 仕事が妙に重圧になっていて気持ちがアガらなかったのと、 色々あって全然更新しなかった。\nスクラム入門の翻訳も全然やってない。\nいやはや。\nやったことといえば、 .emacs.d の大幅リニューアルくらい。 結果物は こちら。 .emacs.d 弄りは無限に時間取られるな…。\nまあ、その甲斐あって、以前よりさらに快適な作業環境が整った、ハズ。 かっこいいモードラインとか、いいよね。 僕はニワカイーマクサーなので、そういうところを頑張ってしまう。\nあと、記事の元になる Hugo ファイルを BitBucket のプライベートリポジトリに移した。 これで気兼ねなく、プライベートな内容も記録出来るようになった。\nこの連休中に、 persp-mode の設定を spacemacs を参考に変更するのと、 Scala 製 Slack ボットのデプロイ方法を考えるのと、 いくつか追加でボットを作成するのをやっておきたい。\n","date":1462285646,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1462285646,"objectID":"841870fd9401460679910d0fffa99e98","permalink":"/2016/05/diary/","publishdate":"2016-05-03T23:27:26+09:00","relpermalink":"/2016/05/diary/","section":"post","summary":"前回の更新から平気で3ヶ月経っていた。 光陰矢のごとしである。 一個多少マトモな記事を上げたら何か燃え尽きてしまったのと、 仕事が妙に重圧になって","tags":[],"title":"三ヶ月ぶりに更新再開した日","type":"post"},{"authors":null,"categories":["技術系"],"content":"TL;DR このリポジトリを clone して docker-compose up -d して下さい (要 バージョン 1.6.0 以上)。 その後 open \u0026quot;https://$(docker-machine ip default)\u0026quot; すると、ブラウザでWordPressが立ち上がります。\n動機 WordPressをHHVMで動かしたら超速くなった!やったぜ!!という記事はをよく見るのだけれど、 具体的にどうやって構築しているのか解説している記事があんまり無かったので、実際にやってみることにしました。\nついでに、HTTP/2で提供出来るとイケてる気がしたので、併せて対応してみることにします。\nHHVM HHVMは、Facebookがオープンソースとして開発している仮想実行環境で、 PHPとHackを動かすための環境らしいです。\nまぁ、個人的にはHackもHHVMも すごいPHP ぐらいの認識しかありませんが…。 Hackは言語的にすごくて、HHVMは実行環境がすごい。今回用があるのはHHVMだけです。\nHTTP/2 HTTP/2は… すごいHTTP です。\nHTTP/1.xとの互換性を保ちつつ、効率化したもののようです。ヘッダの圧縮とか、リクエストの多重化とか。 RFC7540 日本語訳や日本語のFAQもあります。 自分は全然見てないけれど…必要になったら読みます。\nとにかく、このプロトコルで配信するだけでより効率的でより早くなる、ということです。\nHTTP/2 の実装 nginxの1.9.5からHTTP/2をサポートしているようです1。 公式Dockerリポジトリで配信されている最新イメージでもちゃんとサポートされていました。\n他にもApache HTTP Server 2.4.17+や DeNAのH2Oなど色々あるようです。\n今回はApacheよりは速かろうというのと、WordPress稼動の実例も多いことから、nginxを選択しました。適当。\n構成 リライトルールとか複雑なリクエスト制御が不要なら、 HHVMに組込みのWebサーバーがあるのでそれを使うのが簡単だし、速度面でも問題なさそうです。\nただ、WordPressでパーマリンクを利用する場合はURLのリライトが必須です。\nHHVMでもバーチャルホスト切ってリライトの設定するとか出来るみたいですが、 iniファイルに設定書いていくのは何だかしんどそうです。\n他にもSSLとか静的ファイルの配信とか諸々考えると、餅は餅屋ということでリバースプロキシを立てた方がよさそうですね。\nというわけで、リバースプロキシとして nginx を立てて、HHVMをFastCGIモードで起動してバックエンドとします。\n今回はとにかくお手軽に手元で動かしてみたかったので、諸々Dockerで動かすことにしました。 雑に図解すると以下のような感じです:\nFrontとかBackはDockerのユーザー定義ネットワークです。 Docker 1.10.0で link に代わるものとして導入されたような気がします。 /etc/hosts じゃなくてDNSで名前解決出来るようになってて最高にハッピーですね。\nFastCGIはUnixソケットで通信した方が速いと思うんですが、 今回は nginx と HHVM を別々のコンテナで動かすので、TCPで通信するようにしました。 同一システム上にFastCGIサーバとプロセスが稼動するって、実環境でもあんまり無いような気がするけど、どうなんだろう？\nコンテナひとつひとつ立てていくのは辛いので、常套手段の docker-compose を使って作ります。\n動かす このリポジトリに実際に稼動するものが置いてあります。 clone して docker-compose up -d すれば、HTTP/2でWordPressが動いている様子が確認出来ます。\nnginxやHHVMの設定はほぼデフォルトのままいじってないので、本気で動かすなら細かいチューニングは必要です。 が、全体の構成は実環境でもこのようになると思います。\n終わりに 以上で、お手軽に手元でHTTP/2+HHVMなWordPressを試すことが出来るようになりました。\nあとは実環境へのデプロイだけなんですが、さてどうしたものか。 docker-compose.yml からいい感じにデプロイしてくれるような何か、ありませんかねぇ。\n  HTTP/2 Supported with NGINX Open Source 1.9.5 | NGINX \u0026#x21a9;\u0026#xfe0e;\n   ","date":1456062592,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1456062592,"objectID":"717b8ae054a04335e2d4c660b2edaee6","permalink":"/2016/02/wordpress-http2-hhvm/","publishdate":"2016-02-21T22:49:52+09:00","relpermalink":"/2016/02/wordpress-http2-hhvm/","section":"post","summary":"TL;DR このリポジトリを clone して docker-compose up -d して下さい (要 バージョン 1.6.0 以上)。 その後 open \u0026quot;https://$(docker-machine ip default)\u0026quot; すると、ブラウザでWordPressが立ち上がります。 動機 Wo","tags":["wordpress","https","hhvm","http/2","nginx","docker"],"title":"WordPressをHTTP/2+HHVMで動かす環境をdocker-composeで構築してみた","type":"post"},{"authors":null,"categories":["技術系"],"content":"何かと容量を食うVM関連ファイル DockerやらVagrantやらで作業していると、いつのまにかディスク容量が逼迫していることがありますよね。\n自分も128GB SSDのMacBook Proを使っているので、結構いっぱいいっぱいでした。\nそこで拡張ストレージを用意して、容量を食いがちなVM関連のファイルを移動することにしました。\n(参考)Mac用の拡張ストレージ USBで外付けするようなのだと持ち運びに不便なので、 iSlice Proのような本体のSDカードスロットに差せるようなタイプを個人的には使っています。 iSliceの場合はただのアダプタなので別途128GBのmicroSDカードを調達する必要がありますが、ストレージと一体になっているモノよりは若干割安です。\n Vagrant Vagrant用のBoxファイルとVMイメージの保存場所を変える際には、以下の記事が参考になります:\nMacBookAir の容量がきついので Vagrant 環境を外付けに移した話 – モンキーレンチ\n上記の記事を参考に諸々のファイルの移動、VB上の設定を済ませたら、 以下のようなコマンドを .bashrc やら .zshenv やらに書いておけば大丈夫です:\nexport VAGRANT_HOME=/Volumes/data/.vagrant.d\nDocker Machine Docker Machine用のファイルもデカいので移動させたいです。\nDocker Machineでは MACHINE_STORAGE_PATH という環境変数を参照しています。 デフォルトは ~/.docker/machine です。\nVagrantの場合と同じように既存のファイルを新しい場所に移動し、 VB上で除去→追加の手順を踏みます。 そして以下のようなコマンドで環境変数をセットします:\nexport MACHINE_STORAGE_PATH=/Volumes/data/.docker/machine\nこれも .bashrc やらに書いておきましょう。\n注意: 外部ストレージのフォーマット 自分の場合、SDカードが元々フォーマットされていて、 差すだけで既に利用できたので、フォーマットについては特に気にせず移行作業をしてしまいました。\nところが、移行後に 'docker-machine が謎のエラーで使えなくなってしまいました。\n-D を付けてデバッグ情報を表示したとろ、以下のようなエラーが出ていました:\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: UNPROTECTED PRIVATE KEY FILE! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Permissions 0777 for '/Volumes/data/.docker/machine/machines/default/id_rsa' are too open. It is required that your private key files are NOT accessible by others. This private key will be ignored. Load key \u0026quot;/Volumes/data/.docker/machine/machines/default/id_rsa\u0026quot;: bad permissions debug2: we did not send a packet, disable method debug1: No more authentication methods to try. Permission denied (publickey,password,keyboard-interactive). 実は、 SDカードがexFATでフォーマットされていたため、permissionが777になってしまっていた ことが原因でした。 exFATの場合、 chmod することも出来ないので、フォーマットを変更する必要があります。\nMac OS X用拡張ストレージは、 〈OS X 拡張 (ジャーナリング)〉でフォーマット しましょう。 また、この際に 〈大文字／小文字を区別する〉は不要 です。 OS Xのメインストレージでは区別されませんし、 Adobeなど一部の製品は大文字小文字を区別するファイルシステムをサポートしていません1。 無用なトラブルを避けるためにも、注意しましょう。\n  Mac OS X ファイルシステムの確認方法と大文字と小文字を区別するファイルシステムについて \u0026#x21a9;\u0026#xfe0e;\n   ","date":1455807600,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1455807600,"objectID":"904b513dcd8f9be7a13ab369507cc7c6","permalink":"/2016/02/save-storage-space-by-moving-vm-related-files-to-ex-storage/","publishdate":"2016-02-19T00:00:00+09:00","relpermalink":"/2016/02/save-storage-space-by-moving-vm-related-files-to-ex-storage/","section":"post","summary":"何かと容量を食うVM関連ファイル DockerやらVagrantやらで作業していると、いつのまにかディスク容量が逼迫していることがありますよね","tags":["mac","virtualbox","docker","vagrant"],"title":"VM関連ファイルを外部ストレージに保存して空き容量を確保する","type":"post"},{"authors":null,"categories":["雑記"],"content":"ランニング 昨日おとといと、春が来たのかと思うくらい暖かったので、 何となく意識が高まって「よし明日からランニングを始めるぞ」という気持ちになっていた。\nせっかくだから一番いいランニングをしようと思って調べると、 朝食前に20分以上走るのが痩せるには最も効果があるという情報を得た。 時間を気にしながら走るのは辛そうだったので、とにかく目標地点まで行って帰ってくることにし、 スカイツリーくらいまで走ると距離的にちょうどよさそうだったのでそこを目標地点とした。\nそんな調査を前日に行なっていざ、走ろうと外に出ると 滅茶苦茶寒い 。 いや、昨日おとといと比較すると寒くなるというのは知っていたけれど、 走ってるうちに体あったまるだろくらいに考えていた。 ところが、走れども走れども一向に体は暖まらず、手はかじかみ、 寒さに震えながら走ることになった。\n後で調べたらその時の気温が3度とかだったので、そりゃ、寒いワケだ、と。\n寒さを舐めてはいけない。 次はもっと防寒するか、もっと暖かい日にしよう、という学びを得た。\nカナヘイのゆるっとカフェ 仕事終わりに、カナヘイのゆるっとカフェに行ってきた (カフェ公式ページは無くて、イベントページの1コンテンツという感じだったので、カナヘイさんのブログ記事にリンク)。\n こんな感じでパルコ入口で待ち構えている。\n 7階に辿り着くと、巨大うさぎ\u0026amp;ピスケがお出迎え。 これ、多分カナヘイの個展でも使われてた奴らが着替えただけだ。\nその他の最高に可愛い写真はこちら に置いてあるのでどうぞご自由にご利用下さい。\nもう、本当に最高にゆるっとして可愛くて可笑しくて、また行くことが確定した。 グッズ込みで1万超の出費だったけど何も痛くないね!!\nカナヘイさんもっとイベントやってください。\nGoogle Drive の画像を Web ページに埋め込む カナヘイカフェの記事を書こうとして、どうにか写真を埋め込めないか色々調べたら、 どうも写真の単体ページ(こういうの)を開いて、 〈アイテムを埋め込む〉というのが真っ当な手段ぽかった。\n直リンクする方法もあるみたいだけど、いつ Google 様に殺されるか分からなかったので止めておく。\n","date":1455631200,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1455631200,"objectID":"6f1a0a86edeb66c74e5fcf1815da5de4","permalink":"/2016/02/diary/","publishdate":"2016-02-16T23:00:00+09:00","relpermalink":"/2016/02/diary/","section":"post","summary":"ランニング 昨日おとといと、春が来たのかと思うくらい暖かったので、 何となく意識が高まって「よし明日からランニングを始めるぞ」という気持ちになっ","tags":["カナヘイ","Google Drive"],"title":"早朝ランニングしたりカナヘイカフェに行ってきた日","type":"post"},{"authors":null,"categories":["雑記"],"content":"たまには人類に少しでも役に立つような記事も書こうと思い、 Hugoの記事を書いていた。\n自分が通しでやったことだし、すぐ書き上がるだろーと高をくくっていたら、 なんだかんだ書き始めてから2週間くらい経ってしまった(もちろん、そればかりやってたワケじゃないけど)。 自分の遅筆さに呆れるばかりである。\n普段から余り人様に見せられるような文章を書いていない、というのが露呈した気がした。 そういえば普段の会話もあまり賢いものとは言えない…。 時を経るごとに、喋るのも下手になっていると感じる。\nやばいなー。やばいヤバイ。\n人とコミュニケーションとらずに生きていくのにそろそろ限界を感じているので、 意図して真っ当な会話をし、文章を書けるように心がけていこうと思う。 そういえば最近まともに読書もしていないし…。 社会生活を営む人間として真っ当に生きていく為の読書くらいは、しよう。\n業務外のアレコレ 最近(ほぼ)趣味で、 AWS上にシンプルに構築されたWordPressブログを、 HTTPSにしてついでにHTTP/2対応してHHVMで稼動させようぜ、というような試みをしている。\nAWSは最近ようやく触りはじめたばかりなので、 どういったことが出来るのか、から調べつつやっている。\nベースがAmazonLinuxなので、HHVMは公式にサポートされていない。 なので Docker を利用したいところなのだけれど、 WordPress がダイナミックに自分自身を更新するという話を聞いて、うーん、となった。 HHVMだけをECSで動かしてもしょうがないから、やるならWordPressもコンテナに詰めるのだけど、 コンテナ内で稼動しているWordPressを更新してもしょうがない、というかコンテナ再起動したら消えちゃうしなー、という。 それとも、ECSで使うEC2インスタンスにWordPressを普通に入れちゃえばいいのかな？\nなどなど、色々試行錯誤の日々である。 今日はHugoの記事書き上げるのとドメイン移行でいっぱいいっぱいだったので、 明日には何らかの成果を出したい…。\n","date":1455377193,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1455377193,"objectID":"781bfe9039b2395047d0b657880da3ea","permalink":"/2016/02/diary/","publishdate":"2016-02-14T00:26:33+09:00","relpermalink":"/2016/02/diary/","section":"post","summary":"たまには人類に少しでも役に立つような記事も書こうと思い、 Hugoの記事を書いていた。 自分が通しでやったことだし、すぐ書き上がるだろーと高をく","tags":[],"title":"Hugoの記事をようやく書き上げた日","type":"post"},{"authors":null,"categories":["技術系"],"content":"はじめに この記事は「いい感じのブログを無料で手軽に作れないかなー」、と思っている人が主な対象です。\n〈いい感じ〉というのが抽象的ですが、以下のような欲求をイメージしています:\n Top Open-Source Static Site Generators - StaticGen にあるような静的サイトジェネレータがいい サイト生成は速ければ速いほどいい モダンでレスポンシブルなのがいい 記事を書いたら即確認出来るのがいい GitHub Pagesに簡単にデプロイ出来るのがいい 独自ドメインは使いたい ブログにありがちなコメント機能とかアクセス解析とかが出来るといい HTTPSなのがいい HTTP/2なのがいい  サイトの方式を考える 手軽に始めたいので、準備はなるべく少ない方が嬉しいですね。\nWordPress みたいな動的な方式はサーバを用意しないといけないので手間ですし、場合によっては金もかかります。\n一方の静的サイト配信であれば、必要なのは HTML を配信出来る場所だけです。 GitHub Pages や類似のサービスを使えば無料で利用できますね。\n静的サイトジェネレータを選ぶ というわけで静的サイトを作成するためのジェネレータを選びます。\nTop Open-Source Static Site Generators - StaticGen の中から適当に選びましょう。\nJekyll や Octopress はメジャーっぽいですが検索してみると、何だか遅いみたいです(使ったことない)。\nGitBook はドキュメントを書くのには向いています(自分も利用しています)。ですがブログを書くためのものではありません。\nHexo か Hugo あたりがよさそうです。 これら二つはコンセプトもよく似ているし、最早好みの世界ですね。自分は何となく Hugo を使っています。\nHugo Hugo は超高速でシンプルかつ柔軟な静的サイトジェネレータだそうです。 Go言語で書かれていて、インストールはとってもカンタン。すぐに使えます。\n使い方もとってもカンタン…というワケではないかもしれません。 といっても、それは Hugo が殊更難しいというワケではなく、 そもそも静的サイトジェネレーターというモノを理解している必要がある、ということだと思います。\nブログを書く、ということだけに目的を絞れば、覚える必要がある用語は Content, Themes, Taxonomies の3つだけです。\nContent ブログで言えば記事のことです。\nContent がどのように表示されるかは使用しているテーマによりますが、 ブログ用テーマのほとんどは post ディレクトリ以下にあるファイルを記事として扱うようです。\nThemes そのまま、サイトに適用するテーマです。\nHugoの場合、テーマはそのサイトの構成まで決めてしまいます。 独自にテンプレートを書くことでカスタマイズ出来るとはいえ、目的に沿ったテーマを選択するのが無難です。\nテーマ選択の方法については後述します。\nTaxonomies やけに難しい単語ですが、分類方法のことです。 ブログなら カテゴリ や タグ といった類のものです。\n幸い、カテゴリとタグによる基本的な分類であればデフォルトで対応しているため、あまり意識する必要はありません。 カテゴリやタグのことを Taxonomies と呼ぶことだけ押さえておけばOKです。\nサイトを作る 早速サイトを作っていきましょう。\nHugo - Hugo Quickstart Guide に従えば基本的に迷うことは無いと思います。 ここでは、適当にサイトを作って、ひとつ記事を書いてみて、それがブラウザで確認出来るようになれば大丈夫です。\nただし、 日本語に対応させる設定は追加で必要 です。\n日本語対応 ありがたいことに、Hugoは日本語や中国語の為の特別な設定を用意してくれています。 設定ファイルに hasCJKLanguage = true という行を追加しましょう。\nこれをやらないと、一覧用に記事を自動で切り詰めてくれる機能や、 読み終えるまでの予想時間の計算が滅茶苦茶になってしまいます。\nテーマを決める 次はサイトに適用するテーマを選択しましょう。\nHugo Themes Site で実際の例を見ながらテーマを選ぶことが出来ます。 ブログ用のテーマのみに絞って見たい場合は こちら からどうぞ。\n注意点として、Hugoには記事を読み終えるまでの時間やおおよその文字数を表示する機能が組込まれているのですが、テーマがサポートしていない場合は表示されません。 このような機能を使いたい場合は、テーマでサポートされているかを確認しましょう。\nこのサイトは Icarus を使っています。 ショーケースの中では使える機能が一番多いと思うので、どういうことが出来るのか知るには丁度よいテーマだと思います。\nfavicon を置こう デフォルトでは Hugo の favicon が表示されてしまうので、カスタマイズしましょう。 Favicon \u0026amp; App Icon Generator などを使うとよいです。\n生成した .ico ファイルを static 直下に配置すればOKです。\n記事を書く 記事はMarkdownで書きます。\nここで困るのは、Markdownにもいくつか方言があることです。 何を参考に書けばいいか迷ってしまいますね。\nHugoではMarkdownの処理に russross/blackfriday: Blackfriday: a markdown processor for Go を使っています。 Blackfriday特有の書式(脚注など)もある為、こちらを参照しながら書くとよいでしょう。\n記事のファイル名について 日記や思い付きで即興で記事を書く場合、いちいち被らないようにファイル名を考えるのは面倒ですよね。\nHugoの場合ファイル名は管理上の問題でしかないので、適当に日付やタイムスタンプでも入れておけばよいです。 デフォルトではファイル名がURLに使われますが、記事毎の設定で slug = \u0026quot;hogehoge\u0026quot; のように設定しておけば、 実際のURLは /post/hogehoge のようになります。\nまた、以下のように設定ファイルに書いておけば、年月日がURLのプレフィクスに付くので被る心配もありません:\n[permalinks] post = \u0026quot;/:year/:month/:day/:slug\u0026quot; コメント対応 なんとなくコメント欄があるとオープンな感じでいいですよね？ ということでコメントにも対応させてみましょう。\nHugo自身がDisqusに対応しているので、 Disqusを使いましょう。 ただし、Disqusによるコメント対応も、テーマによってはサポートされていない場合があるので要注意です。\n何よりもまず Disqus への登録です。 ヘルプを見ながら行いましょう。 設定は特に必要ありませんので登録だけ済ませれば一旦OKです。後から言語設定を日本語にしたりすることも出来ます。\n登録が完了したら、登録時に入力した shortname (unique Disqus URL) を以下のように設定に追記しましょう:\ndisqusShortname = \u0026quot;sitename\u0026quot; これだけでHugoの設定は完了です。(テーマが対応していれば)個別の記事ページにコメント欄が出現します。\nデプロイ 生成したブログは GitHub Pages でホスティングします。\ngh-pages ではなく、ユーザや Organization のページとして公開する場合は、 Hosting Personal/Organization Pagesに 何も考えずに従えばOKです。 例示されているスクリプトもそのままコピペで使えます。\n実際にこのブログで使われているモノは全てこちらにあるので参考にしてください。\n独自ドメイン対応 github.com ドメインでホスティングするだけでよければ、ここから先の作業は不要です。おめでとうございます。\n以降はHugoとは関係ない話が続きます。\n既に独自ドメインを持っていて、それをブログでも使いたい場合は、 CNAMEの設定をGitHub上で行う必要があります。 こんなファイルを作ってあげて、 DNSレジストラ側で CNAME とか ANAME の設定を行ないます。\nサブドメイン vs ルートドメイン CNAME の設定をするか ANAME の設定をするかは、サブドメインを使うかルートドメインを使うかの違いです。 GitHubのヘルプによると、サブドメインを強く推奨しているそうです。\nサブドメインを推奨する理由は以下のようです:\n GitHubのCDNの恩恵を受けられる GitHub自体のIPアドレス変更に影響を受けない DoS対策がより効率的になるのでページロードが高速になる  というわけで、特別な事情がない限りはサブドメインを利用するのがよいでしょう1。\nHTTPS化 ここまででブログとしての体裁は整いました。 ですが、折角つくったサイトですからHTTPSで配信したいですよね？しましょう。\nこれにはCloudFlareを利用出来ます。 GitHub Pagesに設定しているカスタムドメインをHTTPS対応させる - 1000ch.netが非常に参考になります。\n設定が反映されるまでは最長1日程度かかりますので、ゆっくりと待ちましょう。\nなおCloudFlareを利用すると、ついでに HTTP/2 も有効になります。 他にもJSの軽量化などの各種高速化の設定を利用出来ますので、設定項目を見てみるのもよいでしょう。\n注意 注意点として、この際に Flexible SSL を用いる場合は、あくまでユーザとCloudFlare間の通信が暗号化されるだけで、 CloudFlareとGitHub Pages間の通信は暗号化されていません 。 後者の間の通信は改竄されうる状態で、かつ、ユーザはそれを知る術が無いという状態に…。\nGitHub Pages Now (Sorta) Supports HTTPS, So Use Itに詳しく書かれていますが、 一応そういう状態であるということは認識しておきましょう。\n終わりに いい感じのブログを無料で手軽に作る方法についてまとめました。 改めてまとめてみるとそれなりにボリュームがあってちょっと大変でした…。\nこれからブログを始めるぞーと思っている誰かの役に立てばいいなーと思います。\n  こう書いている自分も、最初は特に気にせずにルートドメインで登録してしまっていました。この記事を書きながら気づいて、慌てて www サブドメインに移行しました。 \u0026#x21a9;\u0026#xfe0e;\n   ","date":1454406261,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1454406261,"objectID":"a199c418fd6e3225b1089d071d6353e5","permalink":"/2016/02/blog-with-hugo/","publishdate":"2016-02-02T18:44:21+09:00","relpermalink":"/2016/02/blog-with-hugo/","section":"post","summary":"はじめに この記事は「いい感じのブログを無料で手軽に作れないかなー」、と思っている人が主な対象です。 〈いい感じ〉というのが抽象的ですが、以下の","tags":["github","hugo","cloudflare","ssl","dns"],"title":"Hugo + GitHub Pages でお手軽にブログを始めよう","type":"post"},{"authors":null,"categories":["雑記"],"content":"最近、スクラム入門の翻訳を 細々とやっている。\n元々はScrum Primer - Short Introduction to Scrumで配布されているPDFで、 認定スクラムマスター研修でも参照される真っ当な文献(のはす)。\n日本語版があるにはある1んだけれど、古いし翻訳の質が怪しいので、 自分の理解を進めるという意味も含めて独力で翻訳してみることにした。\n進捗としては、1週間の空いた時間をほぼそればっかりに費してようやっと 1/5 くらい進んだ。 さすがに他のこともやりたいので、完成までは2ヶ月くらいかかってしまうかもしれない…。 3月中には終わるように頑張ろう。\n  すくすくスクラムが翻訳した版がある。あるはずなのだけれど公式に配布している所が見当たらない。 \u0026#x21a9;\u0026#xfe0e;\n   ","date":1454249909,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1454249909,"objectID":"6099caed9327f49f6a2e4fac4d150fbe","permalink":"/2016/01/diary/","publishdate":"2016-01-31T23:18:29+09:00","relpermalink":"/2016/01/diary/","section":"post","summary":"最近、スクラム入門の翻訳を 細々とやっている。 元々はScrum Primer - Short Introduction to Scrumで配布されているPDFで、 認定スクラムマスター研修でも参照さ","tags":["scrum"],"title":"スクラム入門を翻訳する日々","type":"post"},{"authors":null,"categories":["Emacs"],"content":"#とは hugo.elは、Hugoでサイト作成する際に便利な関数群を定義したパッケージ。 marmalade-repoで公開されているので、パッケージの設定をすれば簡単にインストール出来るハズ。\n作った動機 何か〈物を書く〉という作業をする時、自分はEmacsを使っていて、可能な限りEmacsの中から出たくない。 HugoはCLIのインタフェースなので、ターミナルとEmacsを行き来することになってしまうのは辛い。\nあと色んなテーマを試したい時に、いちいちテーマ名をコピペする必要があり、辛かった。 一覧の中からhelmで選択したかった。\n…というように、Emacsの中で色々作業が完結するようにしたかった。\n作ってみて 正直テーマのインストール補助機能はHugoを初めて触って、色々試してみたいフェーズでしか使わないので、 ほとんどの場合大した価値じゃないかもしれない。\n個人的には、 hugo-new-content と、 hugo-start-server, hugo-open-browser が中々便利だなーと思って使っている。 適当に記事を書き始められるし、プレビューするためにターミナルで確認したアドレスをブラウザに打ち込むとかやらなくてよいので。\n書き終えたあとに hugo-deploy でひょいっと公開出来るのも地味に便利。 ただ、デプロイスクリプトを呼び出してるだけなんだけどね…。\n普段Emacsで物書きをするひとで、Hugoでブログ書こうと思う人は是非便利に使ってもらいたい。 そんな人あんまりいなさそうだけど…。\nTODO  hugo-open-browser で今開いているcontentを直接開けたらより便利かもしれない hugo-deploy が同期処理になってて固まるので、非同期にする テスト全然書いてないので、テストを書いてバッジをつけて喜ぶ  ","date":1453818340,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1453818340,"objectID":"ec11296ca68a84c0efc8b0129b099903","permalink":"/2016/01/hugo-el/","publishdate":"2016-01-26T23:25:40+09:00","relpermalink":"/2016/01/hugo-el/","section":"post","summary":"#とは hugo.elは、Hugoでサイト作成する際に便利な関数群を定義したパッケージ。 marmalade-repoで公開されているので、パッ","tags":["hugo.el","Emacs","hugo","EmacsLisp"],"title":"hugo.elを書いた","type":"post"},{"authors":null,"categories":["雑記"],"content":"趣味の政策物 弊チームではバックログとしてJIRAを使っている。\nここ最近しつこく「管理者権限が欲しいなァ〜(ﾁﾗｯ」としていたらめでたく権限を付与してもらえたので、 ここぞとばかりにJIRAをカスタムして使いやすいようにしていた。\nワークフローを単純にしたり、使わないフィールドを非表示にしたり、 これまで説明文用のテンプレからコピペしたりしていたのを、それぞれ専用のフィールドを設けたり。\n色々準備はしたもの、やはり始まってみると色々不便なところが出てきて、 しかもJIRAの設定じゃどうしようもない部分もあったりする。\nたかがツール、されどツールで、ツールに使われているようじゃ到底円滑にスプリントを回すことなんて出来ない。\nそこで、スクラムマスターがセレモニーを進めやすいように支援するためのuserscriptを書いた。 ソースはyewton/userscripts。\nComponent-labels for JIRA Scrum コンポーネントをエピックのようにスクラムボード上で分かりやすいく表示する。\nラベリングをしたいが為だけにエピックを使ってしまうという事態は結構そこかしこで起こっているみたいだった。 本来はコンポーネントでやるべきもので、エピックはエピックとして使えるのが健全な状態だと思うので、作った。\n実装は滅茶苦茶単純で、DOMに変更がある度に全課題を舐めて、未設定だったらAPIで該当する課題のコンポーネントを取得している。 なので、バックログに積まれている課題数分、ページを開いた瞬間にリクエストが走ることになる。 リクエストの仕方を何か工夫しないと使いものにならないかなーと思っていたのだけれど、 案外数百リクエスト飛ばすぐらいだとビクともしなかったので、愚直な実装のまま。\nDetail Pop-up for JRIA Scrum 各課題に詳細画面をポップアップで開くためのボタンを追加する。\nアジャイルボードではカスタムフィールドが表示されないので、 確認するためには編集ポップアップを開くか、詳細画面に飛ぶしかなかった。 しかも、アクティブなスプリント中はクローズされている課題が編集出来ないので、 前者の方法はスプリントレビュー時には使えない。\n画面遷移せずに詳細画面が開ければ用は足りると考え、 SimpleModalという、 その名の通りシンプルなモーダル機能を実装するためのライブラリを使って、 iframe で詳細画面を開くだけの機能を追加した。\n第3回 実践的ドメイン駆動設計ワークショップ - connpass 参加してきた。\nエンジニアチームとして、業務と技術両面でどういう風に学んでいけばいいかっていう話と、 実際にやってみたら、コードの雰囲気はこんな感じだぜ、っていう話。\nドメイン層のクラスが1,000個とかあって、個々のクラスは 30 〜 60 行が大半を占めるそう。 目指すべき方向はそこだっていうのはわかってはいるけど、 実際に稼動してるプロダクトの数字っていうのは説得力がある。\nドメイン駆動設計を実践するなら、ドメインエキスパートとか、企画者との協調が必須だと思うのだけれど、 それをどうプロセスとして制御可能な形で行えばいいか、あまり掴めてない。\n会話を重視しつつ、かつダラダラやらずに予測可能な状態で、 モデルに関する会話をする場を、開発プロセスのどこで行えばいいんだろう。\n増田さんに上手いやり方無いっすか、と相談してみたけれど、 いい方法っていうのはなくて、エンジニアチームが実績を積み重ねて信頼を得ていって、 協力体制を築くしかないね、ということだった。 それでも駄目なら、職場を変えよ、とも。\n色々仰々しいプロセスやツールを導入せずとも、 いつか阿吽の呼吸で、エンジニアチームと企画陣が協調して最高の仕事が出来るようになったときが、 アジャイルでドメイン駆動な状態なんだろう、たぶん。適当。\n","date":1453560463,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1453560463,"objectID":"74d3d3652f263db34f678fb52e4e45b2","permalink":"/2016/01/diary/","publishdate":"2016-01-23T23:47:43+09:00","relpermalink":"/2016/01/diary/","section":"post","summary":"趣味の政策物 弊チームではバックログとしてJIRAを使っている。 ここ最近しつこく「管理者権限が欲しいなァ〜(ﾁﾗｯ」としていたらめでたく権限を","tags":["jira","greasemonkey","userscript","ddd"],"title":"JIRA Agile用のuserscriptを作ったりした日","type":"post"},{"authors":null,"categories":["Emacs"],"content":"markdown-mode 2.1 で SKK 15.2 使ってると、確定しようと思って \u0026lt;return\u0026gt; すると、 確定後にカーソルが行頭に飛んでしまうという問題に遭遇した。 C-j で確定する場合は起こらない。\nTL;DR 以下を init.el 相当のファイルに書けば回避出来る。\n(defun my--markdown-entery-key-ad (this-func \u0026amp;rest args) \u0026#34;markdown-modeでskk-henkan-mode中にエンターすると行頭にカーソルが飛んでしまう問題の対応\u0026#34; (if skk-henkan-mode (skk-kakutei) (apply this-func args))) (advice-add #\u0026#39;markdown-enter-key :around #\u0026#39;my--markdown-entery-key-ad) 原因解明に至るまで \u0026lt;return\u0026gt; = \u0026lt;C-m\u0026gt; では起こり、C-j では起こらないので、まずはキーバインドを確認したところ、 前者は markdown-enter-key という関数が割り当てられていた。\n実装は至ってシンプルだった:\n(defun markdown-enter-key () \u0026#34;Handle RET according to to the value of `markdown-indent-on-enter\u0026#39;.\u0026#34; (interactive) (newline) (when markdown-indent-on-enter (markdown-indent-line))) 次に trace-function で markdown-enter-key と skk-kakutei をトレースしたところ、 以下のような出力が得られた:\n1 -\u0026gt; (markdown-enter-key) | 2 -\u0026gt; (skk-kakutei) | 2 \u0026lt;- skk-kakutei: nil 1 \u0026lt;- markdown-enter-key: nil markdown-enter-key が発動して (newline) が評価された結果、 skk-kakutei が発動して変換確定、その後に markdown-indent-line が呼ばれているのがどうも悪いらしい。\n回避方法 これは markdown-enter-key が呼ばれた時に skk-henkan-mode 中だったら、 本来の挙動ではなく skk-kakutei だけを行なうようにする ことで回避出来そうだ。\nこういう部分的な挙動の修正には advice を使うといい。 というわけで前述の挙動をそのまま定義すると、冒頭のようなコードになる。\n","date":1453297216,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1453297216,"objectID":"b24a0acb324e3a18e597a933a0e878c9","permalink":"/2016/01/markdown-mode-skk-kakutei/","publishdate":"2016-01-20T22:40:16+09:00","relpermalink":"/2016/01/markdown-mode-skk-kakutei/","section":"post","summary":"markdown-mode 2.1 で SKK 15.2 使ってると、確定しようと思って \u0026lt;return\u0026gt; すると、 確定後にカーソルが行頭に飛んでしまうという問題に遭遇した。 C-j で確定する場合は起こらない。 TL;DR","tags":["emacs","skk-mode","markdown-mode"],"title":"markdown-modeでSKKの変換確定するためにRETするとカーソルが行頭に飛ぶ問題の回避策","type":"post"},{"authors":null,"categories":["雑記"],"content":"昨日は都内も大雪(いうほどか？)で出社がダルそうだったので、終日リモートワークしていた。 本当に一歩も家から出ずに、パジャマから着替えもせずに、もくもくとPC作業。\n個人のタスク管理 最近認定スクラムマスターも取ったし、 一日中スクラムのことばかり考えて悶々とするような続いている。\nそんな中で、個人的な、業務とかまったく関係ない趣味のタスク管理もなんとかしたいなぁと思いはじめた。\n趣味なのでそんなガッツリ管理するわけじゃないのでゆるいので何かないかなーと探したら、 Trello というのがいい感じにゆるゆると使えそうな感じだった。\n見積もりとか検証とかは出来なさそうだけど、とりあえず何もしないよりはいいだろーっていう想いで、使うことにした。\nボードによると、目下最優先のタスクは、 markdwon-mode で skk-mode の確定キーバインドが想定通り機能しない件の対応である。 やるぞ。\n","date":1453212000,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1453212000,"objectID":"8c0e0e3ffcf2b17a95aaef0cb2442bcc","permalink":"/2016/01/diary/","publishdate":"2016-01-19T23:00:00+09:00","relpermalink":"/2016/01/diary/","section":"post","summary":"昨日は都内も大雪(いうほどか？)で出社がダルそうだったので、終日リモートワークしていた。 本当に一歩も家から出ずに、パジャマから着替えもせずに","tags":["trello"],"title":"雪が振ったので一日中家に引き込もっていた日の次の日","type":"post"},{"authors":null,"categories":["雑記"],"content":"HTTPS + HTTP/2 対応 世の中的にHTTPS対応してないといかんような気がしたので、 このサイトもHTTPSで配信するように対応した。\nGitHub Pagesに設定しているカスタムドメインをHTTPS対応させる - 1000ch.netを大いに参考にさせていただいた。 もう本当に書いてある通りにすればいい。 CloudFlare 様々である。\n敢えて付け加えるとしたら、(CloudFlareのサイト上に注記されてはいるけども)Flexible SSLが実際に動くようになるまでは結構時間がかかること。 自分の場合は、都合7〜8時間程度かかった。 この間、ステータスは AUTHORIZING CERTIFICATES から ISSUING CERTIFICATES になり、最終的に ACTIVE CERTIFICATE になった。\nこの方法でサイトをHTTPS対応するのは簡単だけども懸念もあるらしい1ので、 また今度この辺が実際どういう仕組みで動いてるのか調べてまとめたいと思う。\nなお、CloudFlareを利用することで副次的に HTTP/2 にも対応することになった。 Chromeで HTTP/2 and SPDY indicator を入れてアクセスしたりすると分かる。\nDDD 開発チームビルディングの一環で、ドメイン駆動設計について改めて色々調べたりしている。\n図やドキュメントに本質はないとはいえ、ユビキタス言語のサポートとして用語集を作ったり、 深いモデルの洞察のために図が役に立ったりするので、そのへんのサポートツールが欲しくなる。\n色々探してたらエヴァンス先生がマイクロサービスとの関わりについて講習してる動画があった。 境界づけられたコンテキストはサービスじゃないから、別に実サービスと一対一対応する必要はない。 例えば、複数のコンテキストにまたがってやりとりされるようなあるコンテキストのメッセージがあるなら、 それは Interchange Context (日本語で言うと相互連結コンテキスト？)のように別のコンテキストとして定義すればいいよね、みたいな話があった。\nせっかく内製開発してて、スクラムやってて、物理的にステークホルダー達とも近い距離にいるのだから、 その恩恵を最大限に活かせるようにしたい。 そのためにDDDって実践的に役立つと思うので、もっと勉強しなければ。\n勉強の一環として今度DDD Alliance! ドメイン駆動設計のためのオブジェクト指向入門に行ってみる。 日本でDDDのコミュニティってここくらい？な気がするので、勉強会の内容というよりはコミュニティの様子が気になるので。\n  GitHub Pages Now (Sorta) Supports HTTPS, So Use It \u0026#x21a9;\u0026#xfe0e;\n   ","date":1453043180,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1453043180,"objectID":"d7879c039e57ca9ca4630ee5c0fe55a5","permalink":"/2016/01/diary/","publishdate":"2016-01-18T00:06:20+09:00","relpermalink":"/2016/01/diary/","section":"post","summary":"HTTPS + HTTP/2 対応 世の中的にHTTPS対応してないといかんような気がしたので、 このサイトもHTTPSで配信するように対応した。 GitHub Pagesに設定して","tags":["ssh","cloudflare","github","https","cdn"],"title":"HTTPSに対応してついでにHTTP/2対応された日","type":"post"},{"authors":null,"categories":["雑記"],"content":"最近チームが新体制に移行するという時期で色々バタバタしていて、 立ち上げに伴う開発フローの整備とか、JIRA(プロジェクト管理ツール)の設定とか、 ワーキングアグリーメントの検討とかで、頓に忙しい。\n別に、自分の役割はスクラムマスターではなく、いちメンバーに過ぎないのだけれど、 認定スクラムマスターを取得した身としては色々手を焼かずにはいられず、 色んな雑務を買って出ているという状況。\nそれもこれも、スプリント中は〈全力疾走〉するのがスクラムである、 というスクラムのあるべき姿を目指して、自分が全力で開発に打ち込めるようにするため。\n…と思ってたけど、最近は チームのパフォーマンスを引き出す っていうことに全力になっていて、 それはそれで楽しくなってきたので、スクラムマスターもいいかなー、なんて思い始めた。\nサイト改修 今日もサイトいじりに勤しんだ。\nいじるときはEmacsを使うんだけれど、自分は適当なのでHTML中にJavaScriptを埋め込んだりする。 するとhtml-modeだとシンタックハイライトとかが無くて辛いことになるので、 web-modeを使ってる。\nHTMLファイルはCSSファイルは、始めから関連付けておくといいと思う。\ngravatar対応 静的画像だけでなく、gravatarのアイコンを使えるようにした。\nついでに、画像を丸く表示するようにした。\ngravatarに対応している他のテーマ(greyshade)と、 How to Round Gravatar Images in WordPressを参考にした。\n記念日対応 最初はHatena::Countingとか類似のサービスを利用しようと思ったんだけど、 あんまりシンプルなのが無かったので自作した。\n自作といったって、Moment.jsというとても便利なライブラリがあったので、 それを使って適当にJavaScriptを埋め込んだだけ。\ntemplate - The Go Programming Languageとか Hugo - Go Template Primerあたりも参考にした。\n","date":1452866400,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1452866400,"objectID":"b30dfca7ffb76992225e7e610909867c","permalink":"/2016/01/diary/","publishdate":"2016-01-15T23:00:00+09:00","relpermalink":"/2016/01/diary/","section":"post","summary":"最近チームが新体制に移行するという時期で色々バタバタしていて、 立ち上げに伴う開発フローの整備とか、JIRA(プロジェクト管理ツール)の設定と","tags":["blog","hugo","scrum","javascript","moment.js","emacs","web-mode","go"],"title":"忙し過ぎてお弁当も食べられなかった日","type":"post"},{"authors":null,"categories":["雑記"],"content":"BetterTouchTool will switch from free to a “Pay what you want” model early next year. – BetterTouchTool, BTT Remote, BetterSnapTool and more BetterTouchToolが1月末を目処に無料じゃなくなるらしい。\nFAQによると、ライセンスは買い切りで(当面)更新の必要は無く、 過去に寄付してたりといった一定の条件を満たす人は無料でライセンスを取得する手段が提供されるらしい。\nなお、古いのを使い続けるといったことは出来ず、そのうち使えなくなってしまうもよう。\n買うしかないなー。\n割と本気で家庭用Slack Botを作ってみた - 八発白中 うちの嫁はSlack使ってくれないから無理ぽ。。 自分もカナヘイスタンプ超気に入ってるから、LINE辞めるのは無理だな。\n記事中でHatena::Countingについての言及があった。 ちょうどこういうサービス探してたのでありがたい。 他に世界的にデファクトスタンダードなやつがあるのかとか、調べてみたい。 Create a Countdown Clock | CountingDownTo.comとかが、それらしい感じがする。\nエンジニアにお勧めしたいメモアプリ5選 | geechs magazine org-modeでだいたい間に合ってるけど、やっぱ同期と多デバイス対応が欲しいよなー。\nMobileOrg : What is MobileOrg?はちょっと使ってみて微妙だった。。\nそこだけ何とかなれば。。。\n雑感  markdown-modeとskkの相性悪いんかな、変換確定しようとすると行頭にカーソルが行ってしまってストレスフルだ。。 シンタックスハイライトとかEmojiとか使えんのかな。調べよう。  ","date":1452693600,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1452693600,"objectID":"d8aea39a6a607d24c3c3d2f374c69a66","permalink":"/2016/01/diary/","publishdate":"2016-01-13T23:00:00+09:00","relpermalink":"/2016/01/diary/","section":"post","summary":"BetterTouchTool will switch from free to a “Pay what you want” model early next year. – BetterTouchTool, BTT Remote, BetterSnapTool and more BetterTouchToolが1月末を目処に無料じゃなくなるらしい。 FAQによる","tags":["BettorTouchTool","slack","emacs","org-mode","skk","HatenaCounting"],"title":"BettorTouchToolが無料じゃなくなると分かったりした日","type":"post"},{"authors":null,"categories":["雑記"],"content":"はじめに 今年30歳になる節目の年なので、ブログを書いてみることにした。\n何もこういう試みは初めてではなく、 これまでも、はてなダイアリーだったり、 Qiitaだったりに断続的に記事を書いたりメモしたりしていた。\nそれより以前も、個人でサイト作成したり、既存のブログサービスを使っていたこともあった。\nいずれも、1年と経たずに辞めてしまった。 自分の凝り性でかつ飽きっぽい性質のためだと思う。\n今回また性懲りもなく始めたのは、何かをアウトプットしたいというよりも、 Hugoというものを何かのキッカケで知って、 Golangの静的サイト生成ツールだと知り、イマドキは静的サイト生成だよねー という巷の声を聞いた結果、使ってみたくなった、というのが大きい。\n飽きたらその内また辞めるだろうけれど、 今のところ調整したりカスタマイズしたりしたい部分が多々あるので、当面存在はするだろう。 これらの試みを記事にしたりするかもしれない。\n何を書くか 外部サービスに依存しないので(ホスティングはGitHub使ってるケド)自由奔放に書いていけたらと思っている。\n技術的な話から、日常の駄文、過去の思い出を振り返ってみたり、 あとはペットの話も書くかもしれない。時にはポエムも書くだろう。\n当分人の目に触れぬはずの所なので、好き勝手にやってみよう。\n","date":1452478271,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1452478271,"objectID":"9d37f5a53a66a96921a8853ba4c33551","permalink":"/2016/01/at-the-start/","publishdate":"2016-01-11T11:11:11+09:00","relpermalink":"/2016/01/at-the-start/","section":"post","summary":"はじめに 今年30歳になる節目の年なので、ブログを書いてみることにした。 何もこういう試みは初めてではなく、 これまでも、はてなダイアリーだったり","tags":["hugo","blog"],"title":"はじめに","type":"post"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":-62135596800,"objectID":"1f4cb24553577f6808a73065326a8b9d","permalink":"/blog/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/","section":"","summary":"","tags":null,"title":"","type":"widget_page"}]