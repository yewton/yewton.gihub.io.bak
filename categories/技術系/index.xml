<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技術系 on yewton.net</title>
    <link>https://www.yewton.net/categories/%E6%8A%80%E8%A1%93%E7%B3%BB/</link>
    <description>Recent content in 技術系 on yewton.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 21 Feb 2016 22:49:52 +0900</lastBuildDate>
    <atom:link href="https://www.yewton.net/categories/%E6%8A%80%E8%A1%93%E7%B3%BB/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>WordPressをHTTP/2&#43;HHVMで動かす環境をdocker-composeで構築してみた</title>
      <link>https://www.yewton.net/2016/02/21/wordpress-http2-hhvm</link>
      <pubDate>Sun, 21 Feb 2016 22:49:52 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/02/21/wordpress-http2-hhvm</guid>
      <description>

&lt;h2 id=&#34;tl-dr:a1ea5573187331c07f8d393beff7a4e7&#34;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yewton/wordpress-nginx-http2-hhvm&#34;&gt;このリポジトリ&lt;/a&gt;を &lt;code&gt;clone&lt;/code&gt; して &lt;code&gt;docker-compose up -d&lt;/code&gt; して下さい
(要 &lt;a href=&#34;https://github.com/docker/compose/releases/tag/1.6.0&#34;&gt;バージョン 1.6.0 以上&lt;/a&gt;)。
その後 &lt;code&gt;open &amp;quot;https://$(docker-machine ip default)&amp;quot;&lt;/code&gt; すると、ブラウザでWordPressが立ち上がります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.yewton.net/img/2016-02-21_224951/wordpress.png&#34; alt=&#34;デモ&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;動機:a1ea5573187331c07f8d393beff7a4e7&#34;&gt;動機&lt;/h2&gt;

&lt;p&gt;WordPressをHHVMで動かしたら超速くなった!やったぜ!!という記事はをよく見るのだけれど、
具体的にどうやって構築しているのか解説している記事があんまり無かったので、実際にやってみることにしました。&lt;/p&gt;

&lt;p&gt;ついでに、HTTP/2で提供出来るとイケてる気がしたので、併せて対応してみることにします。&lt;/p&gt;

&lt;h2 id=&#34;hhvm:a1ea5573187331c07f8d393beff7a4e7&#34;&gt;HHVM&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://www.yewton.net/img/2016-02-21_224951/hugo.png&#34; alt=&#34;HHVM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hhvm.com/&#34;&gt;HHVM&lt;/a&gt;は、Facebookがオープンソースとして開発している仮想実行環境で、
&lt;a href=&#34;http://php.net/&#34;&gt;PHP&lt;/a&gt;と&lt;a href=&#34;http://hacklang.org/&#34;&gt;Hack&lt;/a&gt;を動かすための環境らしいです。&lt;/p&gt;

&lt;p&gt;まぁ、個人的にはHackもHHVMも &lt;strong&gt;すごいPHP&lt;/strong&gt; ぐらいの認識しかありませんが…。
Hackは言語的にすごくて、HHVMは実行環境がすごい。今回用があるのはHHVMだけです。&lt;/p&gt;

&lt;h2 id=&#34;http-2:a1ea5573187331c07f8d393beff7a4e7&#34;&gt;HTTP/2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://http2.github.io/&#34;&gt;HTTP/2&lt;/a&gt;は… &lt;strong&gt;すごいHTTP&lt;/strong&gt; です。&lt;/p&gt;

&lt;p&gt;HTTP/1.xとの互換性を保ちつつ、効率化したもののようです。ヘッダの圧縮とか、リクエストの多重化とか。
&lt;a href=&#34;http://summerwind.jp/docs/rfc7540/&#34;&gt;RFC7540 日本語訳&lt;/a&gt;や&lt;a href=&#34;http://http2.info/faq.html#who-made-http2&#34;&gt;日本語のFAQ&lt;/a&gt;もあります。
自分は全然見てないけれど…必要になったら読みます。&lt;/p&gt;

&lt;p&gt;とにかく、このプロトコルで配信するだけでより効率的でより早くなる、ということです。&lt;/p&gt;

&lt;h3 id=&#34;http-2-の実装:a1ea5573187331c07f8d393beff7a4e7&#34;&gt;HTTP/2 の実装&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://nginx.org/en/&#34;&gt;nginx&lt;/a&gt;の1.9.5からHTTP/2をサポートしているようです&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a1ea5573187331c07f8d393beff7a4e7:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a1ea5573187331c07f8d393beff7a4e7:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;https://hub.docker.com/_/nginx/&#34;&gt;公式Dockerリポジトリ&lt;/a&gt;で配信されている最新イメージでもちゃんとサポートされていました。&lt;/p&gt;

&lt;p&gt;他にも&lt;a href=&#34;http://httpd.apache.org/&#34;&gt;Apache HTTP Server 2.4.17+&lt;/a&gt;や
&lt;a href=&#34;http://dena.com/intl/&#34;&gt;DeNA&lt;/a&gt;の&lt;a href=&#34;https://h2o.examp1e.net/&#34;&gt;H2O&lt;/a&gt;など&lt;a href=&#34;https://github.com/http2/http2-spec/wiki/Implementations&#34;&gt;色々ある&lt;/a&gt;ようです。&lt;/p&gt;

&lt;p&gt;今回はApacheよりは速かろうというのと、WordPress稼動の実例も多いことから、nginxを選択しました。適当。&lt;/p&gt;

&lt;h2 id=&#34;構成:a1ea5573187331c07f8d393beff7a4e7&#34;&gt;構成&lt;/h2&gt;

&lt;p&gt;リライトルールとか複雑なリクエスト制御が不要なら、
HHVMに組込みのWebサーバーがあるのでそれを使うのが簡単だし、速度面でも問題なさそうです。&lt;/p&gt;

&lt;p&gt;ただ、WordPressでパーマリンクを利用する場合はURLのリライトが必須です。&lt;/p&gt;

&lt;p&gt;HHVMでもバーチャルホスト切ってリライトの設定するとか出来るみたいですが、
iniファイルに設定書いていくのは何だかしんどそうです。&lt;/p&gt;

&lt;p&gt;他にもSSLとか静的ファイルの配信とか諸々考えると、餅は餅屋ということでリバースプロキシを立てた方がよさそうですね。&lt;/p&gt;

&lt;p&gt;というわけで、リバースプロキシとして nginx を立てて、HHVMをFastCGIモードで起動してバックエンドとします。&lt;/p&gt;

&lt;p&gt;今回はとにかくお手軽に手元で動かしてみたかったので、諸々Dockerで動かすことにしました。
雑に図解すると以下のような感じです:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.yewton.net/img/2016-02-21_224951/structure.png&#34; alt=&#34;構成図&#34; /&gt;&lt;/p&gt;

&lt;p&gt;FrontとかBackはDockerの&lt;a href=&#34;https://docs.docker.com/engine/userguide/networking/dockernetworks/#user-defined-networks&#34;&gt;ユーザー定義ネットワーク&lt;/a&gt;です。
&lt;a href=&#34;https://github.com/docker/docker/blob/master/CHANGELOG.md#1100-2016-02-04&#34;&gt;Docker 1.10.0&lt;/a&gt;で link に代わるものとして導入されたような気がします。
&lt;code&gt;/etc/hosts&lt;/code&gt; じゃなくてDNSで名前解決出来るようになってて最高にハッピーですね。&lt;/p&gt;

&lt;p&gt;FastCGIはUnixソケットで通信した方が速いと思うんですが、
今回は nginx と HHVM を別々のコンテナで動かすので、TCPで通信するようにしました。
同一システム上にFastCGIサーバとプロセスが稼動するって、実環境でもあんまり無いような気がするけど、どうなんだろう？&lt;/p&gt;

&lt;p&gt;コンテナひとつひとつ立てていくのは辛いので、常套手段の &lt;code&gt;docker-compose&lt;/code&gt; を使って作ります。&lt;/p&gt;

&lt;h2 id=&#34;動かす:a1ea5573187331c07f8d393beff7a4e7&#34;&gt;動かす&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yewton/wordpress-nginx-http2-hhvm&#34;&gt;このリポジトリ&lt;/a&gt;に実際に稼動するものが置いてあります。
&lt;code&gt;clone&lt;/code&gt; して &lt;code&gt;docker-compose up -d&lt;/code&gt; すれば、HTTP/2でWordPressが動いている様子が確認出来ます。&lt;/p&gt;

&lt;p&gt;nginxやHHVMの設定はほぼデフォルトのままいじってないので、本気で動かすなら細かいチューニングは必要です。
が、全体の構成は実環境でもこのようになると思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.yewton.net/img/2016-02-21_224951/wordpress.png&#34; alt=&#34;デモ&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;終わりに:a1ea5573187331c07f8d393beff7a4e7&#34;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;以上で、お手軽に手元でHTTP/2+HHVMなWordPressを試すことが出来るようになりました。&lt;/p&gt;

&lt;p&gt;あとは実環境へのデプロイだけなんですが、さてどうしたものか。
&lt;code&gt;docker-compose.yml&lt;/code&gt; からいい感じにデプロイしてくれるような何か、ありませんかねぇ。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a1ea5573187331c07f8d393beff7a4e7:1&#34;&gt;&lt;a href=&#34;https://www.nginx.com/blog/nginx-1-9-5/&#34;&gt;HTTP/2 Supported with NGINX Open Source 1.9.5 | NGINX&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a1ea5573187331c07f8d393beff7a4e7:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>VM関連ファイルを外部ストレージに保存して空き容量を確保する</title>
      <link>https://www.yewton.net/2016/02/19/save-storage-space-by-moving-vm-related-files-to-ex-storage</link>
      <pubDate>Fri, 19 Feb 2016 00:00:00 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/02/19/save-storage-space-by-moving-vm-related-files-to-ex-storage</guid>
      <description>

&lt;h2 id=&#34;何かと容量を食うvm関連ファイル:3a11f2e399daaf1f3e8ebd09bd2d51d0&#34;&gt;何かと容量を食うVM関連ファイル&lt;/h2&gt;

&lt;p&gt;DockerやらVagrantやらで作業していると、いつのまにかディスク容量が逼迫していることがありますよね。&lt;/p&gt;

&lt;p&gt;自分も128GB SSDのMacBook Proを使っているので、結構いっぱいいっぱいでした。&lt;/p&gt;

&lt;p&gt;そこで拡張ストレージを用意して、容量を食いがちなVM関連のファイルを移動することにしました。&lt;/p&gt;

&lt;h3 id=&#34;参考-mac用の拡張ストレージ:3a11f2e399daaf1f3e8ebd09bd2d51d0&#34;&gt;(参考)Mac用の拡張ストレージ&lt;/h3&gt;

&lt;p&gt;USBで外付けするようなのだと持ち運びに不便なので、
&lt;a rel=&#34;nofollow&#34; href=&#34;http://www.amazon.co.jp/gp/product/B00TTFOJ4A/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00TTFOJ4A&amp;linkCode=as2&amp;tag=yewton-22&#34;&gt;iSlice Pro&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=yewton-22&amp;l=as2&amp;o=9&amp;a=B00TTFOJ4A&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
のような本体のSDカードスロットに差せるようなタイプを個人的には使っています。
iSliceの場合はただのアダプタなので別途128GBのmicroSDカードを調達する必要がありますが、ストレージと一体になっているモノよりは若干割安です。&lt;/p&gt;

&lt;iframe src=&#34;https://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yewton-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00TTFOJ4A&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;vagrant:3a11f2e399daaf1f3e8ebd09bd2d51d0&#34;&gt;Vagrant&lt;/h2&gt;

&lt;p&gt;Vagrant用のBoxファイルとVMイメージの保存場所を変える際には、以下の記事が参考になります:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://2inc.org/blog/2014/06/28/4311/&#34; title=&#34;MacBookAir の容量がきついので Vagrant 環境を外付けに移した話 – モンキーレンチ&#34;&gt;MacBookAir の容量がきついので Vagrant 環境を外付けに移した話 – モンキーレンチ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記の記事を参考に諸々のファイルの移動、VB上の設定を済ませたら、
以下のようなコマンドを &lt;code&gt;.bashrc&lt;/code&gt; やら &lt;code&gt;.zshenv&lt;/code&gt; やらに書いておけば大丈夫です:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export VAGRANT_HOME=/Volumes/data/.vagrant.d&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;docker-machine:3a11f2e399daaf1f3e8ebd09bd2d51d0&#34;&gt;Docker Machine&lt;/h2&gt;

&lt;p&gt;Docker Machine用のファイルもデカいので移動させたいです。&lt;/p&gt;

&lt;p&gt;Docker Machineでは &lt;code&gt;MACHINE_STORAGE_PATH&lt;/code&gt; という環境変数を参照しています。
デフォルトは &lt;code&gt;~/.docker/machine&lt;/code&gt; です。&lt;/p&gt;

&lt;p&gt;Vagrantの場合と同じように既存のファイルを新しい場所に移動し、
VB上で除去→追加の手順を踏みます。
そして以下のようなコマンドで環境変数をセットします:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export MACHINE_STORAGE_PATH=/Volumes/data/.docker/machine&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;これも &lt;code&gt;.bashrc&lt;/code&gt; やらに書いておきましょう。&lt;/p&gt;

&lt;h2 id=&#34;注意-外部ストレージのフォーマット:3a11f2e399daaf1f3e8ebd09bd2d51d0&#34;&gt;注意: 外部ストレージのフォーマット&lt;/h2&gt;

&lt;p&gt;自分の場合、SDカードが元々フォーマットされていて、
差すだけで既に利用できたので、フォーマットについては特に気にせず移行作業をしてしまいました。&lt;/p&gt;

&lt;p&gt;ところが、移行後に &lt;code&gt;&#39;docker-machine&lt;/code&gt; が謎のエラーで使えなくなってしまいました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-D&lt;/code&gt; を付けてデバッグ情報を表示したとろ、以下のようなエラーが出ていました:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0777 for &#39;/Volumes/data/.docker/machine/machines/default/id_rsa&#39; are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.
Load key &amp;quot;/Volumes/data/.docker/machine/machines/default/id_rsa&amp;quot;: bad permissions
debug2: we did not send a packet, disable method
debug1: No more authentication methods to try.
Permission denied (publickey,password,keyboard-interactive).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実は、 &lt;strong&gt;SDカードがexFATでフォーマットされていたため、permissionが777になってしまっていた&lt;/strong&gt;
ことが原因でした。
exFATの場合、 &lt;code&gt;chmod&lt;/code&gt; することも出来ないので、フォーマットを変更する必要があります。&lt;/p&gt;

&lt;p&gt;Mac OS X用拡張ストレージは、 &lt;strong&gt;〈OS X 拡張 (ジャーナリング)〉でフォーマット&lt;/strong&gt; しましょう。
また、この際に &lt;strong&gt;〈大文字／小文字を区別する〉は不要&lt;/strong&gt; です。
OS Xのメインストレージでは区別されませんし、
Adobeなど一部の製品は大文字小文字を区別するファイルシステムをサポートしていません&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3a11f2e399daaf1f3e8ebd09bd2d51d0:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3a11f2e399daaf1f3e8ebd09bd2d51d0:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
無用なトラブルを避けるためにも、注意しましょう。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:3a11f2e399daaf1f3e8ebd09bd2d51d0:1&#34;&gt;&lt;a href=&#34;https://helpx.adobe.com/jp/x-productkb/global/cpsid_83180.html&#34;&gt;Mac OS X ファイルシステムの確認方法と大文字と小文字を区別するファイルシステムについて&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3a11f2e399daaf1f3e8ebd09bd2d51d0:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hugo &#43; GitHub Pages でお手軽にブログを始めよう</title>
      <link>https://www.yewton.net/2016/02/02/blog-with-hugo</link>
      <pubDate>Tue, 02 Feb 2016 18:44:21 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/02/02/blog-with-hugo</guid>
      <description>

&lt;h2 id=&#34;はじめに:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;この記事は「いい感じのブログを無料で手軽に作れないかなー」、と思っている人が主な対象です。&lt;/p&gt;

&lt;p&gt;〈いい感じ〉というのが抽象的ですが、以下のような欲求をイメージしています:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.staticgen.com/&#34;&gt;Top Open-Source Static Site Generators - StaticGen&lt;/a&gt; にあるような静的サイトジェネレータがいい&lt;/li&gt;
&lt;li&gt;サイト生成は速ければ速いほどいい&lt;/li&gt;
&lt;li&gt;モダンでレスポンシブルなのがいい&lt;/li&gt;
&lt;li&gt;記事を書いたら即確認出来るのがいい&lt;/li&gt;
&lt;li&gt;GitHub Pagesに簡単にデプロイ出来るのがいい&lt;/li&gt;
&lt;li&gt;独自ドメインは使いたい&lt;/li&gt;
&lt;li&gt;ブログにありがちなコメント機能とかアクセス解析とかが出来るといい&lt;/li&gt;
&lt;li&gt;HTTPSなのがいい&lt;/li&gt;
&lt;li&gt;HTTP/2なのがいい&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;サイトの方式を考える:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;サイトの方式を考える&lt;/h2&gt;

&lt;p&gt;手軽に始めたいので、準備はなるべく少ない方が嬉しいですね。&lt;/p&gt;

&lt;p&gt;WordPress みたいな動的な方式はサーバを用意しないといけないので手間ですし、場合によっては金もかかります。&lt;/p&gt;

&lt;p&gt;一方の静的サイト配信であれば、必要なのは HTML を配信出来る場所だけです。
GitHub Pages や類似のサービスを使えば無料で利用できますね。&lt;/p&gt;

&lt;h2 id=&#34;静的サイトジェネレータを選ぶ:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;静的サイトジェネレータを選ぶ&lt;/h2&gt;

&lt;p&gt;というわけで静的サイトを作成するためのジェネレータを選びます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.staticgen.com/&#34;&gt;Top Open-Source Static Site Generators - StaticGen&lt;/a&gt; の中から適当に選びましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; や &lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt; はメジャーっぽいですが検索してみると、何だか遅いみたいです(使ったことない)。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gitbook.com/&#34;&gt;GitBook&lt;/a&gt; はドキュメントを書くのには向いています(自分も利用しています)。ですがブログを書くためのものではありません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hexo.io/&#34;&gt;Hexo&lt;/a&gt; か &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; あたりがよさそうです。
これら二つはコンセプトもよく似ているし、最早好みの世界ですね。自分は何となく Hugo を使っています。&lt;/p&gt;

&lt;h2 id=&#34;hugo:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;Hugo&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://www.yewton.net/img/2016-01-11_184419/hugo.png&#34; alt=&#34;Hugoのロゴ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; は超高速でシンプルかつ柔軟な静的サイトジェネレータだそうです。
Go言語で書かれていて、インストールはとってもカンタン。すぐに使えます。&lt;/p&gt;

&lt;p&gt;使い方もとってもカンタン…というワケではないかもしれません。
といっても、それは Hugo が殊更難しいというワケではなく、
そもそも静的サイトジェネレーターというモノを理解している必要がある、ということだと思います。&lt;/p&gt;

&lt;p&gt;ブログを書く、ということだけに目的を絞れば、覚える必要がある用語は
&lt;em&gt;Content&lt;/em&gt;, &lt;em&gt;Themes&lt;/em&gt;, &lt;em&gt;Taxonomies&lt;/em&gt; の3つだけです。&lt;/p&gt;

&lt;h3 id=&#34;content:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;Content&lt;/h3&gt;

&lt;p&gt;ブログで言えば記事のことです。&lt;/p&gt;

&lt;p&gt;Content がどのように表示されるかは使用しているテーマによりますが、
ブログ用テーマのほとんどは &lt;code&gt;post&lt;/code&gt; ディレクトリ以下にあるファイルを記事として扱うようです。&lt;/p&gt;

&lt;h3 id=&#34;themes:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;Themes&lt;/h3&gt;

&lt;p&gt;そのまま、サイトに適用するテーマです。&lt;/p&gt;

&lt;p&gt;Hugoの場合、テーマはそのサイトの構成まで決めてしまいます。
独自にテンプレートを書くことでカスタマイズ出来るとはいえ、目的に沿ったテーマを選択するのが無難です。&lt;/p&gt;

&lt;p&gt;テーマ選択の方法については後述します。&lt;/p&gt;

&lt;h3 id=&#34;taxonomies:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;Taxonomies&lt;/h3&gt;

&lt;p&gt;やけに難しい単語ですが、分類方法のことです。
ブログなら &lt;strong&gt;カテゴリ&lt;/strong&gt; や &lt;strong&gt;タグ&lt;/strong&gt; といった類のものです。&lt;/p&gt;

&lt;p&gt;幸い、カテゴリとタグによる基本的な分類であればデフォルトで対応しているため、あまり意識する必要はありません。
カテゴリやタグのことを Taxonomies と呼ぶことだけ押さえておけばOKです。&lt;/p&gt;

&lt;h2 id=&#34;サイトを作る:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;サイトを作る&lt;/h2&gt;

&lt;p&gt;早速サイトを作っていきましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;Hugo - Hugo Quickstart Guide&lt;/a&gt; に従えば基本的に迷うことは無いと思います。
ここでは、適当にサイトを作って、ひとつ記事を書いてみて、それがブラウザで確認出来るようになれば大丈夫です。&lt;/p&gt;

&lt;p&gt;ただし、 &lt;strong&gt;日本語に対応させる設定は追加で必要&lt;/strong&gt; です。&lt;/p&gt;

&lt;h3 id=&#34;日本語対応:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;日本語対応&lt;/h3&gt;

&lt;p&gt;ありがたいことに、Hugoは日本語や中国語の為の特別な設定を用意してくれています。
設定ファイルに &lt;code&gt;hasCJKLanguage = true&lt;/code&gt; という行を追加しましょう。&lt;/p&gt;

&lt;p&gt;これをやらないと、一覧用に記事を自動で切り詰めてくれる機能や、
読み終えるまでの予想時間の計算が滅茶苦茶になってしまいます。&lt;/p&gt;

&lt;h2 id=&#34;テーマを決める:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;テーマを決める&lt;/h2&gt;

&lt;p&gt;次はサイトに適用するテーマを選択しましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;Hugo Themes Site&lt;/a&gt; で実際の例を見ながらテーマを選ぶことが出来ます。
ブログ用のテーマのみに絞って見たい場合は &lt;a href=&#34;http://themes.gohugo.io/tags/blog&#34;&gt;こちら&lt;/a&gt; からどうぞ。&lt;/p&gt;

&lt;p&gt;注意点として、Hugoには記事を読み終えるまでの時間やおおよその文字数を表示する機能が組込まれているのですが、テーマがサポートしていない場合は表示されません。
このような機能を使いたい場合は、テーマでサポートされているかを確認しましょう。&lt;/p&gt;

&lt;p&gt;このサイトは &lt;a href=&#34;http://themes.gohugo.io/hugo-icarus/&#34;&gt;Icarus&lt;/a&gt; を使っています。
ショーケースの中では使える機能が一番多いと思うので、どういうことが出来るのか知るには丁度よいテーマだと思います。&lt;/p&gt;

&lt;h2 id=&#34;favicon-を置こう:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;favicon を置こう&lt;/h2&gt;

&lt;p&gt;デフォルトでは Hugo の favicon が表示されてしまうので、カスタマイズしましょう。
&lt;a href=&#34;http://www.favicon-generator.org/&#34;&gt;Favicon &amp;amp; App Icon Generator&lt;/a&gt; などを使うとよいです。&lt;/p&gt;

&lt;p&gt;生成した &lt;code&gt;.ico&lt;/code&gt; ファイルを &lt;code&gt;static&lt;/code&gt; 直下に配置すればOKです。&lt;/p&gt;

&lt;h2 id=&#34;記事を書く:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;記事を書く&lt;/h2&gt;

&lt;p&gt;記事はMarkdownで書きます。&lt;/p&gt;

&lt;p&gt;ここで困るのは、Markdownにもいくつか方言があることです。
何を参考に書けばいいか迷ってしまいますね。&lt;/p&gt;

&lt;p&gt;HugoではMarkdownの処理に &lt;a href=&#34;https://github.com/russross/blackfriday&#34;&gt;russross/blackfriday: Blackfriday: a markdown processor for Go&lt;/a&gt; を使っています。
Blackfriday特有の書式(脚注など)もある為、こちらを参照しながら書くとよいでしょう。&lt;/p&gt;

&lt;h3 id=&#34;記事のファイル名について:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;記事のファイル名について&lt;/h3&gt;

&lt;p&gt;日記や思い付きで即興で記事を書く場合、いちいち被らないようにファイル名を考えるのは面倒ですよね。&lt;/p&gt;

&lt;p&gt;Hugoの場合ファイル名は管理上の問題でしかないので、適当に日付やタイムスタンプでも入れておけばよいです。
デフォルトではファイル名がURLに使われますが、記事毎の設定で &lt;code&gt;slug = &amp;quot;hogehoge&amp;quot;&lt;/code&gt; のように設定しておけば、
実際のURLは &lt;code&gt;/post/hogehoge&lt;/code&gt; のようになります。&lt;/p&gt;

&lt;p&gt;また、以下のように設定ファイルに書いておけば、年月日がURLのプレフィクスに付くので被る心配もありません:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[permalinks]
    post = &amp;quot;/:year/:month/:day/:slug&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コメント対応:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;コメント対応&lt;/h2&gt;

&lt;p&gt;なんとなくコメント欄があるとオープンな感じでいいですよね？
ということでコメントにも対応させてみましょう。&lt;/p&gt;

&lt;p&gt;Hugo自身が&lt;a href=&#34;https://github.com/spf13/hugo/blob/cd36d752a3e8e2b75965fe281e6466d7a274cd94/tpl/template_embedded.go#L131-L145&#34;&gt;Disqusに対応している&lt;/a&gt;ので、
&lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt;を使いましょう。
ただし、Disqusによるコメント対応も、テーマによってはサポートされていない場合があるので要注意です。&lt;/p&gt;

&lt;p&gt;何よりもまず Disqus への登録です。
&lt;a href=&#34;https://help.disqus.com/customer/portal/articles/466182-publisher-quick-start-guide&#34;&gt;ヘルプ&lt;/a&gt;を見ながら行いましょう。
設定は特に必要ありませんので登録だけ済ませれば一旦OKです。後から言語設定を日本語にしたりすることも出来ます。&lt;/p&gt;

&lt;p&gt;登録が完了したら、登録時に入力した shortname (unique Disqus URL) を以下のように設定に追記しましょう:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;disqusShortname = &amp;quot;sitename&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでHugoの設定は完了です。(テーマが対応していれば)個別の記事ページにコメント欄が出現します。&lt;/p&gt;

&lt;h2 id=&#34;デプロイ:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;デプロイ&lt;/h2&gt;

&lt;p&gt;生成したブログは GitHub Pages でホスティングします。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gh-pages&lt;/code&gt; ではなく、ユーザや Organization のページとして公開する場合は、
&lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/#hosting-personal-organization-pages&#34;&gt;Hosting Personal/Organization Pages&lt;/a&gt;に
何も考えずに従えばOKです。
例示されているスクリプトもそのままコピペで使えます。&lt;/p&gt;

&lt;p&gt;実際にこのブログで使われているモノは全て&lt;a href=&#34;https://github.com/yewton/yewton-hugo&#34;&gt;こちら&lt;/a&gt;にあるので参考にしてください。&lt;/p&gt;

&lt;h2 id=&#34;独自ドメイン対応:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;独自ドメイン対応&lt;/h2&gt;

&lt;p&gt;github.com ドメインでホスティングするだけでよければ、ここから先の作業は不要です。おめでとうございます。&lt;/p&gt;

&lt;p&gt;以降はHugoとは関係ない話が続きます。&lt;/p&gt;

&lt;p&gt;既に独自ドメインを持っていて、それをブログでも使いたい場合は、
&lt;a href=&#34;https://help.github.com/articles/adding-a-cname-file-to-your-repository/&#34;&gt;CNAME&lt;/a&gt;の設定をGitHub上で行う必要があります。
&lt;a href=&#34;https://github.com/yewton/yewton.github.io/blob/master/CNAME&#34;&gt;こんなファイル&lt;/a&gt;を作ってあげて、
DNSレジストラ側で &lt;code&gt;CNAME&lt;/code&gt; とか &lt;code&gt;ANAME&lt;/code&gt; の設定を行ないます。&lt;/p&gt;

&lt;h3 id=&#34;サブドメイン-vs-ルートドメイン:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;サブドメイン vs ルートドメイン&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;CNAME&lt;/code&gt; の設定をするか &lt;code&gt;ANAME&lt;/code&gt; の設定をするかは、サブドメインを使うかルートドメインを使うかの違いです。
GitHubのヘルプによると、&lt;a href=&#34;https://help.github.com/articles/about-custom-domains-for-github-pages-sites/#subdomains&#34;&gt;サブドメインを強く推奨している&lt;/a&gt;そうです。&lt;/p&gt;

&lt;p&gt;サブドメインを推奨する理由は以下のようです:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHubのCDNの恩恵を受けられる&lt;/li&gt;
&lt;li&gt;GitHub自体のIPアドレス変更に影響を受けない&lt;/li&gt;
&lt;li&gt;DoS対策がより効率的になるのでページロードが高速になる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というわけで、特別な事情がない限りはサブドメインを利用するのがよいでしょう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:072657b3c7db6be31ea1c615ed4cd298:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:072657b3c7db6be31ea1c615ed4cd298:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;https化:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;HTTPS化&lt;/h2&gt;

&lt;p&gt;ここまででブログとしての体裁は整いました。
ですが、折角つくったサイトですからHTTPSで配信したいですよね？しましょう。&lt;/p&gt;

&lt;p&gt;これには&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;CloudFlare&lt;/a&gt;を利用出来ます。
&lt;a href=&#34;https://1000ch.net/posts/2015/github-pages-custom-domain-in-https.html&#34;&gt;GitHub Pagesに設定しているカスタムドメインをHTTPS対応させる - 1000ch.net&lt;/a&gt;が非常に参考になります。&lt;/p&gt;

&lt;p&gt;設定が反映されるまでは最長1日程度かかりますので、ゆっくりと待ちましょう。&lt;/p&gt;

&lt;p&gt;なおCloudFlareを利用すると、ついでに HTTP/2 も有効になります。
他にもJSの軽量化などの各種高速化の設定を利用出来ますので、設定項目を見てみるのもよいでしょう。&lt;/p&gt;

&lt;h3 id=&#34;注意:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;注意&lt;/h3&gt;

&lt;p&gt;注意点として、この際に Flexible SSL を用いる場合は、あくまでユーザとCloudFlare間の通信が暗号化されるだけで、 &lt;strong&gt;CloudFlareとGitHub Pages間の通信は暗号化されていません&lt;/strong&gt; 。
後者の間の通信は改竄されうる状態で、かつ、ユーザはそれを知る術が無いという状態に…。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://konklone.com/post/github-pages-now-supports-https-so-use-it&#34;&gt;GitHub Pages Now (Sorta) Supports HTTPS, So Use It&lt;/a&gt;に詳しく書かれていますが、
一応そういう状態であるということは認識しておきましょう。&lt;/p&gt;

&lt;h2 id=&#34;終わりに:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;いい感じのブログを無料で手軽に作る方法についてまとめました。
改めてまとめてみるとそれなりにボリュームがあってちょっと大変でした…。&lt;/p&gt;

&lt;p&gt;これからブログを始めるぞーと思っている誰かの役に立てばいいなーと思います。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:072657b3c7db6be31ea1c615ed4cd298:1&#34;&gt;こう書いている自分も、最初は特に気にせずにルートドメインで登録してしまっていました。この記事を書きながら気づいて、慌てて &lt;code&gt;www&lt;/code&gt; サブドメインに移行しました。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:072657b3c7db6be31ea1c615ed4cd298:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>