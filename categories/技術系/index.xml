<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技術系 | yewton.net</title><link>https://www.yewton.net/categories/%E6%8A%80%E8%A1%93%E7%B3%BB/</link><atom:link href="https://www.yewton.net/categories/%E6%8A%80%E8%A1%93%E7%B3%BB/index.xml" rel="self" type="application/rss+xml"/><description>技術系</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ja-jp</language><copyright>© 2016-2020 yewton</copyright><lastBuildDate>Sun, 09 Apr 2017 21:55:31 +0900</lastBuildDate><image><url>https://www.yewton.net/img/icon.png</url><title>技術系</title><link>https://www.yewton.net/categories/%E6%8A%80%E8%A1%93%E7%B3%BB/</link></image><item><title>Nexus 7 2012 (grouper) に Beanstalk と ParrotMod を入れて蘇生する</title><link>https://www.yewton.net/2017/04/09/grouper-beanstalk/</link><pubDate>Sun, 09 Apr 2017 21:55:31 +0900</pubDate><guid>https://www.yewton.net/2017/04/09/grouper-beanstalk/</guid><description>&lt;p>最近はじめて &lt;a href="http://amzn.to/2nXsSKh">Fire タブレット&lt;/a> をキャンペーンで購入して、
こういう本読むだけとか書い物するだけとかの単機能なタブレットも結構いいな、と思った。
そして、うちに使ってない &lt;a href="http://amzn.to/2oSEwJK">Nexus 7&lt;/a> があることを思い出した。&lt;/p>
&lt;p>この Nexus 7 、どうして使っていなかったかというと、
Lollipop にアップデートしてしまったから。
Nexus 7 2012 は Lollipop にアップデートしてしまうと、
動作が重過ぎて使い物にならなくなる。&lt;/p>
&lt;p>どうせ使いものにならないなら、ということで
&lt;a href="http://www.slimroms.net/">SlimKat&lt;/a> や
&lt;a href="https://forum.xda-developers.com/nexus-7/development/unofficial-pure-nexus-project-layers-t3243943">PureNexus&lt;/a> を
焼いて使ってみたりもしたが、
前者は軽いけど見た目や使用感がちょっと微妙( 4.4 ベースだし…)で、
後者は使っていくうちにやっぱり重くなっていって駄目だった。&lt;/p>
&lt;p>今回 Fire を買ってあらためて 7 インチの Android タブレットが欲しくなってしまったので、
もう一度蘇生を試みることにした。&lt;/p>
&lt;p>そして &lt;a href="https://www.reddit.com/r/Nexus7/comments/3h0oxg/recommended_fastlightweight_rom_for_2012_n7/">Reddit のこのスレ&lt;/a> を満つけ、
そこから &lt;a href="https://teknovenus.com/speed-up-nexus-7-f2fs-slimkat-ghost/">Speed up the Nexus 7 with F2FS and SlimKat&lt;/a> という記事に辿り着いた。&lt;/p>
&lt;p>元々は SlimKat と F2FS の記事だったようだが、2017 年に更新があり、
&lt;a href="https://forum.xda-developers.com/nexus-7/development/rom-beanstalk-rom-t3312870">Beanstalk 6.0.1&lt;/a> と
&lt;a href="https://forum.xda-developers.com/nexus-7/orig-development/parrotmod-speed-2012-nexus-7-emmc-fix-t3300416">ParrotMod&lt;/a> が
勧められていた(執筆者自身は試していないようだったが)。&lt;/p>
&lt;h2 id="beanstalk">Beanstalk&lt;/h2>
&lt;p>CyanogenMod 13 (Marshmallow) をベースに作られたカスタム Rom 。
&lt;a href="https://forum.xda-developers.com/galaxy-s3/development/rom-t3370186">フォーラム&lt;/a> の記述によると、&lt;/p>
&lt;blockquote>
&lt;p>Smoother than Butter&lt;br>
Friendly Battery&lt;br>
Tons of Features&lt;br>
DirtyUnicorns Features&lt;br>
Always Up-to-date&lt;br>
100% Build from Source&lt;/p>
&lt;/blockquote>
&lt;p>…らしい。&lt;/p>
&lt;h2 id="parrotmod">ParrotMod&lt;/h2>
&lt;p>Nexus 7 2012 をすげーいい感じにしてくれるやつ。&lt;/p>
&lt;blockquote>
&lt;p>FLASH MEMORY SPEED INCREASE! up to 4x better performance WITHOUT F2FS OR DYNAMIC FSYNC&lt;/p>
&lt;/blockquote>
&lt;p>という速度の向上を筆頭に、様々な最適化を行って快適にしてくれるようだ。&lt;/p>
&lt;h2 id="heading">結果&lt;/h2>
&lt;p>Amazon Kindle , YouTube 、Feedly , 1Password あたりを主に動かしているが、
アプリ起動時にたまに固まることがあるものの、大抵一度タスクキルして起動し直せば問題なく動作している。
娯楽用途としては十分な性能になった。&lt;/p>
&lt;p>もし、使わなくなった Nexus 7 2012 がご家庭に眠っているのなら、
Beanstalk と ParrotMod を試してみる価値はアリだと思う。&lt;/p></description></item><item><title>Atlassian から無料でTシャツをもらう方法、あるいはドラゴンの倒し方</title><link>https://www.yewton.net/2016/09/03/how-to-get-atlassian-dragon-slayer-t-shirt/</link><pubDate>Sat, 03 Sep 2016 15:34:07 +0900</pubDate><guid>https://www.yewton.net/2016/09/03/how-to-get-atlassian-dragon-slayer-t-shirt/</guid><description>&lt;p>仕事で Atlassian 製品を使っていて、個人的にも便利なタスク・ドキュメント管理に欲しいな、と思い、
&lt;a href="https://ja.atlassian.com/licensing/starter#aboutthestarterprogram-8">Atlassian のスターターライセンスについてのドキュメント&lt;/a>を読んでいた。&lt;/p>
&lt;p>すると気になるフレーズが目に入った。 &lt;strong>「ドラゴンズレアとは何ですか？」&lt;/strong> ──&lt;/p>
&lt;blockquote>
&lt;p>6 つのスターター ライセンスの統合スイートをセットアップすると素晴らしい結果になりますが、セットアップ手順は複雑で時間がかかります。アトラシアンでは、アトラシアン アプリケーション スイートを統合するため方法をドラゴンズレアという説明書にまとめました。また、この困難だけれども素晴らしい旅を完了された方全員向けに、限定版アトラシアン ドラゴン スレイヤー T シャツを提供しています。今すぐ冒険を始めましょう! 勇気がある方はドラゴンに立ち向かいましょう!&lt;/p>
&lt;/blockquote>
&lt;p>せっかくもらえるもんなら、とドラゴン退治をすることにした。&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
&lt;p>&lt;strong>2017/1/20 時点の注意&lt;/strong>&lt;/p>
&lt;p>どうやら現在、 &lt;strong>Tシャツを要求するためのページが 404 になってしまっている&lt;/strong> ようす
(
&lt;a href="https://answers.atlassian.com/questions/43114478/dragon-slayed-but-cant-get-t-shirt">Dragon slayed, but can't get t-shirt? - Atlassian Answers&lt;/a> )
。&lt;/p>
&lt;p>せっかくやってもTシャツはもらえないかもしれないので注意。&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="alert alert-note">
&lt;div>
&lt;p>&lt;strong>2017/2/5 時点の情報&lt;/strong>&lt;/p>
&lt;p>どうやらサイトが復旧したようす
&lt;a href="https://www.atlassian.com/you-slayed-the-dragon">You Slayed the Dragon | Atlassian&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="heading">環境要件&lt;/h2>
&lt;p>ドキュメントには「最低 3 GB の RAM と 500 MB のアプリケーションファイル用の空き容量」とある。&lt;/p>
&lt;p>しかし、実際にやってみたところ 3 GB では全てのアプリケーションを立ち上げることが出来なかった。
最終的に 6 つのアプリケーションを稼動させることになるのだが、 5 つが限界だった。
&lt;strong>最低 RAM は 4 GB は必要&lt;/strong> だと思う。&lt;/p>
&lt;p>またディスク容量に関しては、まっさらな環境に諸々構築したあとの総使用量が 6 GB 程だった。
こちらも &lt;strong>最低ストレージは 10 GB は必要&lt;/strong> だと思う。&lt;/p>
&lt;p>自分は &lt;a href="https://cloud.google.com/">Google Cloud Platform&lt;/a> を利用して構築した。
Google Compute Engine の &lt;code>vCPU x 1&lt;/code> (メモリ 3.75 GB)の標準インスタンスを使ったが、
前述の通りメモリが足りなくなってしまったので、 &lt;code>vCPU x 2&lt;/code> (メモリ 7.5 GB)のインスタンスを使う方がよいと思う。&lt;/p>
&lt;p>OS は &lt;strong>Debian GNU/Linux 8 (jessie)&lt;/strong> を使用した。&lt;/p>
&lt;h2 id="here-be-dragons">Here Be Dragons&lt;/h2>
&lt;p>それでは &lt;a href="https://confluence.atlassian.com/display/ATLAS/Here+Be+Dragons">ドキュメント&lt;/a> に従って冒険を始めよう。&lt;/p>
&lt;p>基本的には書かれてある通りにやればいいだけなのだが、いくつか自分が躓いたポイントがあるので紹介していきたい。&lt;/p>
&lt;h3 id="dragons-stage-1---install-jirahttpsconfluenceatlassiancomdisplayatlasdragonsstage1-installjira">&lt;a href="https://confluence.atlassian.com/display/ATLAS/Dragons+Stage+1+-+Install+JIRA">Dragons Stage 1 - Install JIRA&lt;/a>&lt;/h3>
&lt;h4 id="step-1-install-java">Step 1. Install Java&lt;/h4>
&lt;p>まず Java を用意しなければならないのだが、なんと &lt;strong>Oracle JDK 1.7.x&lt;/strong> でなければならない。
&lt;a href="http://www.oracle.com/technetwork/jp/java/eol-135779-ja.html">1.7 系はすでにサポートが終了している&lt;/a>のだが、
このクエストではこのバージョンしか想定していないようなので、大人しく従っておく。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">wget --header &lt;span class="s2">&amp;#34;Cookie: oraclelicense=accept-securebackup-cookie&amp;#34;&lt;/span> http://download.oracle.com/otn-pub/java/jdk/7u79-b15/jdk-7u79-linux-x64.tar.gz
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Debian で Oracle Java を利用するには [JavaPackage - Debian Wiki](&lt;a href="https://wiki.debian.org/JavaPackage">https://wiki.debian.org/JavaPackage&lt;/a> &amp;ldquo;JavaPackage -
Debian Wiki&amp;rdquo;) にあるような作業が必要になる。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo sed -i &lt;span class="s1">&amp;#39;s/deb http:\/\/httpredir.debian.org\/debian\/ jessie main/deb http:\/\/httpredir.debian.org\/debian\/jessie main contrib/&amp;#39;&lt;/span> /etc/apt/sources.list
sudo apt-get update -y &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo apt-get install -y libgl1-mesa-glx libfontconfig1 libxslt1.1 libxtst6 libxxf86vm1 libgtk2.0-0 java-package
make-jpkg jdk-7u79-linux-x64.tar.gz
sudo dpkg -i oracle-java7-jdk_7u79_amd64.deb
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="step-2-install-your-postgresql-database-server">Step 2. Install your PostgreSQL Database Server&lt;/h4>
&lt;p>こちらも &lt;strong>8.4.x.&lt;/strong> というバージョン指定がある。
Java と同様に既に &lt;a href="https://www.postgresql.org/support/versioning/">サポート終了&lt;/a> しているため、
Debian のリポジトリでは配布されていない。
そのため、リポジトリを追加してからインストールする必要がある。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo sh -c &lt;span class="s1">&amp;#39;echo &amp;#34;deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main&amp;#34; &amp;gt; /etc/apt/sources.list.d/pgdg.list&amp;#39;&lt;/span>
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc &lt;span class="p">|&lt;/span> sudo apt-key add -
sudo apt-get update -y &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo apt-get upgrade -y &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo apt-get install -y postgresql-8.4
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="step-3-create-your-jira-database-in-postgresql">Step 3. Create your JIRA Database in PostgreSQL&lt;/h4>
&lt;p>Atlassian 製品はデータベースとして MySQL や PostgreSQL を利用出来る。
ただ、日本語や絵文字などマルチバイト文字を扱う場合は PostgresSQL を使うのが無難なようだ( &lt;a href="https://confluence.atlassian.com/jirakb/jira-does-not-work-with-emoji-4-byte-characters-429919955.html">参考&lt;/a> )。&lt;/p>
&lt;p>個人的にあまり馴染みがないのだけれど、このドラゴンズレアでも PostgreSQL が指定されているので従っておく。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo -u postgres createuser -S -d -r -P -E jirauser
&lt;span class="c1"># パスワード入力&lt;/span>
sudo -u postgres createdb --owner jirauser --encoding utf8 jira
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="step-4-install-jira">Step 4. Install JIRA&lt;/h4>
&lt;p>JIRA のバージョンも指定されている。 &lt;strong>6.3.15&lt;/strong> を使う必要がある。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">wget https://www.atlassian.com/software/jira/downloads/binary/atlassian-jira-6.3.15-x64.bin
chmod a+x atlassian-jira-6.3.15-x64.bin
sudo ./atlassian-jira-6.3.15-x64.bin
&lt;/code>&lt;/pre>&lt;/div>&lt;p>JIRA にはインストーラーがついているので簡単。&lt;/p>
&lt;h3 id="step-5-set-up-jira-step-6-set-up-a-project-and-create-your-jira-dashboard">Step 5. Set Up JIRA, Step 6. Set up a Project and Create your JIRA Dashboard&lt;/h3>
&lt;p>あとはドキュメントに従って Web UI 上で操作を行えばよい。&lt;/p>
&lt;p>もしかすると、以下のようなよく分からないエラーに遭遇するかもしれない。&lt;/p>
&lt;pre>&lt;code>let.ServletException: javax.servlet.jsp.JspTagException: Soy rendering failed for template '%s'.
説明 The server encountered an internal error that prevented it from fulfilling this request.
例外
org.apache.jasper.JasperException: javax.servlet.ServletException: javax.servlet.jsp.JspTagException: Soy rendering failed for template '%s'.
&lt;/code>&lt;/pre>&lt;p>環境依存なのか、言語を日本語にしていた影響なのか分からないが、エラーが発生したらブラウザをリロードすれば大体直っていた。&lt;/p>
&lt;h3 id="dragons-stage-2---jira-add-onshttpsconfluenceatlassiancomdisplayatlasdragonsstage2-jiraadd-ons">&lt;a href="https://confluence.atlassian.com/display/ATLAS/Dragons+Stage+2+-+JIRA+Add-Ons">Dragons Stage 2 - JIRA Add-Ons&lt;/a>&lt;/h3>
&lt;p>ドキュメントに従うだけで特に問題はないが、 Capture for JIRA を動かそうとしたときに以下のエラーが出ていた。&lt;/p>
&lt;blockquote>
&lt;p>Your Bonfire license has expired. Please visit My Atlassian to renew&lt;/p>
&lt;/blockquote>
&lt;p>ボンファイアとはなんのこったい、と思ったのだが、どうやら Capture for JIRA のことらしい。
インストール後のアクティベーションが正常に終わっていなかったようだった。
改めて管理画面から評価用ラインセンスを払い出してことなきを得た。&lt;/p>
&lt;h3 id="dragons-stage-3---install-confluencehttpsconfluenceatlassiancomdisplayatlasdragonsstage3-installconfluence">&lt;a href="https://confluence.atlassian.com/display/ATLAS/Dragons+Stage+3+-+Install+Confluence">Dragons Stage 3 - Install Confluence&lt;/a>&lt;/h3>
&lt;h4 id="step-1-create-your-confluence-database-in-postgresql">Step 1. Create your Confluence Database in PostgreSQL&lt;/h4>
&lt;p>JIRA のときと同様に行う。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo -u postgres createuser -S -d -r -P -E confuser
sudo -u postgres createdb --owner confuser --encoding utf8 confluence
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="step-2-install-confluence">Step 2. Install Confluence&lt;/h4>
&lt;p>インストールまでは以下の通り:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">wget https://www.atlassian.com/software/confluence/downloads/binary/atlassian-confluence-5.7.1-x64.bin
chmod a+x atlassian-confluence-5.7.1-x64.bin
sudo ./atlassian-confluence-5.7.1-x64.bin
&lt;/code>&lt;/pre>&lt;/div>&lt;p>この後、&lt;/p>
&lt;blockquote>
&lt;p>Because Confluence will be running on the same machine as JIRA (already installed), you need to ensure that the URL paths are different for Confluence and JIRA.&lt;/p>
&lt;/blockquote>
&lt;p>という理由で設定ファイルを一部いじる必要がある。
以下のように一旦 Confluence を停止、設定を修正して再起動する:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo /opt/atlassian/confluence/bin/stop-confluence.sh
sudo sed -i &lt;span class="s1">&amp;#39;s/&amp;lt;Context path=&amp;#34;&amp;#34;/&amp;lt;Context path=&amp;#34;\/confluence&amp;#34;/&amp;#39;&lt;/span> /opt/atlassian/confluence/conf/server.xml
sudo /opt/atlassian/confluence/bin/start-confluence.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="step-3-">Step 3 以降&lt;/h4>
&lt;p>ドキュメントに従って進めれば問題ないはず。&lt;/p>
&lt;h3 id="dragons-stage-4---install-team-calendars-in-confluencehttpsconfluenceatlassiancomdisplayatlasdragonsstage4-installteamcalendarsinconfluence">&lt;a href="https://confluence.atlassian.com/display/ATLAS/Dragons+Stage+4+-+Install+Team+Calendars+in+Confluence">Dragons Stage 4 - Install Team Calendars in Confluence&lt;/a>&lt;/h3>
&lt;p>ドキュメントに従って Web UI を操作すれば 👌 。&lt;/p>
&lt;h3 id="dragons-stage-5---install-fisheye-and-cruciblehttpsconfluenceatlassiancomdisplayatlasdragonsstage5-installfisheyeandcrucible">&lt;a href="https://confluence.atlassian.com/display/ATLAS/Dragons+Stage+5+-+Install+FishEye+and+Crucible">Dragons Stage 5 - Install FishEye and Crucible&lt;/a>&lt;/h3>
&lt;h4 id="step-1-install-mercurial">Step 1. Install Mercurial&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo apt-get -y install mercurial
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="step-2-create-your-fisheye-database-in-postgresql">Step 2. Create your FishEye Database in PostgreSQL&lt;/h4>
&lt;p>これまでと同様に行う:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo -u postgres createuser -S -d -r -P -E fishuser
sudo -u postgres createdb --owner fishuser --encoding utf8 fisheye
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="step-3-install-fisheye-and-crucible">Step 3. Install FishEye and Crucible&lt;/h4>
&lt;p>インストーラーが無いので若干手順が複雑になる。&lt;/p>
&lt;p>まず必要なファイルをダウンロードして展開する:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">wget https://www.atlassian.com/software/fisheye/downloads/binary/fisheye-3.7.0.zip
sudo unzip -d /opt/atlassian/ fisheye-3.7.0.zip
&lt;/code>&lt;/pre>&lt;/div>&lt;p>アプリケーションのデータディレクトリを作成する。
他のアプリケーションに合わせて &lt;code>/var/atlassian/application-data/fecru&lt;/code> にする:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo mkdir /var/atlassian/application-data/fecru
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>FISHEYE_INST&lt;/code> という環境変数が上記のデータディレクトリを指すようにする:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo sh -c &lt;span class="s1">&amp;#39;echo &amp;#34;export FISHEYE_INST=/var/atlassian/application-data/fecru&amp;#34; &amp;gt; /etc/profile.d/fecru.sh&amp;#39;&lt;/span>
&lt;span class="nb">source&lt;/span> /etc/profile.d/fecru.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>設定ファイルを一部修正しつつ配置する:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo cp /opt/atlassian/fecru-3.7.0/config.xml /var/atlassian/application-data/fecru/
sudo sed -i &lt;span class="s1">&amp;#39;s/&amp;lt;web-server&amp;gt;/&amp;lt;web-server context=&amp;#34;\/fisheye&amp;#34;&amp;gt;/&amp;#39;&lt;/span> /var/atlassian/application-data/fecru/config.xml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Fecru サービスを稼動させるためのユーザーを作成する:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo useradd -m -c &lt;span class="s1">&amp;#39;Atlassian FishEye/Crucible&amp;#39;&lt;/span> fecru
&lt;/code>&lt;/pre>&lt;/div>&lt;p>権限を適切に修正し、サービスを立ち上げる:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo chown fecru -R /opt/atlassian/fecru-3.7.0/
sudo chown fecru -R /var/atlassian/application-data/fecru/
nohup sudo -u fecru /opt/atlassian/fecru-3.7.0/bin/run.sh &lt;span class="p">&amp;amp;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>本来は systemd とかでちゃんとサービス化した方がいいと思う 😟&lt;/p>
&lt;h4 id="step-4-">Step 4 以降&lt;/h4>
&lt;p>ドキュメントに従えば 👌&lt;/p>
&lt;h3 id="dragons-stage-6---get-jira-and-fisheye-talkinghttpsconfluenceatlassiancomdisplayatlasdragonsstage6-getjiraandfisheyetalking">&lt;a href="https://confluence.atlassian.com/display/ATLAS/Dragons+Stage+6+-+Get+JIRA+and+FishEye+Talking">Dragons Stage 6 - Get JIRA and FishEye Talking&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://confluence.atlassian.com/display/ATLAS/Dragons+Stage+6+-+Get+JIRA+and+FishEye+Talking?focusedCommentId=844238014#comment-844238014">このコメント&lt;/a>
にあるように、恐らく FishEye の Site URL を設定してからでないと JIRA リンクが上手く動かないので、
まず FishEye 上で Administration -&amp;gt; Global Settings -&amp;gt; Server から Site URL を設定しておく。&lt;/p>
&lt;p>あとはドキュメントの手順通り設定を行えばよい。&lt;/p>
&lt;h3 id="dragons-stage-7---get-jira-and-crucible-talkinghttpsconfluenceatlassiancomdisplayatlasdragonsstage7-getjiraandcrucibletalking">&lt;a href="https://confluence.atlassian.com/display/ATLAS/Dragons+Stage+7+-+Get+JIRA+and+Crucible+Talking">Dragons Stage 7 - Get JIRA and Crucible Talking&lt;/a>&lt;/h3>
&lt;p>ドキュメントの通りで 🆗&lt;/p>
&lt;h3 id="dragons-stage-8---install-bamboohttpsconfluenceatlassiancomdisplayatlasdragonsstage8-installbamboo">&lt;a href="https://confluence.atlassian.com/display/ATLAS/Dragons+Stage+8+-+Install+Bamboo">Dragons Stage 8 - Install Bamboo&lt;/a>&lt;/h3>
&lt;h4 id="step-1-create-your-bamboo-database-in-postgresql">Step 1. Create your Bamboo Database in PostgreSQL&lt;/h4>
&lt;p>これまでと同様:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo -u postgres createuser -S -d -r -P -E bamuser
sudo -u postgres createdb --owner bamuser --encoding utf8 bamboo
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="step-2-install-bamboo">Step 2. Install Bamboo&lt;/h4>
&lt;p>Fecru と同様にこちらもインストーラーが無いので複雑な手順が必要になる:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo -u postgres createuser -S -d -r -P -E bamuser
sudo -u postgres createdb --owner bamuser --encoding utf8 bamboo
wget https://www.atlassian.com/software/bamboo/downloads/binary/atlassian-bamboo-5.3.tar.gz
sudo useradd -m -c &lt;span class="s1">&amp;#39;Atlassian Bamboo&amp;#39;&lt;/span> bamboo
sudo tar -C /opt/atlassian -zxvf atlassian-bamboo-5.3.tar.gz
sudo chown bamboo -R /opt/atlassian/atlassian-bamboo-5.3
sudo sh -c &lt;span class="s1">&amp;#39;echo &amp;#34;bamboo.home=/home/bamboo&amp;#34; &amp;gt; /opt/atlassian/atlassian-bamboo-5.3/atlassian-bamboo/WEB-INF/classes/bamboo-init.properties&amp;#39;&lt;/span>
sudo sed -i &lt;span class="s1">&amp;#39;s/&amp;lt;Context path=&amp;#34;&amp;#34;/&amp;lt;Context path=&amp;#34;\/bamboo&amp;#34;/&amp;#39;&lt;/span> /opt/atlassian/atlassian-bamboo-5.3/conf/server.xml
sudo -u bamboo /opt/atlassian/atlassian-bamboo-5.3/bin/start-bamboo.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="step-3-set-up-bamboo">Step 3. Set Up Bamboo&lt;/h4>
&lt;p>まず Maven 3 の環境を整える必要がある。
ドキュメントの指示通
り
&lt;a href="https://developer.atlassian.com/display/DOCS/Set+up+the+Atlassian+Plugin+SDK+and+Build+a+Project">Atlassian Plugin SDK&lt;/a>
をインストールする:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo sh -c &lt;span class="s1">&amp;#39;echo &amp;#34;deb https://sdkrepo.atlassian.com/debian/ stable contrib&amp;#34; &amp;gt; /etc/apt/sources.list.d/atlassian.list&amp;#39;&lt;/span>
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys B07804338C015B73
sudo apt-get install -y apt-transport-https
sudo apt-get -y update
sudo apt-get install -y atlassian-plugin-sdk
&lt;/code>&lt;/pre>&lt;/div>&lt;p>あとはドキュメント通りに進めればよいが、
Maven Executable のパスを指定する箇所は
&lt;code>/usr/share/atlassian-plugin-sdk-6.2.9/apache-maven-3.2.1&lt;/code> のように
指定しなければならない(ドキュメントには &lt;code>/usr/local/Atlassian/atlassian-plugin-sdk/apache-maven&lt;/code> とあるがそこには無い)。&lt;/p>
&lt;h3 id="dragons-stage-9---bamboo-gadgets-and-jira-victoryhttpsconfluenceatlassiancomdisplayatlasdragonsstage9-bamboogadgetsandjiravictory">&lt;a href="https://confluence.atlassian.com/display/ATLAS/Dragons+Stage+9+-+Bamboo+Gadgets+and+JIRA+Victory">Dragons Stage 9 - Bamboo Gadgets and JIRA Victory&lt;/a>&lt;/h3>
&lt;p>ドキュメントの指示通り JIRA に Bamboo ガジェットを追加すれば完了。&lt;/p>
&lt;p>&lt;strong>The Battle is Won, the Dragon is Slain!&lt;/strong>&lt;/p>
&lt;h2 id="t">Tシャツを要求する&lt;/h2>
&lt;p>ページの指示通りやると、クーポンコードがもらえるので、
それを使って注文すればいい。&lt;/p>
&lt;p>自分の注文情報はこんな感じ:&lt;/p>
&lt;iframe src="https://drive.google.com/file/d/0B4XWl5W7tB7IcFRKdlhFTnpZV2s/preview" width="640" height="480">&lt;/iframe>
&lt;p>注文してから 1〜2 週間で届くらしい。&lt;/p></description></item><item><title>WordPressをHTTP/2+HHVMで動かす環境をdocker-composeで構築してみた</title><link>https://www.yewton.net/2016/02/21/wordpress-http2-hhvm/</link><pubDate>Sun, 21 Feb 2016 22:49:52 +0900</pubDate><guid>https://www.yewton.net/2016/02/21/wordpress-http2-hhvm/</guid><description>&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;p>&lt;a href="https://github.com/yewton/wordpress-nginx-http2-hhvm">このリポジトリ&lt;/a>を &lt;code>clone&lt;/code> して &lt;code>docker-compose up -d&lt;/code> して下さい
(要 &lt;a href="https://github.com/docker/compose/releases/tag/1.6.0">バージョン 1.6.0 以上&lt;/a>)。
その後 &lt;code>open &amp;quot;https://$(docker-machine ip default)&amp;quot;&lt;/code> すると、ブラウザでWordPressが立ち上がります。&lt;/p>
&lt;p>&lt;img src="https://www.yewton.net/img/2016-02-21_224951/wordpress.png" alt="デモ">&lt;/p>
&lt;h2 id="heading">動機&lt;/h2>
&lt;p>WordPressをHHVMで動かしたら超速くなった!やったぜ!!という記事はをよく見るのだけれど、
具体的にどうやって構築しているのか解説している記事があんまり無かったので、実際にやってみることにしました。&lt;/p>
&lt;p>ついでに、HTTP/2で提供出来るとイケてる気がしたので、併せて対応してみることにします。&lt;/p>
&lt;h2 id="hhvm">HHVM&lt;/h2>
&lt;p>&lt;img src="https://www.yewton.net/img/2016-02-21_224951/hugo.png" alt="HHVM">&lt;/p>
&lt;p>&lt;a href="http://hhvm.com/">HHVM&lt;/a>は、Facebookがオープンソースとして開発している仮想実行環境で、
&lt;a href="http://php.net/">PHP&lt;/a>と&lt;a href="http://hacklang.org/">Hack&lt;/a>を動かすための環境らしいです。&lt;/p>
&lt;p>まぁ、個人的にはHackもHHVMも &lt;strong>すごいPHP&lt;/strong> ぐらいの認識しかありませんが…。
Hackは言語的にすごくて、HHVMは実行環境がすごい。今回用があるのはHHVMだけです。&lt;/p>
&lt;h2 id="http2">HTTP/2&lt;/h2>
&lt;p>&lt;a href="https://http2.github.io/">HTTP/2&lt;/a>は… &lt;strong>すごいHTTP&lt;/strong> です。&lt;/p>
&lt;p>HTTP/1.xとの互換性を保ちつつ、効率化したもののようです。ヘッダの圧縮とか、リクエストの多重化とか。
&lt;a href="http://summerwind.jp/docs/rfc7540/">RFC7540 日本語訳&lt;/a>や&lt;a href="http://http2.info/faq.html#who-made-http2">日本語のFAQ&lt;/a>もあります。
自分は全然見てないけれど…必要になったら読みます。&lt;/p>
&lt;p>とにかく、このプロトコルで配信するだけでより効率的でより早くなる、ということです。&lt;/p>
&lt;h3 id="http2-">HTTP/2 の実装&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/">nginx&lt;/a>の1.9.5からHTTP/2をサポートしているようです&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。
&lt;a href="https://hub.docker.com/_/nginx/">公式Dockerリポジトリ&lt;/a>で配信されている最新イメージでもちゃんとサポートされていました。&lt;/p>
&lt;p>他にも&lt;a href="http://httpd.apache.org/">Apache HTTP Server 2.4.17+&lt;/a>や
&lt;a href="http://dena.com/intl/">DeNA&lt;/a>の&lt;a href="https://h2o.examp1e.net/">H2O&lt;/a>など&lt;a href="https://github.com/http2/http2-spec/wiki/Implementations">色々ある&lt;/a>ようです。&lt;/p>
&lt;p>今回はApacheよりは速かろうというのと、WordPress稼動の実例も多いことから、nginxを選択しました。適当。&lt;/p>
&lt;h2 id="heading-1">構成&lt;/h2>
&lt;p>リライトルールとか複雑なリクエスト制御が不要なら、
HHVMに組込みのWebサーバーがあるのでそれを使うのが簡単だし、速度面でも問題なさそうです。&lt;/p>
&lt;p>ただ、WordPressでパーマリンクを利用する場合はURLのリライトが必須です。&lt;/p>
&lt;p>HHVMでもバーチャルホスト切ってリライトの設定するとか出来るみたいですが、
iniファイルに設定書いていくのは何だかしんどそうです。&lt;/p>
&lt;p>他にもSSLとか静的ファイルの配信とか諸々考えると、餅は餅屋ということでリバースプロキシを立てた方がよさそうですね。&lt;/p>
&lt;p>というわけで、リバースプロキシとして nginx を立てて、HHVMをFastCGIモードで起動してバックエンドとします。&lt;/p>
&lt;p>今回はとにかくお手軽に手元で動かしてみたかったので、諸々Dockerで動かすことにしました。
雑に図解すると以下のような感じです:&lt;/p>
&lt;p>&lt;img src="https://www.yewton.net/img/2016-02-21_224951/structure.png" alt="構成図">&lt;/p>
&lt;p>FrontとかBackはDockerの&lt;a href="https://docs.docker.com/engine/userguide/networking/dockernetworks/#user-defined-networks">ユーザー定義ネットワーク&lt;/a>です。
&lt;a href="https://github.com/docker/docker/blob/master/CHANGELOG.md#1100-2016-02-04">Docker 1.10.0&lt;/a>で link に代わるものとして導入されたような気がします。
&lt;code>/etc/hosts&lt;/code> じゃなくてDNSで名前解決出来るようになってて最高にハッピーですね。&lt;/p>
&lt;p>FastCGIはUnixソケットで通信した方が速いと思うんですが、
今回は nginx と HHVM を別々のコンテナで動かすので、TCPで通信するようにしました。
同一システム上にFastCGIサーバとプロセスが稼動するって、実環境でもあんまり無いような気がするけど、どうなんだろう？&lt;/p>
&lt;p>コンテナひとつひとつ立てていくのは辛いので、常套手段の &lt;code>docker-compose&lt;/code> を使って作ります。&lt;/p>
&lt;h2 id="heading-2">動かす&lt;/h2>
&lt;p>&lt;a href="https://github.com/yewton/wordpress-nginx-http2-hhvm">このリポジトリ&lt;/a>に実際に稼動するものが置いてあります。
&lt;code>clone&lt;/code> して &lt;code>docker-compose up -d&lt;/code> すれば、HTTP/2でWordPressが動いている様子が確認出来ます。&lt;/p>
&lt;p>nginxやHHVMの設定はほぼデフォルトのままいじってないので、本気で動かすなら細かいチューニングは必要です。
が、全体の構成は実環境でもこのようになると思います。&lt;/p>
&lt;p>&lt;img src="https://www.yewton.net/img/2016-02-21_224951/wordpress.png" alt="デモ">&lt;/p>
&lt;h2 id="heading-3">終わりに&lt;/h2>
&lt;p>以上で、お手軽に手元でHTTP/2+HHVMなWordPressを試すことが出来るようになりました。&lt;/p>
&lt;p>あとは実環境へのデプロイだけなんですが、さてどうしたものか。
&lt;code>docker-compose.yml&lt;/code> からいい感じにデプロイしてくれるような何か、ありませんかねぇ。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://www.nginx.com/blog/nginx-1-9-5/">HTTP/2 Supported with NGINX Open Source 1.9.5 | NGINX&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>VM関連ファイルを外部ストレージに保存して空き容量を確保する</title><link>https://www.yewton.net/2016/02/19/save-storage-space-by-moving-vm-related-files-to-ex-storage/</link><pubDate>Fri, 19 Feb 2016 00:00:00 +0900</pubDate><guid>https://www.yewton.net/2016/02/19/save-storage-space-by-moving-vm-related-files-to-ex-storage/</guid><description>&lt;h2 id="vm">何かと容量を食うVM関連ファイル&lt;/h2>
&lt;p>DockerやらVagrantやらで作業していると、いつのまにかディスク容量が逼迫していることがありますよね。&lt;/p>
&lt;p>自分も128GB SSDのMacBook Proを使っているので、結構いっぱいいっぱいでした。&lt;/p>
&lt;p>そこで拡張ストレージを用意して、容量を食いがちなVM関連のファイルを移動することにしました。&lt;/p>
&lt;h3 id="mac">(参考)Mac用の拡張ストレージ&lt;/h3>
&lt;p>USBで外付けするようなのだと持ち運びに不便なので、
&lt;a rel="nofollow" href="http://www.amazon.co.jp/gp/product/B00TTFOJ4A/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00TTFOJ4A&amp;linkCode=as2&amp;tag=yewton-22">iSlice Pro&lt;/a>&lt;img src="http://ir-jp.amazon-adsystem.com/e/ir?t=yewton-22&amp;l=as2&amp;o=9&amp;a=B00TTFOJ4A" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
のような本体のSDカードスロットに差せるようなタイプを個人的には使っています。
iSliceの場合はただのアダプタなので別途128GBのmicroSDカードを調達する必要がありますが、ストレージと一体になっているモノよりは若干割安です。&lt;/p>
&lt;iframe src="https://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yewton-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00TTFOJ4A" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0">&lt;/iframe>
&lt;h2 id="vagrant">Vagrant&lt;/h2>
&lt;p>Vagrant用のBoxファイルとVMイメージの保存場所を変える際には、以下の記事が参考になります:&lt;/p>
&lt;p>&lt;a href="http://2inc.org/blog/2014/06/28/4311/" title="MacBookAir の容量がきついので Vagrant 環境を外付けに移した話 – モンキーレンチ">MacBookAir の容量がきついので Vagrant 環境を外付けに移した話 – モンキーレンチ&lt;/a>&lt;/p>
&lt;p>上記の記事を参考に諸々のファイルの移動、VB上の設定を済ませたら、
以下のようなコマンドを &lt;code>.bashrc&lt;/code> やら &lt;code>.zshenv&lt;/code> やらに書いておけば大丈夫です:&lt;/p>
&lt;p>&lt;code>export VAGRANT_HOME=/Volumes/data/.vagrant.d&lt;/code>&lt;/p>
&lt;h2 id="docker-machine">Docker Machine&lt;/h2>
&lt;p>Docker Machine用のファイルもデカいので移動させたいです。&lt;/p>
&lt;p>Docker Machineでは &lt;code>MACHINE_STORAGE_PATH&lt;/code> という環境変数を参照しています。
デフォルトは &lt;code>~/.docker/machine&lt;/code> です。&lt;/p>
&lt;p>Vagrantの場合と同じように既存のファイルを新しい場所に移動し、
VB上で除去→追加の手順を踏みます。
そして以下のようなコマンドで環境変数をセットします:&lt;/p>
&lt;p>&lt;code>export MACHINE_STORAGE_PATH=/Volumes/data/.docker/machine&lt;/code>&lt;/p>
&lt;p>これも &lt;code>.bashrc&lt;/code> やらに書いておきましょう。&lt;/p>
&lt;h2 id="-">注意: 外部ストレージのフォーマット&lt;/h2>
&lt;p>自分の場合、SDカードが元々フォーマットされていて、
差すだけで既に利用できたので、フォーマットについては特に気にせず移行作業をしてしまいました。&lt;/p>
&lt;p>ところが、移行後に &lt;code>'docker-machine&lt;/code> が謎のエラーで使えなくなってしまいました。&lt;/p>
&lt;p>&lt;code>-D&lt;/code> を付けてデバッグ情報を表示したとろ、以下のようなエラーが出ていました:&lt;/p>
&lt;pre>&lt;code>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ WARNING: UNPROTECTED PRIVATE KEY FILE! @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0777 for '/Volumes/data/.docker/machine/machines/default/id_rsa' are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.
Load key &amp;quot;/Volumes/data/.docker/machine/machines/default/id_rsa&amp;quot;: bad permissions
debug2: we did not send a packet, disable method
debug1: No more authentication methods to try.
Permission denied (publickey,password,keyboard-interactive).
&lt;/code>&lt;/pre>&lt;p>実は、 &lt;strong>SDカードがexFATでフォーマットされていたため、permissionが777になってしまっていた&lt;/strong>
ことが原因でした。
exFATの場合、 &lt;code>chmod&lt;/code> することも出来ないので、フォーマットを変更する必要があります。&lt;/p>
&lt;p>Mac OS X用拡張ストレージは、 &lt;strong>〈OS X 拡張 (ジャーナリング)〉でフォーマット&lt;/strong> しましょう。
また、この際に &lt;strong>〈大文字／小文字を区別する〉は不要&lt;/strong> です。
OS Xのメインストレージでは区別されませんし、
Adobeなど一部の製品は大文字小文字を区別するファイルシステムをサポートしていません&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。
無用なトラブルを避けるためにも、注意しましょう。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://helpx.adobe.com/jp/x-productkb/global/cpsid_83180.html">Mac OS X ファイルシステムの確認方法と大文字と小文字を区別するファイルシステムについて&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Hugo + GitHub Pages でお手軽にブログを始めよう</title><link>https://www.yewton.net/2016/02/02/blog-with-hugo/</link><pubDate>Tue, 02 Feb 2016 18:44:21 +0900</pubDate><guid>https://www.yewton.net/2016/02/02/blog-with-hugo/</guid><description>&lt;h2 id="heading">はじめに&lt;/h2>
&lt;p>この記事は「いい感じのブログを無料で手軽に作れないかなー」、と思っている人が主な対象です。&lt;/p>
&lt;p>〈いい感じ〉というのが抽象的ですが、以下のような欲求をイメージしています:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.staticgen.com/">Top Open-Source Static Site Generators - StaticGen&lt;/a> にあるような静的サイトジェネレータがいい&lt;/li>
&lt;li>サイト生成は速ければ速いほどいい&lt;/li>
&lt;li>モダンでレスポンシブルなのがいい&lt;/li>
&lt;li>記事を書いたら即確認出来るのがいい&lt;/li>
&lt;li>GitHub Pagesに簡単にデプロイ出来るのがいい&lt;/li>
&lt;li>独自ドメインは使いたい&lt;/li>
&lt;li>ブログにありがちなコメント機能とかアクセス解析とかが出来るといい&lt;/li>
&lt;li>HTTPSなのがいい&lt;/li>
&lt;li>HTTP/2なのがいい&lt;/li>
&lt;/ul>
&lt;h2 id="heading-1">サイトの方式を考える&lt;/h2>
&lt;p>手軽に始めたいので、準備はなるべく少ない方が嬉しいですね。&lt;/p>
&lt;p>WordPress みたいな動的な方式はサーバを用意しないといけないので手間ですし、場合によっては金もかかります。&lt;/p>
&lt;p>一方の静的サイト配信であれば、必要なのは HTML を配信出来る場所だけです。
GitHub Pages や類似のサービスを使えば無料で利用できますね。&lt;/p>
&lt;h2 id="heading-2">静的サイトジェネレータを選ぶ&lt;/h2>
&lt;p>というわけで静的サイトを作成するためのジェネレータを選びます。&lt;/p>
&lt;p>&lt;a href="https://www.staticgen.com/">Top Open-Source Static Site Generators - StaticGen&lt;/a> の中から適当に選びましょう。&lt;/p>
&lt;p>&lt;a href="http://jekyllrb.com/">Jekyll&lt;/a> や &lt;a href="http://octopress.org/">Octopress&lt;/a> はメジャーっぽいですが検索してみると、何だか遅いみたいです(使ったことない)。&lt;/p>
&lt;p>&lt;a href="https://www.gitbook.com/">GitBook&lt;/a> はドキュメントを書くのには向いています(自分も利用しています)。ですがブログを書くためのものではありません。&lt;/p>
&lt;p>&lt;a href="http://hexo.io/">Hexo&lt;/a> か &lt;a href="http://gohugo.io/">Hugo&lt;/a> あたりがよさそうです。
これら二つはコンセプトもよく似ているし、最早好みの世界ですね。自分は何となく Hugo を使っています。&lt;/p>
&lt;h2 id="hugo">Hugo&lt;/h2>
&lt;p>&lt;img src="https://www.yewton.net/img/2016-01-11_184419/hugo.png" alt="Hugoのロゴ">&lt;/p>
&lt;p>&lt;a href="http://gohugo.io/">Hugo&lt;/a> は超高速でシンプルかつ柔軟な静的サイトジェネレータだそうです。
Go言語で書かれていて、インストールはとってもカンタン。すぐに使えます。&lt;/p>
&lt;p>使い方もとってもカンタン…というワケではないかもしれません。
といっても、それは Hugo が殊更難しいというワケではなく、
そもそも静的サイトジェネレーターというモノを理解している必要がある、ということだと思います。&lt;/p>
&lt;p>ブログを書く、ということだけに目的を絞れば、覚える必要がある用語は
&lt;em>Content&lt;/em>, &lt;em>Themes&lt;/em>, &lt;em>Taxonomies&lt;/em> の3つだけです。&lt;/p>
&lt;h3 id="content">Content&lt;/h3>
&lt;p>ブログで言えば記事のことです。&lt;/p>
&lt;p>Content がどのように表示されるかは使用しているテーマによりますが、
ブログ用テーマのほとんどは &lt;code>post&lt;/code> ディレクトリ以下にあるファイルを記事として扱うようです。&lt;/p>
&lt;h3 id="themes">Themes&lt;/h3>
&lt;p>そのまま、サイトに適用するテーマです。&lt;/p>
&lt;p>Hugoの場合、テーマはそのサイトの構成まで決めてしまいます。
独自にテンプレートを書くことでカスタマイズ出来るとはいえ、目的に沿ったテーマを選択するのが無難です。&lt;/p>
&lt;p>テーマ選択の方法については後述します。&lt;/p>
&lt;h3 id="taxonomies">Taxonomies&lt;/h3>
&lt;p>やけに難しい単語ですが、分類方法のことです。
ブログなら &lt;strong>カテゴリ&lt;/strong> や &lt;strong>タグ&lt;/strong> といった類のものです。&lt;/p>
&lt;p>幸い、カテゴリとタグによる基本的な分類であればデフォルトで対応しているため、あまり意識する必要はありません。
カテゴリやタグのことを Taxonomies と呼ぶことだけ押さえておけばOKです。&lt;/p>
&lt;h2 id="heading-3">サイトを作る&lt;/h2>
&lt;p>早速サイトを作っていきましょう。&lt;/p>
&lt;p>&lt;a href="http://gohugo.io/overview/quickstart/">Hugo - Hugo Quickstart Guide&lt;/a> に従えば基本的に迷うことは無いと思います。
ここでは、適当にサイトを作って、ひとつ記事を書いてみて、それがブラウザで確認出来るようになれば大丈夫です。&lt;/p>
&lt;p>ただし、 &lt;strong>日本語に対応させる設定は追加で必要&lt;/strong> です。&lt;/p>
&lt;h3 id="heading-4">日本語対応&lt;/h3>
&lt;p>ありがたいことに、Hugoは日本語や中国語の為の特別な設定を用意してくれています。
設定ファイルに &lt;code>hasCJKLanguage = true&lt;/code> という行を追加しましょう。&lt;/p>
&lt;p>これをやらないと、一覧用に記事を自動で切り詰めてくれる機能や、
読み終えるまでの予想時間の計算が滅茶苦茶になってしまいます。&lt;/p>
&lt;h2 id="heading-5">テーマを決める&lt;/h2>
&lt;p>次はサイトに適用するテーマを選択しましょう。&lt;/p>
&lt;p>&lt;a href="http://themes.gohugo.io/">Hugo Themes Site&lt;/a> で実際の例を見ながらテーマを選ぶことが出来ます。
ブログ用のテーマのみに絞って見たい場合は &lt;a href="http://themes.gohugo.io/tags/blog">こちら&lt;/a> からどうぞ。&lt;/p>
&lt;p>注意点として、Hugoには記事を読み終えるまでの時間やおおよその文字数を表示する機能が組込まれているのですが、テーマがサポートしていない場合は表示されません。
このような機能を使いたい場合は、テーマでサポートされているかを確認しましょう。&lt;/p>
&lt;p>このサイトは &lt;a href="http://themes.gohugo.io/hugo-icarus/">Icarus&lt;/a> を使っています。
ショーケースの中では使える機能が一番多いと思うので、どういうことが出来るのか知るには丁度よいテーマだと思います。&lt;/p>
&lt;h2 id="favicon-">favicon を置こう&lt;/h2>
&lt;p>デフォルトでは Hugo の favicon が表示されてしまうので、カスタマイズしましょう。
&lt;a href="http://www.favicon-generator.org/">Favicon &amp;amp; App Icon Generator&lt;/a> などを使うとよいです。&lt;/p>
&lt;p>生成した &lt;code>.ico&lt;/code> ファイルを &lt;code>static&lt;/code> 直下に配置すればOKです。&lt;/p>
&lt;h2 id="heading-6">記事を書く&lt;/h2>
&lt;p>記事はMarkdownで書きます。&lt;/p>
&lt;p>ここで困るのは、Markdownにもいくつか方言があることです。
何を参考に書けばいいか迷ってしまいますね。&lt;/p>
&lt;p>HugoではMarkdownの処理に &lt;a href="https://github.com/russross/blackfriday">russross/blackfriday: Blackfriday: a markdown processor for Go&lt;/a> を使っています。
Blackfriday特有の書式(脚注など)もある為、こちらを参照しながら書くとよいでしょう。&lt;/p>
&lt;h3 id="heading-7">記事のファイル名について&lt;/h3>
&lt;p>日記や思い付きで即興で記事を書く場合、いちいち被らないようにファイル名を考えるのは面倒ですよね。&lt;/p>
&lt;p>Hugoの場合ファイル名は管理上の問題でしかないので、適当に日付やタイムスタンプでも入れておけばよいです。
デフォルトではファイル名がURLに使われますが、記事毎の設定で &lt;code>slug = &amp;quot;hogehoge&amp;quot;&lt;/code> のように設定しておけば、
実際のURLは &lt;code>/post/hogehoge&lt;/code> のようになります。&lt;/p>
&lt;p>また、以下のように設定ファイルに書いておけば、年月日がURLのプレフィクスに付くので被る心配もありません:&lt;/p>
&lt;pre>&lt;code>[permalinks]
post = &amp;quot;/:year/:month/:day/:slug&amp;quot;
&lt;/code>&lt;/pre>&lt;h2 id="heading-8">コメント対応&lt;/h2>
&lt;p>なんとなくコメント欄があるとオープンな感じでいいですよね？
ということでコメントにも対応させてみましょう。&lt;/p>
&lt;p>Hugo自身が&lt;a href="https://github.com/spf13/hugo/blob/cd36d752a3e8e2b75965fe281e6466d7a274cd94/tpl/template_embedded.go#L131-L145">Disqusに対応している&lt;/a>ので、
&lt;a href="https://disqus.com/">Disqus&lt;/a>を使いましょう。
ただし、Disqusによるコメント対応も、テーマによってはサポートされていない場合があるので要注意です。&lt;/p>
&lt;p>何よりもまず Disqus への登録です。
&lt;a href="https://help.disqus.com/customer/portal/articles/466182-publisher-quick-start-guide">ヘルプ&lt;/a>を見ながら行いましょう。
設定は特に必要ありませんので登録だけ済ませれば一旦OKです。後から言語設定を日本語にしたりすることも出来ます。&lt;/p>
&lt;p>登録が完了したら、登録時に入力した shortname (unique Disqus URL) を以下のように設定に追記しましょう:&lt;/p>
&lt;pre>&lt;code>disqusShortname = &amp;quot;sitename&amp;quot;
&lt;/code>&lt;/pre>&lt;p>これだけでHugoの設定は完了です。(テーマが対応していれば)個別の記事ページにコメント欄が出現します。&lt;/p>
&lt;h2 id="heading-9">デプロイ&lt;/h2>
&lt;p>生成したブログは GitHub Pages でホスティングします。&lt;/p>
&lt;p>&lt;code>gh-pages&lt;/code> ではなく、ユーザや Organization のページとして公開する場合は、
&lt;a href="https://gohugo.io/tutorials/github-pages-blog/#hosting-personal-organization-pages">Hosting Personal/Organization Pages&lt;/a>に
何も考えずに従えばOKです。
例示されているスクリプトもそのままコピペで使えます。&lt;/p>
&lt;p>実際にこのブログで使われているモノは全て&lt;a href="https://github.com/yewton/yewton-hugo">こちら&lt;/a>にあるので参考にしてください。&lt;/p>
&lt;h2 id="heading-10">独自ドメイン対応&lt;/h2>
&lt;p>github.com ドメインでホスティングするだけでよければ、ここから先の作業は不要です。おめでとうございます。&lt;/p>
&lt;p>以降はHugoとは関係ない話が続きます。&lt;/p>
&lt;p>既に独自ドメインを持っていて、それをブログでも使いたい場合は、
&lt;a href="https://help.github.com/articles/adding-a-cname-file-to-your-repository/">CNAME&lt;/a>の設定をGitHub上で行う必要があります。
&lt;a href="https://github.com/yewton/yewton.github.io/blob/master/CNAME">こんなファイル&lt;/a>を作ってあげて、
DNSレジストラ側で &lt;code>CNAME&lt;/code> とか &lt;code>ANAME&lt;/code> の設定を行ないます。&lt;/p>
&lt;h3 id="-vs-">サブドメイン vs ルートドメイン&lt;/h3>
&lt;p>&lt;code>CNAME&lt;/code> の設定をするか &lt;code>ANAME&lt;/code> の設定をするかは、サブドメインを使うかルートドメインを使うかの違いです。
GitHubのヘルプによると、&lt;a href="https://help.github.com/articles/about-custom-domains-for-github-pages-sites/#subdomains">サブドメインを強く推奨している&lt;/a>そうです。&lt;/p>
&lt;p>サブドメインを推奨する理由は以下のようです:&lt;/p>
&lt;ul>
&lt;li>GitHubのCDNの恩恵を受けられる&lt;/li>
&lt;li>GitHub自体のIPアドレス変更に影響を受けない&lt;/li>
&lt;li>DoS対策がより効率的になるのでページロードが高速になる&lt;/li>
&lt;/ul>
&lt;p>というわけで、特別な事情がない限りはサブドメインを利用するのがよいでしょう&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。&lt;/p>
&lt;h2 id="https">HTTPS化&lt;/h2>
&lt;p>ここまででブログとしての体裁は整いました。
ですが、折角つくったサイトですからHTTPSで配信したいですよね？しましょう。&lt;/p>
&lt;p>これには&lt;a href="https://www.cloudflare.com/">CloudFlare&lt;/a>を利用出来ます。
&lt;a href="https://1000ch.net/posts/2015/github-pages-custom-domain-in-https.html">GitHub Pagesに設定しているカスタムドメインをHTTPS対応させる - 1000ch.net&lt;/a>が非常に参考になります。&lt;/p>
&lt;p>設定が反映されるまでは最長1日程度かかりますので、ゆっくりと待ちましょう。&lt;/p>
&lt;p>なおCloudFlareを利用すると、ついでに HTTP/2 も有効になります。
他にもJSの軽量化などの各種高速化の設定を利用出来ますので、設定項目を見てみるのもよいでしょう。&lt;/p>
&lt;h3 id="heading-11">注意&lt;/h3>
&lt;p>注意点として、この際に Flexible SSL を用いる場合は、あくまでユーザとCloudFlare間の通信が暗号化されるだけで、 &lt;strong>CloudFlareとGitHub Pages間の通信は暗号化されていません&lt;/strong> 。
後者の間の通信は改竄されうる状態で、かつ、ユーザはそれを知る術が無いという状態に…。&lt;/p>
&lt;p>&lt;a href="https://konklone.com/post/github-pages-now-supports-https-so-use-it">GitHub Pages Now (Sorta) Supports HTTPS, So Use It&lt;/a>に詳しく書かれていますが、
一応そういう状態であるということは認識しておきましょう。&lt;/p>
&lt;h2 id="heading-12">終わりに&lt;/h2>
&lt;p>いい感じのブログを無料で手軽に作る方法についてまとめました。
改めてまとめてみるとそれなりにボリュームがあってちょっと大変でした…。&lt;/p>
&lt;p>これからブログを始めるぞーと思っている誰かの役に立てばいいなーと思います。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>こう書いている自分も、最初は特に気にせずにルートドメインで登録してしまっていました。この記事を書きながら気づいて、慌てて &lt;code>www&lt;/code> サブドメインに移行しました。 &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>