<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on yewton.net</title>
    <link>https://www.yewton.net/post/</link>
    <description>Recent content in Posts on yewton.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 29 Aug 2016 22:29:35 +0900</lastBuildDate>
    <atom:link href="https://www.yewton.net/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>三ヶ月以上ぶりに何かを書く</title>
      <link>https://www.yewton.net/2016/08/29/misc</link>
      <pubDate>Mon, 29 Aug 2016 22:29:35 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/08/29/misc</guid>
      <description>

&lt;p&gt;前回の更新から三ヶ月以上経ってしまった。
月日が経つのは早いものだ。&lt;/p&gt;

&lt;p&gt;まとめたいことがいくつかあるので、まとめておく。&lt;/p&gt;

&lt;h2 id=&#34;atlassian-からtシャツをタダでもらう方法:b90311b9df60abbcd0d54df82f9ad3a8&#34;&gt;Atlassian からTシャツをタダでもらう方法&lt;/h2&gt;

&lt;p&gt;Atlassian の製品のセットアップを公式ドキュメントに従って行うとTシャツが貰える。&lt;/p&gt;

&lt;p&gt;実際もらえたのでやり方をまとめたい。&lt;/p&gt;

&lt;h2 id=&#34;無料のプライベート-wiki-は-google-sites-が最強な気がする:b90311b9df60abbcd0d54df82f9ad3a8&#34;&gt;無料のプライベート Wiki は Google Sites が最強な気がする&lt;/h2&gt;

&lt;p&gt;Atlassian の構築はそもそも個人的に家庭で Confluence 的なのを使いたかったので手を出したものだった。&lt;/p&gt;

&lt;p&gt;とはいえ金がかかるのでいい方法は無いかと探していたら、 Google Sites に辿りついた。&lt;/p&gt;

&lt;h2 id=&#34;org-publish-で気軽に-web-サイトを作る:b90311b9df60abbcd0d54df82f9ad3a8&#34;&gt;&lt;code&gt;org-publish&lt;/code&gt; で気軽に Web サイトを作る&lt;/h2&gt;

&lt;p&gt;無料のプライベート Wiki を探している過程で org-publish にも手を出した。&lt;/p&gt;

&lt;p&gt;プライベートにするのが面倒だったので諦めたけれど、
org-mode で書いた内容を、見た目もほぼそのまま公開出来るというのは便利かもしれないのでまとめたい。&lt;/p&gt;

&lt;h2 id=&#34;helm-から-ivy-に移行したい:b90311b9df60abbcd0d54df82f9ad3a8&#34;&gt;helm から ivy に移行したい&lt;/h2&gt;

&lt;p&gt;helm が活発過ぎて周辺エコシステムが付いていけないとか、
ivy の方が軽量でよいとかいう話を聞くので、 ivy に移行してみたい。&lt;/p&gt;

&lt;p&gt;ヘビーに helm 使ってるわけでないので、さくっと乗り換えたい気持ち。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spacemacs から helm と persp-mode の設定をパクろうと思ったけど難しかった</title>
      <link>https://www.yewton.net/2016/05/04/helm-persp</link>
      <pubDate>Wed, 04 May 2016 19:45:26 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/05/04/helm-persp</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Bwindow-management/spacemacs-layouts/funcs.el&#34;&gt;この辺&lt;/a&gt; を参考にせよ、
と persp-mode 公式に書いてあったので、パクれそうかやってみた。&lt;/p&gt;

&lt;p&gt;結論としては、出来なかった。
なので、 併せて記載されていた &lt;a href=&#34;https://gist.github.com/Bad-ptr/304ada85c9ba15013303&#34;&gt;こっち&lt;/a&gt; の設定を使う状態のまま。&lt;/p&gt;

&lt;p&gt;Spacemacs の設定は、 Spacemacs 独自のステートの概念(Vimmer が喜ぶやつ)と密接に関連しているようで、
素の Emacs に組込むのは骨が折れそうだった。&lt;/p&gt;

&lt;p&gt;そもそも何で Spacemacs の設定をパクろうとしていたかというと、
後者の設定だと、 &lt;code&gt;C-x b&lt;/code&gt; したときに前のバッファが選択されずに
現在のバッファが選択された状態になるのが違和感があったから、だった。
素の Emacs では単に &lt;code&gt;C-x b RET&lt;/code&gt; としたときは、前のバッファに戻るという挙動になる。
もしかしたら Spacemacs では元の挙動を再現した実装になっているのかもしれない、
と思って見てみたが、前述の通り失敗に終わった。&lt;/p&gt;

&lt;p&gt;persp-mode では、直前のバッファが現在のパースペクティブに含まれているとは限らないから、仕方ないのかな…。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>『いけにえと雪のセツナ』感想</title>
      <link>https://www.yewton.net/2016/05/04/setsuna</link>
      <pubDate>Wed, 04 May 2016 16:10:11 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/05/04/setsuna</guid>
      <description>

&lt;p&gt;この間 Amazon で『いけにえと雪のセツナ』が 2,000 円だったので買ってみた。&lt;/p&gt;

&lt;p&gt;曰く、「あの頃、みんなRPGに夢中だった。
当時遊んだ数多のRPGは、今もぼくたちの記憶に強く残っている。
パーティ編成、街での買い物、ダンジョン攻略、ギリギリで倒した強敵たち。
そして、エンディングで流した涙－。名作たちが与えてくれた感動は、今もなお色褪せない。とりもどそう、ぼくたちのRPG。」&lt;/p&gt;

&lt;p&gt;…凄い売り文句だ。&lt;/p&gt;

&lt;p&gt;バトルシステムはあのクロノ・トリガーをベースにしているらしい。
否が応にも期待値が高まる謳い文句だ。
高まりすぎて不安になる。&lt;/p&gt;

&lt;p&gt;ネットのレビューを見てみると、やっぱりその期待値とのギャップに落胆している人が多いように見受けられた。
個人的には、単体のゲームとしてみればすごく楽しかったし、確かに荒削りな部分もあったけれど、
今後に大いに期待したくなる内容だったと思う。&lt;/p&gt;

&lt;p&gt;Tokyo RPG Factory は、こういう意欲的な作品を今後も是非リリースしていって欲しい。
いちユーザーとしてそう強く願う。&lt;/p&gt;

&lt;p&gt;個人的にプレイしていて色々と思うところがあったので、まとめておきたくなったのでまとめる。
ネタバレ全開。&lt;/p&gt;

&lt;h2 id=&#34;開発者の-制限プレイ:df7ae99a1c5b43af1f8a78fb7a61cd86&#34;&gt;(開発者の)制限プレイ&lt;/h2&gt;

&lt;p&gt;なんといっても本作、雪国しか出てこない。&lt;/p&gt;

&lt;p&gt;本当にずーっと雪景色で、たまに古代遺跡の石畳を見るくらい。
プレイ時間の大部分は白い画面と向きあうことになる。&lt;/p&gt;

&lt;p&gt;さらに、音楽はピアノオンリーである。
さすがにバトルシーンでは多少パーカッションやベースが入ったりもするが、ピアノが常にメインとなる。
ピアノフォルテの面目躍如といったところ。&lt;/p&gt;

&lt;p&gt;こういう制限のなかで、いかに面白く見せられるか、というところに挑戦する姿勢が、
ファミコン時代の同時発色数4色、音は3音+ノイズだけだったころと通じるものを感じた。
やっぱり、日本人は限られたリソースの中で工夫してよいものを作るっていうのが、
得意とするところなんじゃないかなぁ、などと日本人観に思いを馳せてみたりもした。
舞台が雪国っていう中で、火属性無双にならないようにとか、
魔物のデザインとか、すごく苦労したんじゃないかと思う。&lt;/p&gt;

&lt;p&gt;この制限が、結果としてよい方向にいったわけでは必ずしもないと思うけれども、
自分はこの挑戦する姿勢がすごく好きだった。&lt;/p&gt;

&lt;p&gt;次は南国+ウクレレ縛りプレイとかに挑戦してもらいたい。&lt;/p&gt;

&lt;h2 id=&#34;装備-法石システム:df7ae99a1c5b43af1f8a78fb7a61cd86&#34;&gt;装備+法石システム&lt;/h2&gt;

&lt;p&gt;本作の装備品は、武器と法器の2種類しかない。
この点が残念だという人もいるらしい。
個人的には、兜盾鎧小手みたいに分かれている意味って、
雰囲気作り以上の意味はないように思えるので、特に気にならなかった。
単純な攻撃力や防御力だけではなく、
サポート効果も加味して装備を整えるという本質的な部分は、
法石システムによって実現されている。&lt;/p&gt;

&lt;p&gt;今後のことを考えて昇華率アップ系の法器にするか、
それともいま、このバトルを乗り切るための法器にするか、
みたいなことに頭を悩ますのも楽しかった。&lt;/p&gt;

&lt;p&gt;ただ、魔法は法石じゃないほうが、嬉しかったかな…。
連携技もすごい豊富でワクワクするのに、
セットする法石に制限があるので、
「とりあえず見るだけ見てみたい」みたいなのをやりたくても出来ない。
クロノ・トリガーだったら、キャラの組み合わせを変えるだけでよかったので、
本作では法石の組み合わせも変えないといけないのが、単に手間にしか思えなかった…。&lt;/p&gt;

&lt;h2 id=&#34;バトル全般:df7ae99a1c5b43af1f8a78fb7a61cd86&#34;&gt;バトル全般&lt;/h2&gt;

&lt;p&gt;〈グラーティア〉 + 〈久遠の剣閃〉とか、
そういうものすごく相性のよい魔法の組合せに気付いてしまってからは、一気にバトルが大味になってくる。&lt;/p&gt;

&lt;p&gt;でもまあ、こういうのが運用出来るようになるのがそもそも終盤だし、
俺つえー出来るための組合せを探すのもそれはそれで楽しいので、あんまり気になっていない。
自分がヌルゲーマーだからかもしれない…。
〈ガグンラーズ〉があればMP補給無用で雑魚はサクサク片づくのとか、非常に助かったし。
〈叫ぶ〉+〈パーマネンス〉+ 〈ユグドラシル〉 + 〈アルティメット〉 でエンド無双になるのとか快感だったし。
クロノ・トリガーも終盤シャイニングだけ唱えてればだいたいなんとかなったし、そんなもん。
中盤は中盤で、エンドの〈回転斬り〉無双だった気もするが…。
まあそれはそれで「お、大体回転斬りでいけるやん!」って気づく過程が楽しかった。&lt;/p&gt;

&lt;p&gt;全体的に、MP温存せずに雑魚にもガンガン使っていく感じで進められるのが快適だった。&lt;/p&gt;

&lt;p&gt;キャラ毎の個性もハッキリしていてよかったけれど、
結局エンド+クオン+(セツナ or キール)最強だなーということで、
あんまり他のメンバーを使わなくなってしまった。
ディノタウルス系用にブロウビート要因のヨミを使うことはあったけど、それくらい。
まあ、クロノ・トリガーでも魔王やカエルは趣味枠だった気がする…。&lt;/p&gt;

&lt;h2 id=&#34;法石に蝕まれた魔物:df7ae99a1c5b43af1f8a78fb7a61cd86&#34;&gt;法石に蝕まれた魔物&lt;/h2&gt;

&lt;p&gt;隠し中ボスみたいなのが攻略ルート上に普通に出現する。
気付かずにバトルを仕掛けると普通に全滅して普通にゲームオーバーになる。&lt;/p&gt;

&lt;p&gt;この理不尽さも、懐しいかも…。&lt;/p&gt;

&lt;p&gt;まあ本作では100％逃走可能なアイテムがあるので、実際はそこまで脅威ではない。
とはいえ、こういうのに出くわすまではそもそも逃げることなんてなかったので、
逃走用アイテムがあることも忘れていたりするのだけれど。&lt;/p&gt;

&lt;p&gt;こういう微妙にプレイヤーを突き放した感じも、なんだか懐しい。&lt;/p&gt;

&lt;h2 id=&#34;ストーリー:df7ae99a1c5b43af1f8a78fb7a61cd86&#34;&gt;ストーリー&lt;/h2&gt;

&lt;p&gt;エンドやセツナに感情移入出来ないとか、選択肢の意味がほとんど無いとか、
そういう評判をネット上ではよく見かけた。&lt;/p&gt;

&lt;p&gt;個人的には、そこはそんなに気にならなかった。
選択肢しだいで、クオンがちょっとエンドのこと見直してくれたり、
エンドが謎にチームリーダーとして慕われてたりとか、
素直に嬉しかったし、にこにこしながら見ることが出来た。&lt;/p&gt;

&lt;p&gt;セーブポイントが伏線になってたりとか、そういうところも好き。
昔からたまにある設定だから目新しさはないけど。&lt;/p&gt;

&lt;p&gt;どんどんみんなの絆が深まっていくのに、旅の目的はセツナが無事に死ぬこと、
っていう矛盾に悶々と出来たのはよかった。&lt;/p&gt;

&lt;p&gt;ただ、エンドやキトが何者なのか？とか、
絶海群島の何のイベントも起きない人々は何なのか？とか、
もう少し知りたかった。もやもやする。
想像の余地を残されたのだろうか。うーん、困る。&lt;/p&gt;

&lt;h2 id=&#34;vita-版:df7ae99a1c5b43af1f8a78fb7a61cd86&#34;&gt;Vita 版&lt;/h2&gt;

&lt;p&gt;せっかくゲームはいい出来なのに、処理落ちがホントにひどい。
一番最初に使える連携技の時点で処理落ちする。
パーティメンバーを全員表示するたびに処理落ちする。
最終的に慣れてしまったけれど…。&lt;/p&gt;

&lt;p&gt;最悪なのは、エンディングイベント中にアプリケーションエラーで落ちたこと。
一番落ちてはならぬところだぞ…。&lt;/p&gt;

&lt;p&gt;これは Tokyo RPG Factory を恨めばいいのか、
Unity を恨めばいいのか、 Sony を恨めばいいのか、どれなんだ。
教えてくれ。&lt;/p&gt;

&lt;p&gt;ロード時間も長めだけれど、 PS 時代もこんなもんだったなーくらいの感覚でそこまで気にはならなかった。&lt;/p&gt;

&lt;h2 id=&#34;総評:df7ae99a1c5b43af1f8a78fb7a61cd86&#34;&gt;総評&lt;/h2&gt;

&lt;p&gt;ゲームとしては値段分の価値が十分あるし、これからもこういう作品をどんどん出してほしいと思える内容だった。&lt;/p&gt;

&lt;p&gt;ただ、 Vita 版はゲーム性以外の部分がかなり残念…。&lt;/p&gt;

&lt;p&gt;もし次回作を出すならフルプライスで買うから、変なハード間差異だけは出さないでほしい…。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>三ヶ月ぶりに更新再開した日</title>
      <link>https://www.yewton.net/2016/05/03/diary</link>
      <pubDate>Tue, 03 May 2016 23:27:26 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/05/03/diary</guid>
      <description>&lt;p&gt;前回の更新から平気で3ヶ月経っていた。
光陰矢のごとしである。&lt;/p&gt;

&lt;p&gt;一個多少マトモな記事を上げたら何か燃え尽きてしまったのと、
仕事が妙に重圧になっていて気持ちがアガらなかったのと、
色々あって全然更新しなかった。&lt;/p&gt;

&lt;p&gt;スクラム入門の翻訳も全然やってない。&lt;/p&gt;

&lt;p&gt;いやはや。&lt;/p&gt;

&lt;p&gt;やったことといえば、 &lt;code&gt;.emacs.d&lt;/code&gt; の大幅リニューアルくらい。
結果物は &lt;a href=&#34;https://github.com/yewton/.emacs.d&#34;&gt;こちら&lt;/a&gt;。
&lt;code&gt;.emacs.d&lt;/code&gt; 弄りは無限に時間取られるな…。&lt;/p&gt;

&lt;p&gt;まあ、その甲斐あって、以前よりさらに快適な作業環境が整った、ハズ。
かっこいいモードラインとか、いいよね。
僕はニワカイーマクサーなので、そういうところを頑張ってしまう。&lt;/p&gt;

&lt;p&gt;あと、記事の元になる Hugo ファイルを BitBucket のプライベートリポジトリに移した。
これで気兼ねなく、プライベートな内容も記録出来るようになった。&lt;/p&gt;

&lt;p&gt;この連休中に、 persp-mode の設定を spacemacs を参考に変更するのと、
Scala 製 Slack ボットのデプロイ方法を考えるのと、
いくつか追加でボットを作成するのをやっておきたい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WordPressをHTTP/2&#43;HHVMで動かす環境をdocker-composeで構築してみた</title>
      <link>https://www.yewton.net/2016/02/21/wordpress-http2-hhvm</link>
      <pubDate>Sun, 21 Feb 2016 22:49:52 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/02/21/wordpress-http2-hhvm</guid>
      <description>

&lt;h2 id=&#34;tl-dr:a1ea5573187331c07f8d393beff7a4e7&#34;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yewton/wordpress-nginx-http2-hhvm&#34;&gt;このリポジトリ&lt;/a&gt;を &lt;code&gt;clone&lt;/code&gt; して &lt;code&gt;docker-compose up -d&lt;/code&gt; して下さい
(要 &lt;a href=&#34;https://github.com/docker/compose/releases/tag/1.6.0&#34;&gt;バージョン 1.6.0 以上&lt;/a&gt;)。
その後 &lt;code&gt;open &amp;quot;https://$(docker-machine ip default)&amp;quot;&lt;/code&gt; すると、ブラウザでWordPressが立ち上がります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.yewton.net/img/2016-02-21_224951/wordpress.png&#34; alt=&#34;デモ&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;動機:a1ea5573187331c07f8d393beff7a4e7&#34;&gt;動機&lt;/h2&gt;

&lt;p&gt;WordPressをHHVMで動かしたら超速くなった!やったぜ!!という記事はをよく見るのだけれど、
具体的にどうやって構築しているのか解説している記事があんまり無かったので、実際にやってみることにしました。&lt;/p&gt;

&lt;p&gt;ついでに、HTTP/2で提供出来るとイケてる気がしたので、併せて対応してみることにします。&lt;/p&gt;

&lt;h2 id=&#34;hhvm:a1ea5573187331c07f8d393beff7a4e7&#34;&gt;HHVM&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://www.yewton.net/img/2016-02-21_224951/hugo.png&#34; alt=&#34;HHVM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hhvm.com/&#34;&gt;HHVM&lt;/a&gt;は、Facebookがオープンソースとして開発している仮想実行環境で、
&lt;a href=&#34;http://php.net/&#34;&gt;PHP&lt;/a&gt;と&lt;a href=&#34;http://hacklang.org/&#34;&gt;Hack&lt;/a&gt;を動かすための環境らしいです。&lt;/p&gt;

&lt;p&gt;まぁ、個人的にはHackもHHVMも &lt;strong&gt;すごいPHP&lt;/strong&gt; ぐらいの認識しかありませんが…。
Hackは言語的にすごくて、HHVMは実行環境がすごい。今回用があるのはHHVMだけです。&lt;/p&gt;

&lt;h2 id=&#34;http-2:a1ea5573187331c07f8d393beff7a4e7&#34;&gt;HTTP/2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://http2.github.io/&#34;&gt;HTTP/2&lt;/a&gt;は… &lt;strong&gt;すごいHTTP&lt;/strong&gt; です。&lt;/p&gt;

&lt;p&gt;HTTP/1.xとの互換性を保ちつつ、効率化したもののようです。ヘッダの圧縮とか、リクエストの多重化とか。
&lt;a href=&#34;http://summerwind.jp/docs/rfc7540/&#34;&gt;RFC7540 日本語訳&lt;/a&gt;や&lt;a href=&#34;http://http2.info/faq.html#who-made-http2&#34;&gt;日本語のFAQ&lt;/a&gt;もあります。
自分は全然見てないけれど…必要になったら読みます。&lt;/p&gt;

&lt;p&gt;とにかく、このプロトコルで配信するだけでより効率的でより早くなる、ということです。&lt;/p&gt;

&lt;h3 id=&#34;http-2-の実装:a1ea5573187331c07f8d393beff7a4e7&#34;&gt;HTTP/2 の実装&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://nginx.org/en/&#34;&gt;nginx&lt;/a&gt;の1.9.5からHTTP/2をサポートしているようです&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a1ea5573187331c07f8d393beff7a4e7:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a1ea5573187331c07f8d393beff7a4e7:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;https://hub.docker.com/_/nginx/&#34;&gt;公式Dockerリポジトリ&lt;/a&gt;で配信されている最新イメージでもちゃんとサポートされていました。&lt;/p&gt;

&lt;p&gt;他にも&lt;a href=&#34;http://httpd.apache.org/&#34;&gt;Apache HTTP Server 2.4.17+&lt;/a&gt;や
&lt;a href=&#34;http://dena.com/intl/&#34;&gt;DeNA&lt;/a&gt;の&lt;a href=&#34;https://h2o.examp1e.net/&#34;&gt;H2O&lt;/a&gt;など&lt;a href=&#34;https://github.com/http2/http2-spec/wiki/Implementations&#34;&gt;色々ある&lt;/a&gt;ようです。&lt;/p&gt;

&lt;p&gt;今回はApacheよりは速かろうというのと、WordPress稼動の実例も多いことから、nginxを選択しました。適当。&lt;/p&gt;

&lt;h2 id=&#34;構成:a1ea5573187331c07f8d393beff7a4e7&#34;&gt;構成&lt;/h2&gt;

&lt;p&gt;リライトルールとか複雑なリクエスト制御が不要なら、
HHVMに組込みのWebサーバーがあるのでそれを使うのが簡単だし、速度面でも問題なさそうです。&lt;/p&gt;

&lt;p&gt;ただ、WordPressでパーマリンクを利用する場合はURLのリライトが必須です。&lt;/p&gt;

&lt;p&gt;HHVMでもバーチャルホスト切ってリライトの設定するとか出来るみたいですが、
iniファイルに設定書いていくのは何だかしんどそうです。&lt;/p&gt;

&lt;p&gt;他にもSSLとか静的ファイルの配信とか諸々考えると、餅は餅屋ということでリバースプロキシを立てた方がよさそうですね。&lt;/p&gt;

&lt;p&gt;というわけで、リバースプロキシとして nginx を立てて、HHVMをFastCGIモードで起動してバックエンドとします。&lt;/p&gt;

&lt;p&gt;今回はとにかくお手軽に手元で動かしてみたかったので、諸々Dockerで動かすことにしました。
雑に図解すると以下のような感じです:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.yewton.net/img/2016-02-21_224951/structure.png&#34; alt=&#34;構成図&#34; /&gt;&lt;/p&gt;

&lt;p&gt;FrontとかBackはDockerの&lt;a href=&#34;https://docs.docker.com/engine/userguide/networking/dockernetworks/#user-defined-networks&#34;&gt;ユーザー定義ネットワーク&lt;/a&gt;です。
&lt;a href=&#34;https://github.com/docker/docker/blob/master/CHANGELOG.md#1100-2016-02-04&#34;&gt;Docker 1.10.0&lt;/a&gt;で link に代わるものとして導入されたような気がします。
&lt;code&gt;/etc/hosts&lt;/code&gt; じゃなくてDNSで名前解決出来るようになってて最高にハッピーですね。&lt;/p&gt;

&lt;p&gt;FastCGIはUnixソケットで通信した方が速いと思うんですが、
今回は nginx と HHVM を別々のコンテナで動かすので、TCPで通信するようにしました。
同一システム上にFastCGIサーバとプロセスが稼動するって、実環境でもあんまり無いような気がするけど、どうなんだろう？&lt;/p&gt;

&lt;p&gt;コンテナひとつひとつ立てていくのは辛いので、常套手段の &lt;code&gt;docker-compose&lt;/code&gt; を使って作ります。&lt;/p&gt;

&lt;h2 id=&#34;動かす:a1ea5573187331c07f8d393beff7a4e7&#34;&gt;動かす&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yewton/wordpress-nginx-http2-hhvm&#34;&gt;このリポジトリ&lt;/a&gt;に実際に稼動するものが置いてあります。
&lt;code&gt;clone&lt;/code&gt; して &lt;code&gt;docker-compose up -d&lt;/code&gt; すれば、HTTP/2でWordPressが動いている様子が確認出来ます。&lt;/p&gt;

&lt;p&gt;nginxやHHVMの設定はほぼデフォルトのままいじってないので、本気で動かすなら細かいチューニングは必要です。
が、全体の構成は実環境でもこのようになると思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.yewton.net/img/2016-02-21_224951/wordpress.png&#34; alt=&#34;デモ&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;終わりに:a1ea5573187331c07f8d393beff7a4e7&#34;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;以上で、お手軽に手元でHTTP/2+HHVMなWordPressを試すことが出来るようになりました。&lt;/p&gt;

&lt;p&gt;あとは実環境へのデプロイだけなんですが、さてどうしたものか。
&lt;code&gt;docker-compose.yml&lt;/code&gt; からいい感じにデプロイしてくれるような何か、ありませんかねぇ。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a1ea5573187331c07f8d393beff7a4e7:1&#34;&gt;&lt;a href=&#34;https://www.nginx.com/blog/nginx-1-9-5/&#34;&gt;HTTP/2 Supported with NGINX Open Source 1.9.5 | NGINX&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a1ea5573187331c07f8d393beff7a4e7:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>VM関連ファイルを外部ストレージに保存して空き容量を確保する</title>
      <link>https://www.yewton.net/2016/02/19/save-storage-space-by-moving-vm-related-files-to-ex-storage</link>
      <pubDate>Fri, 19 Feb 2016 00:00:00 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/02/19/save-storage-space-by-moving-vm-related-files-to-ex-storage</guid>
      <description>

&lt;h2 id=&#34;何かと容量を食うvm関連ファイル:3a11f2e399daaf1f3e8ebd09bd2d51d0&#34;&gt;何かと容量を食うVM関連ファイル&lt;/h2&gt;

&lt;p&gt;DockerやらVagrantやらで作業していると、いつのまにかディスク容量が逼迫していることがありますよね。&lt;/p&gt;

&lt;p&gt;自分も128GB SSDのMacBook Proを使っているので、結構いっぱいいっぱいでした。&lt;/p&gt;

&lt;p&gt;そこで拡張ストレージを用意して、容量を食いがちなVM関連のファイルを移動することにしました。&lt;/p&gt;

&lt;h3 id=&#34;参考-mac用の拡張ストレージ:3a11f2e399daaf1f3e8ebd09bd2d51d0&#34;&gt;(参考)Mac用の拡張ストレージ&lt;/h3&gt;

&lt;p&gt;USBで外付けするようなのだと持ち運びに不便なので、
&lt;a rel=&#34;nofollow&#34; href=&#34;http://www.amazon.co.jp/gp/product/B00TTFOJ4A/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00TTFOJ4A&amp;linkCode=as2&amp;tag=yewton-22&#34;&gt;iSlice Pro&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=yewton-22&amp;l=as2&amp;o=9&amp;a=B00TTFOJ4A&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
のような本体のSDカードスロットに差せるようなタイプを個人的には使っています。
iSliceの場合はただのアダプタなので別途128GBのmicroSDカードを調達する必要がありますが、ストレージと一体になっているモノよりは若干割安です。&lt;/p&gt;

&lt;iframe src=&#34;https://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yewton-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00TTFOJ4A&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;vagrant:3a11f2e399daaf1f3e8ebd09bd2d51d0&#34;&gt;Vagrant&lt;/h2&gt;

&lt;p&gt;Vagrant用のBoxファイルとVMイメージの保存場所を変える際には、以下の記事が参考になります:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://2inc.org/blog/2014/06/28/4311/&#34; title=&#34;MacBookAir の容量がきついので Vagrant 環境を外付けに移した話 – モンキーレンチ&#34;&gt;MacBookAir の容量がきついので Vagrant 環境を外付けに移した話 – モンキーレンチ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記の記事を参考に諸々のファイルの移動、VB上の設定を済ませたら、
以下のようなコマンドを &lt;code&gt;.bashrc&lt;/code&gt; やら &lt;code&gt;.zshenv&lt;/code&gt; やらに書いておけば大丈夫です:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export VAGRANT_HOME=/Volumes/data/.vagrant.d&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;docker-machine:3a11f2e399daaf1f3e8ebd09bd2d51d0&#34;&gt;Docker Machine&lt;/h2&gt;

&lt;p&gt;Docker Machine用のファイルもデカいので移動させたいです。&lt;/p&gt;

&lt;p&gt;Docker Machineでは &lt;code&gt;MACHINE_STORAGE_PATH&lt;/code&gt; という環境変数を参照しています。
デフォルトは &lt;code&gt;~/.docker/machine&lt;/code&gt; です。&lt;/p&gt;

&lt;p&gt;Vagrantの場合と同じように既存のファイルを新しい場所に移動し、
VB上で除去→追加の手順を踏みます。
そして以下のようなコマンドで環境変数をセットします:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export MACHINE_STORAGE_PATH=/Volumes/data/.docker/machine&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;これも &lt;code&gt;.bashrc&lt;/code&gt; やらに書いておきましょう。&lt;/p&gt;

&lt;h2 id=&#34;注意-外部ストレージのフォーマット:3a11f2e399daaf1f3e8ebd09bd2d51d0&#34;&gt;注意: 外部ストレージのフォーマット&lt;/h2&gt;

&lt;p&gt;自分の場合、SDカードが元々フォーマットされていて、
差すだけで既に利用できたので、フォーマットについては特に気にせず移行作業をしてしまいました。&lt;/p&gt;

&lt;p&gt;ところが、移行後に &lt;code&gt;&#39;docker-machine&lt;/code&gt; が謎のエラーで使えなくなってしまいました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-D&lt;/code&gt; を付けてデバッグ情報を表示したとろ、以下のようなエラーが出ていました:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0777 for &#39;/Volumes/data/.docker/machine/machines/default/id_rsa&#39; are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.
Load key &amp;quot;/Volumes/data/.docker/machine/machines/default/id_rsa&amp;quot;: bad permissions
debug2: we did not send a packet, disable method
debug1: No more authentication methods to try.
Permission denied (publickey,password,keyboard-interactive).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実は、 &lt;strong&gt;SDカードがexFATでフォーマットされていたため、permissionが777になってしまっていた&lt;/strong&gt;
ことが原因でした。
exFATの場合、 &lt;code&gt;chmod&lt;/code&gt; することも出来ないので、フォーマットを変更する必要があります。&lt;/p&gt;

&lt;p&gt;Mac OS X用拡張ストレージは、 &lt;strong&gt;〈OS X 拡張 (ジャーナリング)〉でフォーマット&lt;/strong&gt; しましょう。
また、この際に &lt;strong&gt;〈大文字／小文字を区別する〉は不要&lt;/strong&gt; です。
OS Xのメインストレージでは区別されませんし、
Adobeなど一部の製品は大文字小文字を区別するファイルシステムをサポートしていません&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3a11f2e399daaf1f3e8ebd09bd2d51d0:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3a11f2e399daaf1f3e8ebd09bd2d51d0:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
無用なトラブルを避けるためにも、注意しましょう。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:3a11f2e399daaf1f3e8ebd09bd2d51d0:1&#34;&gt;&lt;a href=&#34;https://helpx.adobe.com/jp/x-productkb/global/cpsid_83180.html&#34;&gt;Mac OS X ファイルシステムの確認方法と大文字と小文字を区別するファイルシステムについて&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3a11f2e399daaf1f3e8ebd09bd2d51d0:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>早朝ランニングしたりカナヘイカフェに行ってきた日</title>
      <link>https://www.yewton.net/2016/02/16/diary</link>
      <pubDate>Tue, 16 Feb 2016 23:00:00 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/02/16/diary</guid>
      <description>

&lt;h2 id=&#34;ランニング:ba55bded15366df8fcd5fbeef8e27b25&#34;&gt;ランニング&lt;/h2&gt;

&lt;p&gt;昨日おとといと、春が来たのかと思うくらい暖かったので、
何となく意識が高まって「よし明日からランニングを始めるぞ」という気持ちになっていた。&lt;/p&gt;

&lt;p&gt;せっかくだから一番いいランニングをしようと思って調べると、
朝食前に20分以上走るのが痩せるには最も効果があるという情報を得た。
時間を気にしながら走るのは辛そうだったので、とにかく目標地点まで行って帰ってくることにし、
スカイツリーくらいまで走ると距離的にちょうどよさそうだったのでそこを目標地点とした。&lt;/p&gt;

&lt;p&gt;そんな調査を前日に行なっていざ、走ろうと外に出ると &lt;strong&gt;滅茶苦茶寒い&lt;/strong&gt; 。
いや、昨日おとといと比較すると寒くなるというのは知っていたけれど、
走ってるうちに体あったまるだろくらいに考えていた。
ところが、走れども走れども一向に体は暖まらず、手はかじかみ、
寒さに震えながら走ることになった。&lt;/p&gt;

&lt;p&gt;後で調べたらその時の気温が3度とかだったので、そりゃ、寒いワケだ、と。&lt;/p&gt;

&lt;p&gt;寒さを舐めてはいけない。
次はもっと防寒するか、もっと暖かい日にしよう、という学びを得た。&lt;/p&gt;

&lt;h2 id=&#34;カナヘイのゆるっとカフェ:ba55bded15366df8fcd5fbeef8e27b25&#34;&gt;カナヘイのゆるっとカフェ&lt;/h2&gt;

&lt;p&gt;仕事終わりに、&lt;a href=&#34;http://kanahei.blog.jp/archives/1049325539.html&#34;&gt;カナヘイのゆるっとカフェ&lt;/a&gt;に行ってきた
(カフェ公式ページは無くて、イベントページの1コンテンツという感じだったので、カナヘイさんのブログ記事にリンク)。&lt;/p&gt;

&lt;iframe src=&#34;https://drive.google.com/file/d/0B4XWl5W7tB7IQ09Jc3dKcmN6OEk/preview&#34; width=&#34;320&#34; height=&#34;240&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;こんな感じでパルコ入口で待ち構えている。&lt;/p&gt;

&lt;iframe src=&#34;https://drive.google.com/file/d/0B4XWl5W7tB7IMzJrYllaRmo5dUk/preview&#34; width=&#34;320&#34; height=&#34;240&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;7階に辿り着くと、巨大うさぎ&amp;amp;ピスケがお出迎え。
これ、多分カナヘイの個展でも使われてた奴らが着替えただけだ。&lt;/p&gt;

&lt;p&gt;その他の最高に可愛い写真は&lt;a href=&#34;https://drive.google.com/folderview?id=0B4XWl5W7tB7IcEpEdWVPQm5HWkk&amp;amp;usp=drive_web&#34;&gt;こちら&lt;/a&gt;
に置いてあるのでどうぞご自由にご利用下さい。&lt;/p&gt;

&lt;p&gt;もう、本当に最高にゆるっとして可愛くて可笑しくて、また行くことが確定した。
グッズ込みで1万超の出費だったけど何も痛くないね!!&lt;/p&gt;

&lt;p&gt;カナヘイさんもっとイベントやってください。&lt;/p&gt;

&lt;h2 id=&#34;google-drive-の画像を-web-ページに埋め込む:ba55bded15366df8fcd5fbeef8e27b25&#34;&gt;Google Drive の画像を Web ページに埋め込む&lt;/h2&gt;

&lt;p&gt;カナヘイカフェの記事を書こうとして、どうにか写真を埋め込めないか色々調べたら、
どうも写真の単体ページ(&lt;a href=&#34;https://drive.google.com/file/d/0B4XWl5W7tB7IQ09Jc3dKcmN6OEk/view&#34;&gt;こういうの&lt;/a&gt;)を開いて、
〈アイテムを埋め込む〉というのが真っ当な手段ぽかった。&lt;/p&gt;

&lt;p&gt;直リンクする方法もあるみたいだけど、いつ Google 様に殺されるか分からなかったので止めておく。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugoの記事をようやく書き上げた日</title>
      <link>https://www.yewton.net/2016/02/14/diary</link>
      <pubDate>Sun, 14 Feb 2016 00:26:33 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/02/14/diary</guid>
      <description>

&lt;p&gt;たまには人類に少しでも役に立つような記事も書こうと思い、
&lt;a href=&#34;https://www.yewton.net/2016/02/02/blog-with-hugo/&#34;&gt;Hugoの記事&lt;/a&gt;を書いていた。&lt;/p&gt;

&lt;p&gt;自分が通しでやったことだし、すぐ書き上がるだろーと高をくくっていたら、
なんだかんだ書き始めてから2週間くらい経ってしまった(もちろん、そればかりやってたワケじゃないけど)。
自分の遅筆さに呆れるばかりである。&lt;/p&gt;

&lt;p&gt;普段から余り人様に見せられるような文章を書いていない、というのが露呈した気がした。
そういえば普段の会話もあまり賢いものとは言えない…。
時を経るごとに、喋るのも下手になっていると感じる。&lt;/p&gt;

&lt;p&gt;やばいなー。やばいヤバイ。&lt;/p&gt;

&lt;p&gt;人とコミュニケーションとらずに生きていくのにそろそろ限界を感じているので、
意図して真っ当な会話をし、文章を書けるように心がけていこうと思う。
そういえば最近まともに読書もしていないし…。
社会生活を営む人間として真っ当に生きていく為の読書くらいは、しよう。&lt;/p&gt;

&lt;h2 id=&#34;業務外のアレコレ:7a2f7ead465353c7838d82b7d8c026fb&#34;&gt;業務外のアレコレ&lt;/h2&gt;

&lt;p&gt;最近(ほぼ)趣味で、 AWS上にシンプルに構築されたWordPressブログを、
HTTPSにしてついでにHTTP/2対応してHHVMで稼動させようぜ、というような試みをしている。&lt;/p&gt;

&lt;p&gt;AWSは最近ようやく触りはじめたばかりなので、
どういったことが出来るのか、から調べつつやっている。&lt;/p&gt;

&lt;p&gt;ベースがAmazonLinuxなので、HHVMは公式にサポートされていない。
なので Docker を利用したいところなのだけれど、
WordPress がダイナミックに自分自身を更新するという話を聞いて、うーん、となった。
HHVMだけをECSで動かしてもしょうがないから、やるならWordPressもコンテナに詰めるのだけど、
コンテナ内で稼動しているWordPressを更新してもしょうがない、というかコンテナ再起動したら消えちゃうしなー、という。
それとも、ECSで使うEC2インスタンスにWordPressを普通に入れちゃえばいいのかな？&lt;/p&gt;

&lt;p&gt;などなど、色々試行錯誤の日々である。
今日はHugoの記事書き上げるのとドメイン移行でいっぱいいっぱいだったので、
明日には何らかの成果を出したい…。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo &#43; GitHub Pages でお手軽にブログを始めよう</title>
      <link>https://www.yewton.net/2016/02/02/blog-with-hugo</link>
      <pubDate>Tue, 02 Feb 2016 18:44:21 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/02/02/blog-with-hugo</guid>
      <description>

&lt;h2 id=&#34;はじめに:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;この記事は「いい感じのブログを無料で手軽に作れないかなー」、と思っている人が主な対象です。&lt;/p&gt;

&lt;p&gt;〈いい感じ〉というのが抽象的ですが、以下のような欲求をイメージしています:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.staticgen.com/&#34;&gt;Top Open-Source Static Site Generators - StaticGen&lt;/a&gt; にあるような静的サイトジェネレータがいい&lt;/li&gt;
&lt;li&gt;サイト生成は速ければ速いほどいい&lt;/li&gt;
&lt;li&gt;モダンでレスポンシブルなのがいい&lt;/li&gt;
&lt;li&gt;記事を書いたら即確認出来るのがいい&lt;/li&gt;
&lt;li&gt;GitHub Pagesに簡単にデプロイ出来るのがいい&lt;/li&gt;
&lt;li&gt;独自ドメインは使いたい&lt;/li&gt;
&lt;li&gt;ブログにありがちなコメント機能とかアクセス解析とかが出来るといい&lt;/li&gt;
&lt;li&gt;HTTPSなのがいい&lt;/li&gt;
&lt;li&gt;HTTP/2なのがいい&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;サイトの方式を考える:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;サイトの方式を考える&lt;/h2&gt;

&lt;p&gt;手軽に始めたいので、準備はなるべく少ない方が嬉しいですね。&lt;/p&gt;

&lt;p&gt;WordPress みたいな動的な方式はサーバを用意しないといけないので手間ですし、場合によっては金もかかります。&lt;/p&gt;

&lt;p&gt;一方の静的サイト配信であれば、必要なのは HTML を配信出来る場所だけです。
GitHub Pages や類似のサービスを使えば無料で利用できますね。&lt;/p&gt;

&lt;h2 id=&#34;静的サイトジェネレータを選ぶ:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;静的サイトジェネレータを選ぶ&lt;/h2&gt;

&lt;p&gt;というわけで静的サイトを作成するためのジェネレータを選びます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.staticgen.com/&#34;&gt;Top Open-Source Static Site Generators - StaticGen&lt;/a&gt; の中から適当に選びましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; や &lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt; はメジャーっぽいですが検索してみると、何だか遅いみたいです(使ったことない)。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gitbook.com/&#34;&gt;GitBook&lt;/a&gt; はドキュメントを書くのには向いています(自分も利用しています)。ですがブログを書くためのものではありません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hexo.io/&#34;&gt;Hexo&lt;/a&gt; か &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; あたりがよさそうです。
これら二つはコンセプトもよく似ているし、最早好みの世界ですね。自分は何となく Hugo を使っています。&lt;/p&gt;

&lt;h2 id=&#34;hugo:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;Hugo&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://www.yewton.net/img/2016-01-11_184419/hugo.png&#34; alt=&#34;Hugoのロゴ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; は超高速でシンプルかつ柔軟な静的サイトジェネレータだそうです。
Go言語で書かれていて、インストールはとってもカンタン。すぐに使えます。&lt;/p&gt;

&lt;p&gt;使い方もとってもカンタン…というワケではないかもしれません。
といっても、それは Hugo が殊更難しいというワケではなく、
そもそも静的サイトジェネレーターというモノを理解している必要がある、ということだと思います。&lt;/p&gt;

&lt;p&gt;ブログを書く、ということだけに目的を絞れば、覚える必要がある用語は
&lt;em&gt;Content&lt;/em&gt;, &lt;em&gt;Themes&lt;/em&gt;, &lt;em&gt;Taxonomies&lt;/em&gt; の3つだけです。&lt;/p&gt;

&lt;h3 id=&#34;content:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;Content&lt;/h3&gt;

&lt;p&gt;ブログで言えば記事のことです。&lt;/p&gt;

&lt;p&gt;Content がどのように表示されるかは使用しているテーマによりますが、
ブログ用テーマのほとんどは &lt;code&gt;post&lt;/code&gt; ディレクトリ以下にあるファイルを記事として扱うようです。&lt;/p&gt;

&lt;h3 id=&#34;themes:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;Themes&lt;/h3&gt;

&lt;p&gt;そのまま、サイトに適用するテーマです。&lt;/p&gt;

&lt;p&gt;Hugoの場合、テーマはそのサイトの構成まで決めてしまいます。
独自にテンプレートを書くことでカスタマイズ出来るとはいえ、目的に沿ったテーマを選択するのが無難です。&lt;/p&gt;

&lt;p&gt;テーマ選択の方法については後述します。&lt;/p&gt;

&lt;h3 id=&#34;taxonomies:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;Taxonomies&lt;/h3&gt;

&lt;p&gt;やけに難しい単語ですが、分類方法のことです。
ブログなら &lt;strong&gt;カテゴリ&lt;/strong&gt; や &lt;strong&gt;タグ&lt;/strong&gt; といった類のものです。&lt;/p&gt;

&lt;p&gt;幸い、カテゴリとタグによる基本的な分類であればデフォルトで対応しているため、あまり意識する必要はありません。
カテゴリやタグのことを Taxonomies と呼ぶことだけ押さえておけばOKです。&lt;/p&gt;

&lt;h2 id=&#34;サイトを作る:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;サイトを作る&lt;/h2&gt;

&lt;p&gt;早速サイトを作っていきましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;Hugo - Hugo Quickstart Guide&lt;/a&gt; に従えば基本的に迷うことは無いと思います。
ここでは、適当にサイトを作って、ひとつ記事を書いてみて、それがブラウザで確認出来るようになれば大丈夫です。&lt;/p&gt;

&lt;p&gt;ただし、 &lt;strong&gt;日本語に対応させる設定は追加で必要&lt;/strong&gt; です。&lt;/p&gt;

&lt;h3 id=&#34;日本語対応:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;日本語対応&lt;/h3&gt;

&lt;p&gt;ありがたいことに、Hugoは日本語や中国語の為の特別な設定を用意してくれています。
設定ファイルに &lt;code&gt;hasCJKLanguage = true&lt;/code&gt; という行を追加しましょう。&lt;/p&gt;

&lt;p&gt;これをやらないと、一覧用に記事を自動で切り詰めてくれる機能や、
読み終えるまでの予想時間の計算が滅茶苦茶になってしまいます。&lt;/p&gt;

&lt;h2 id=&#34;テーマを決める:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;テーマを決める&lt;/h2&gt;

&lt;p&gt;次はサイトに適用するテーマを選択しましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;Hugo Themes Site&lt;/a&gt; で実際の例を見ながらテーマを選ぶことが出来ます。
ブログ用のテーマのみに絞って見たい場合は &lt;a href=&#34;http://themes.gohugo.io/tags/blog&#34;&gt;こちら&lt;/a&gt; からどうぞ。&lt;/p&gt;

&lt;p&gt;注意点として、Hugoには記事を読み終えるまでの時間やおおよその文字数を表示する機能が組込まれているのですが、テーマがサポートしていない場合は表示されません。
このような機能を使いたい場合は、テーマでサポートされているかを確認しましょう。&lt;/p&gt;

&lt;p&gt;このサイトは &lt;a href=&#34;http://themes.gohugo.io/hugo-icarus/&#34;&gt;Icarus&lt;/a&gt; を使っています。
ショーケースの中では使える機能が一番多いと思うので、どういうことが出来るのか知るには丁度よいテーマだと思います。&lt;/p&gt;

&lt;h2 id=&#34;favicon-を置こう:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;favicon を置こう&lt;/h2&gt;

&lt;p&gt;デフォルトでは Hugo の favicon が表示されてしまうので、カスタマイズしましょう。
&lt;a href=&#34;http://www.favicon-generator.org/&#34;&gt;Favicon &amp;amp; App Icon Generator&lt;/a&gt; などを使うとよいです。&lt;/p&gt;

&lt;p&gt;生成した &lt;code&gt;.ico&lt;/code&gt; ファイルを &lt;code&gt;static&lt;/code&gt; 直下に配置すればOKです。&lt;/p&gt;

&lt;h2 id=&#34;記事を書く:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;記事を書く&lt;/h2&gt;

&lt;p&gt;記事はMarkdownで書きます。&lt;/p&gt;

&lt;p&gt;ここで困るのは、Markdownにもいくつか方言があることです。
何を参考に書けばいいか迷ってしまいますね。&lt;/p&gt;

&lt;p&gt;HugoではMarkdownの処理に &lt;a href=&#34;https://github.com/russross/blackfriday&#34;&gt;russross/blackfriday: Blackfriday: a markdown processor for Go&lt;/a&gt; を使っています。
Blackfriday特有の書式(脚注など)もある為、こちらを参照しながら書くとよいでしょう。&lt;/p&gt;

&lt;h3 id=&#34;記事のファイル名について:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;記事のファイル名について&lt;/h3&gt;

&lt;p&gt;日記や思い付きで即興で記事を書く場合、いちいち被らないようにファイル名を考えるのは面倒ですよね。&lt;/p&gt;

&lt;p&gt;Hugoの場合ファイル名は管理上の問題でしかないので、適当に日付やタイムスタンプでも入れておけばよいです。
デフォルトではファイル名がURLに使われますが、記事毎の設定で &lt;code&gt;slug = &amp;quot;hogehoge&amp;quot;&lt;/code&gt; のように設定しておけば、
実際のURLは &lt;code&gt;/post/hogehoge&lt;/code&gt; のようになります。&lt;/p&gt;

&lt;p&gt;また、以下のように設定ファイルに書いておけば、年月日がURLのプレフィクスに付くので被る心配もありません:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[permalinks]
    post = &amp;quot;/:year/:month/:day/:slug&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コメント対応:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;コメント対応&lt;/h2&gt;

&lt;p&gt;なんとなくコメント欄があるとオープンな感じでいいですよね？
ということでコメントにも対応させてみましょう。&lt;/p&gt;

&lt;p&gt;Hugo自身が&lt;a href=&#34;https://github.com/spf13/hugo/blob/cd36d752a3e8e2b75965fe281e6466d7a274cd94/tpl/template_embedded.go#L131-L145&#34;&gt;Disqusに対応している&lt;/a&gt;ので、
&lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt;を使いましょう。
ただし、Disqusによるコメント対応も、テーマによってはサポートされていない場合があるので要注意です。&lt;/p&gt;

&lt;p&gt;何よりもまず Disqus への登録です。
&lt;a href=&#34;https://help.disqus.com/customer/portal/articles/466182-publisher-quick-start-guide&#34;&gt;ヘルプ&lt;/a&gt;を見ながら行いましょう。
設定は特に必要ありませんので登録だけ済ませれば一旦OKです。後から言語設定を日本語にしたりすることも出来ます。&lt;/p&gt;

&lt;p&gt;登録が完了したら、登録時に入力した shortname (unique Disqus URL) を以下のように設定に追記しましょう:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;disqusShortname = &amp;quot;sitename&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでHugoの設定は完了です。(テーマが対応していれば)個別の記事ページにコメント欄が出現します。&lt;/p&gt;

&lt;h2 id=&#34;デプロイ:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;デプロイ&lt;/h2&gt;

&lt;p&gt;生成したブログは GitHub Pages でホスティングします。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gh-pages&lt;/code&gt; ではなく、ユーザや Organization のページとして公開する場合は、
&lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/#hosting-personal-organization-pages&#34;&gt;Hosting Personal/Organization Pages&lt;/a&gt;に
何も考えずに従えばOKです。
例示されているスクリプトもそのままコピペで使えます。&lt;/p&gt;

&lt;p&gt;実際にこのブログで使われているモノは全て&lt;a href=&#34;https://github.com/yewton/yewton-hugo&#34;&gt;こちら&lt;/a&gt;にあるので参考にしてください。&lt;/p&gt;

&lt;h2 id=&#34;独自ドメイン対応:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;独自ドメイン対応&lt;/h2&gt;

&lt;p&gt;github.com ドメインでホスティングするだけでよければ、ここから先の作業は不要です。おめでとうございます。&lt;/p&gt;

&lt;p&gt;以降はHugoとは関係ない話が続きます。&lt;/p&gt;

&lt;p&gt;既に独自ドメインを持っていて、それをブログでも使いたい場合は、
&lt;a href=&#34;https://help.github.com/articles/adding-a-cname-file-to-your-repository/&#34;&gt;CNAME&lt;/a&gt;の設定をGitHub上で行う必要があります。
&lt;a href=&#34;https://github.com/yewton/yewton.github.io/blob/master/CNAME&#34;&gt;こんなファイル&lt;/a&gt;を作ってあげて、
DNSレジストラ側で &lt;code&gt;CNAME&lt;/code&gt; とか &lt;code&gt;ANAME&lt;/code&gt; の設定を行ないます。&lt;/p&gt;

&lt;h3 id=&#34;サブドメイン-vs-ルートドメイン:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;サブドメイン vs ルートドメイン&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;CNAME&lt;/code&gt; の設定をするか &lt;code&gt;ANAME&lt;/code&gt; の設定をするかは、サブドメインを使うかルートドメインを使うかの違いです。
GitHubのヘルプによると、&lt;a href=&#34;https://help.github.com/articles/about-custom-domains-for-github-pages-sites/#subdomains&#34;&gt;サブドメインを強く推奨している&lt;/a&gt;そうです。&lt;/p&gt;

&lt;p&gt;サブドメインを推奨する理由は以下のようです:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHubのCDNの恩恵を受けられる&lt;/li&gt;
&lt;li&gt;GitHub自体のIPアドレス変更に影響を受けない&lt;/li&gt;
&lt;li&gt;DoS対策がより効率的になるのでページロードが高速になる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というわけで、特別な事情がない限りはサブドメインを利用するのがよいでしょう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:072657b3c7db6be31ea1c615ed4cd298:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:072657b3c7db6be31ea1c615ed4cd298:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;https化:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;HTTPS化&lt;/h2&gt;

&lt;p&gt;ここまででブログとしての体裁は整いました。
ですが、折角つくったサイトですからHTTPSで配信したいですよね？しましょう。&lt;/p&gt;

&lt;p&gt;これには&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;CloudFlare&lt;/a&gt;を利用出来ます。
&lt;a href=&#34;https://1000ch.net/posts/2015/github-pages-custom-domain-in-https.html&#34;&gt;GitHub Pagesに設定しているカスタムドメインをHTTPS対応させる - 1000ch.net&lt;/a&gt;が非常に参考になります。&lt;/p&gt;

&lt;p&gt;設定が反映されるまでは最長1日程度かかりますので、ゆっくりと待ちましょう。&lt;/p&gt;

&lt;p&gt;なおCloudFlareを利用すると、ついでに HTTP/2 も有効になります。
他にもJSの軽量化などの各種高速化の設定を利用出来ますので、設定項目を見てみるのもよいでしょう。&lt;/p&gt;

&lt;h3 id=&#34;注意:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;注意&lt;/h3&gt;

&lt;p&gt;注意点として、この際に Flexible SSL を用いる場合は、あくまでユーザとCloudFlare間の通信が暗号化されるだけで、 &lt;strong&gt;CloudFlareとGitHub Pages間の通信は暗号化されていません&lt;/strong&gt; 。
後者の間の通信は改竄されうる状態で、かつ、ユーザはそれを知る術が無いという状態に…。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://konklone.com/post/github-pages-now-supports-https-so-use-it&#34;&gt;GitHub Pages Now (Sorta) Supports HTTPS, So Use It&lt;/a&gt;に詳しく書かれていますが、
一応そういう状態であるということは認識しておきましょう。&lt;/p&gt;

&lt;h2 id=&#34;終わりに:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;いい感じのブログを無料で手軽に作る方法についてまとめました。
改めてまとめてみるとそれなりにボリュームがあってちょっと大変でした…。&lt;/p&gt;

&lt;p&gt;これからブログを始めるぞーと思っている誰かの役に立てばいいなーと思います。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:072657b3c7db6be31ea1c615ed4cd298:1&#34;&gt;こう書いている自分も、最初は特に気にせずにルートドメインで登録してしまっていました。この記事を書きながら気づいて、慌てて &lt;code&gt;www&lt;/code&gt; サブドメインに移行しました。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:072657b3c7db6be31ea1c615ed4cd298:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>スクラム入門を翻訳する日々</title>
      <link>https://www.yewton.net/2016/01/31/diary</link>
      <pubDate>Sun, 31 Jan 2016 23:18:29 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/01/31/diary</guid>
      <description>&lt;p&gt;最近、&lt;a href=&#34;https://www.gitbook.com/book/yewton/scrumprimer/details&#34;&gt;スクラム入門の翻訳&lt;/a&gt;を
細々とやっている。&lt;/p&gt;

&lt;p&gt;元々は&lt;a href=&#34;http://www.scrumprimer.org/&#34;&gt;Scrum Primer - Short Introduction to Scrum&lt;/a&gt;で配布されているPDFで、
認定スクラムマスター研修でも参照される真っ当な文献(のはす)。&lt;/p&gt;

&lt;p&gt;日本語版があるにはある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:f10cb402008eac2dda64382953d50111:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:f10cb402008eac2dda64382953d50111:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;んだけれど、古いし翻訳の質が怪しいので、
自分の理解を進めるという意味も含めて独力で翻訳してみることにした。&lt;/p&gt;

&lt;p&gt;進捗としては、1週間の空いた時間をほぼそればっかりに費してようやっと &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt; くらい進んだ。
さすがに他のこともやりたいので、完成までは2ヶ月くらいかかってしまうかもしれない…。
3月中には終わるように頑張ろう。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:f10cb402008eac2dda64382953d50111:1&#34;&gt;すくすくスクラムが翻訳した版がある。あるはずなのだけれど公式に配布している所が見当たらない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:f10cb402008eac2dda64382953d50111:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>hugo.elを書いた</title>
      <link>https://www.yewton.net/2016/01/26/hugo-el</link>
      <pubDate>Tue, 26 Jan 2016 23:25:40 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/01/26/hugo-el</guid>
      <description>

&lt;h2 id=&#34;とは:5a4a752293a6cc5230abaaa041746920&#34;&gt;#とは&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yewton/hugo.el&#34;&gt;hugo.el&lt;/a&gt;は、Hugoでサイト作成する際に便利な関数群を定義したパッケージ。
&lt;a href=&#34;https://marmalade-repo.org/&#34;&gt;marmalade-repo&lt;/a&gt;で公開されているので、パッケージの設定をすれば簡単にインストール出来るハズ。&lt;/p&gt;

&lt;h2 id=&#34;作った動機:5a4a752293a6cc5230abaaa041746920&#34;&gt;作った動機&lt;/h2&gt;

&lt;p&gt;何か〈物を書く〉という作業をする時、自分はEmacsを使っていて、可能な限りEmacsの中から出たくない。
HugoはCLIのインタフェースなので、ターミナルとEmacsを行き来することになってしまうのは辛い。&lt;/p&gt;

&lt;p&gt;あと色んなテーマを試したい時に、いちいちテーマ名をコピペする必要があり、辛かった。
一覧の中からhelmで選択したかった。&lt;/p&gt;

&lt;p&gt;…というように、Emacsの中で色々作業が完結するようにしたかった。&lt;/p&gt;

&lt;h2 id=&#34;作ってみて:5a4a752293a6cc5230abaaa041746920&#34;&gt;作ってみて&lt;/h2&gt;

&lt;p&gt;正直テーマのインストール補助機能はHugoを初めて触って、色々試してみたいフェーズでしか使わないので、
ほとんどの場合大した価値じゃないかもしれない。&lt;/p&gt;

&lt;p&gt;個人的には、 &lt;code&gt;hugo-new-content&lt;/code&gt; と、 &lt;code&gt;hugo-start-server&lt;/code&gt;, &lt;code&gt;hugo-open-browser&lt;/code&gt; が中々便利だなーと思って使っている。
適当に記事を書き始められるし、プレビューするためにターミナルで確認したアドレスをブラウザに打ち込むとかやらなくてよいので。&lt;/p&gt;

&lt;p&gt;書き終えたあとに &lt;code&gt;hugo-deploy&lt;/code&gt; でひょいっと公開出来るのも地味に便利。
ただ、デプロイスクリプトを呼び出してるだけなんだけどね…。&lt;/p&gt;

&lt;p&gt;普段Emacsで物書きをするひとで、Hugoでブログ書こうと思う人は是非便利に使ってもらいたい。
そんな人あんまりいなさそうだけど…。&lt;/p&gt;

&lt;h2 id=&#34;todo:5a4a752293a6cc5230abaaa041746920&#34;&gt;TODO&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hugo-open-browser&lt;/code&gt; で今開いているcontentを直接開けたらより便利かもしれない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hugo-deploy&lt;/code&gt; が同期処理になってて固まるので、非同期にする&lt;/li&gt;
&lt;li&gt;テスト全然書いてないので、テストを書いてバッジをつけて喜ぶ&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JIRA Agile用のuserscriptを作ったりした日</title>
      <link>https://www.yewton.net/2016/01/23/diary</link>
      <pubDate>Sat, 23 Jan 2016 23:47:43 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/01/23/diary</guid>
      <description>

&lt;h2 id=&#34;趣味の政策物:94b3c734ee959e37b47a43c2fb129b69&#34;&gt;趣味の政策物&lt;/h2&gt;

&lt;p&gt;弊チームではバックログとしてJIRAを使っている。&lt;/p&gt;

&lt;p&gt;ここ最近しつこく「管理者権限が欲しいなァ〜(ﾁﾗｯ」としていたらめでたく権限を付与してもらえたので、
ここぞとばかりにJIRAをカスタムして使いやすいようにしていた。&lt;/p&gt;

&lt;p&gt;ワークフローを単純にしたり、使わないフィールドを非表示にしたり、
これまで説明文用のテンプレからコピペしたりしていたのを、それぞれ専用のフィールドを設けたり。&lt;/p&gt;

&lt;p&gt;色々準備はしたもの、やはり始まってみると色々不便なところが出てきて、
しかもJIRAの設定じゃどうしようもない部分もあったりする。&lt;/p&gt;

&lt;p&gt;たかがツール、されどツールで、ツールに使われているようじゃ到底円滑にスプリントを回すことなんて出来ない。&lt;/p&gt;

&lt;p&gt;そこで、スクラムマスターがセレモニーを進めやすいように支援するためのuserscriptを書いた。
ソースは&lt;a href=&#34;https://github.com/yewton/userscripts&#34;&gt;yewton/userscripts&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;component-labels-for-jira-scrum:94b3c734ee959e37b47a43c2fb129b69&#34;&gt;Component-labels for JIRA Scrum&lt;/h3&gt;

&lt;p&gt;コンポーネントをエピックのようにスクラムボード上で分かりやすいく表示する。&lt;/p&gt;

&lt;p&gt;ラベリングをしたいが為だけにエピックを使ってしまうという事態は結構そこかしこで起こっているみたいだった。
本来はコンポーネントでやるべきもので、エピックはエピックとして使えるのが健全な状態だと思うので、作った。&lt;/p&gt;

&lt;p&gt;実装は滅茶苦茶単純で、DOMに変更がある度に全課題を舐めて、未設定だったらAPIで該当する課題のコンポーネントを取得している。
なので、バックログに積まれている課題数分、ページを開いた瞬間にリクエストが走ることになる。
リクエストの仕方を何か工夫しないと使いものにならないかなーと思っていたのだけれど、
案外数百リクエスト飛ばすぐらいだとビクともしなかったので、愚直な実装のまま。&lt;/p&gt;

&lt;h3 id=&#34;detail-pop-up-for-jria-scrum:94b3c734ee959e37b47a43c2fb129b69&#34;&gt;Detail Pop-up for JRIA Scrum&lt;/h3&gt;

&lt;p&gt;各課題に詳細画面をポップアップで開くためのボタンを追加する。&lt;/p&gt;

&lt;p&gt;アジャイルボードではカスタムフィールドが表示されないので、
確認するためには編集ポップアップを開くか、詳細画面に飛ぶしかなかった。
しかも、アクティブなスプリント中はクローズされている課題が編集出来ないので、
前者の方法はスプリントレビュー時には使えない。&lt;/p&gt;

&lt;p&gt;画面遷移せずに詳細画面が開ければ用は足りると考え、
&lt;a href=&#34;http://www.ericmmartin.com/projects/simplemodal/&#34;&gt;SimpleModal&lt;/a&gt;という、
その名の通りシンプルなモーダル機能を実装するためのライブラリを使って、
&lt;code&gt;iframe&lt;/code&gt; で詳細画面を開くだけの機能を追加した。&lt;/p&gt;

&lt;h2 id=&#34;第3回-実践的ドメイン駆動設計ワークショップ-connpass-http-ddd-alliance-connpass-com-event-24672:94b3c734ee959e37b47a43c2fb129b69&#34;&gt;&lt;a href=&#34;http://ddd-alliance.connpass.com/event/24672/&#34;&gt;第3回 実践的ドメイン駆動設計ワークショップ - connpass&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;参加してきた。&lt;/p&gt;

&lt;p&gt;エンジニアチームとして、業務と技術両面でどういう風に学んでいけばいいかっていう話と、
実際にやってみたら、コードの雰囲気はこんな感じだぜ、っていう話。&lt;/p&gt;

&lt;p&gt;ドメイン層のクラスが1,000個とかあって、個々のクラスは 30 〜 60 行が大半を占めるそう。
目指すべき方向はそこだっていうのはわかってはいるけど、
実際に稼動してるプロダクトの数字っていうのは説得力がある。&lt;/p&gt;

&lt;p&gt;ドメイン駆動設計を実践するなら、ドメインエキスパートとか、企画者との協調が必須だと思うのだけれど、
それをどうプロセスとして制御可能な形で行えばいいか、あまり掴めてない。&lt;/p&gt;

&lt;p&gt;会話を重視しつつ、かつダラダラやらずに予測可能な状態で、
モデルに関する会話をする場を、開発プロセスのどこで行えばいいんだろう。&lt;/p&gt;

&lt;p&gt;増田さんに上手いやり方無いっすか、と相談してみたけれど、
いい方法っていうのはなくて、エンジニアチームが実績を積み重ねて信頼を得ていって、
協力体制を築くしかないね、ということだった。
それでも駄目なら、職場を変えよ、とも。&lt;/p&gt;

&lt;p&gt;色々仰々しいプロセスやツールを導入せずとも、
いつか阿吽の呼吸で、エンジニアチームと企画陣が協調して最高の仕事が出来るようになったときが、
アジャイルでドメイン駆動な状態なんだろう、たぶん。適当。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>markdown-modeでSKKの変換確定するためにRETするとカーソルが行頭に飛ぶ問題の回避策</title>
      <link>https://www.yewton.net/2016/01/20/markdown-mode-skk-kakutei</link>
      <pubDate>Wed, 20 Jan 2016 22:40:16 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/01/20/markdown-mode-skk-kakutei</guid>
      <description>

&lt;p&gt;markdown-mode 2.1 で SKK 15.2 使ってると、確定しようと思って &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; すると、
確定後にカーソルが行頭に飛んでしまうという問題に遭遇した。
&lt;code&gt;C-j&lt;/code&gt; で確定する場合は起こらない。&lt;/p&gt;

&lt;h2 id=&#34;tl-dr:4303d53c5ca37efd7fdc304227397d56&#34;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;以下を &lt;code&gt;init.el&lt;/code&gt; 相当のファイルに書けば回避出来る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun my--markdown-entery-key-ad (this-func &amp;amp;rest args)
  &amp;quot;markdown-modeでskk-henkan-mode中にエンターすると行頭にカーソルが飛んでしまう問題の対応&amp;quot;
  (if skk-henkan-mode (skk-kakutei)
    (apply this-func args)))
(advice-add #&#39;markdown-enter-key :around #&#39;my--markdown-entery-key-ad)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;原因解明に至るまで:4303d53c5ca37efd7fdc304227397d56&#34;&gt;原因解明に至るまで&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; = &lt;code&gt;&amp;lt;C-m&amp;gt;&lt;/code&gt; では起こり、&lt;code&gt;C-j&lt;/code&gt; では起こらないので、まずはキーバインドを確認したところ、
前者は &lt;code&gt;markdown-enter-key&lt;/code&gt; という関数が割り当てられていた。&lt;/p&gt;

&lt;p&gt;実装は至ってシンプルだった:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun markdown-enter-key ()
  &amp;quot;Handle RET according to to the value of `markdown-indent-on-enter&#39;.&amp;quot;
  (interactive)
  (newline)
  (when markdown-indent-on-enter
    (markdown-indent-line)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に &lt;code&gt;trace-function&lt;/code&gt; で &lt;code&gt;markdown-enter-key&lt;/code&gt; と &lt;code&gt;skk-kakutei&lt;/code&gt; をトレースしたところ、
以下のような出力が得られた:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 -&amp;gt; (markdown-enter-key)
| 2 -&amp;gt; (skk-kakutei)
| 2 &amp;lt;- skk-kakutei: nil
1 &amp;lt;- markdown-enter-key: nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;markdown-enter-key&lt;/code&gt; が発動して &lt;code&gt;(newline)&lt;/code&gt; が評価された結果、
&lt;code&gt;skk-kakutei&lt;/code&gt; が発動して変換確定、その後に &lt;code&gt;markdown-indent-line&lt;/code&gt; が呼ばれているのがどうも悪いらしい。&lt;/p&gt;

&lt;h2 id=&#34;回避方法:4303d53c5ca37efd7fdc304227397d56&#34;&gt;回避方法&lt;/h2&gt;

&lt;p&gt;これは &lt;strong&gt;&lt;code&gt;markdown-enter-key&lt;/code&gt; が呼ばれた時に &lt;code&gt;skk-henkan-mode&lt;/code&gt; 中だったら、&lt;/strong&gt;
&lt;strong&gt;本来の挙動ではなく &lt;code&gt;skk-kakutei&lt;/code&gt; だけを行なうようにする&lt;/strong&gt; ことで回避出来そうだ。&lt;/p&gt;

&lt;p&gt;こういう部分的な挙動の修正には advice を使うといい。
というわけで前述の挙動をそのまま定義すると、冒頭のようなコードになる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>雪が振ったので一日中家に引き込もっていた日の次の日</title>
      <link>https://www.yewton.net/2016/01/19/diary</link>
      <pubDate>Tue, 19 Jan 2016 23:00:00 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/01/19/diary</guid>
      <description>

&lt;p&gt;昨日は都内も大雪(いうほどか？)で出社がダルそうだったので、終日リモートワークしていた。
本当に一歩も家から出ずに、パジャマから着替えもせずに、もくもくとPC作業。&lt;/p&gt;

&lt;h2 id=&#34;個人のタスク管理:cf0329059db40c2a5492126930e90824&#34;&gt;個人のタスク管理&lt;/h2&gt;

&lt;p&gt;最近認定スクラムマスターも取ったし、
一日中スクラムのことばかり考えて悶々とするような続いている。&lt;/p&gt;

&lt;p&gt;そんな中で、個人的な、業務とかまったく関係ない趣味のタスク管理もなんとかしたいなぁと思いはじめた。&lt;/p&gt;

&lt;p&gt;趣味なのでそんなガッツリ管理するわけじゃないのでゆるいので何かないかなーと探したら、
&lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt; というのがいい感じにゆるゆると使えそうな感じだった。&lt;/p&gt;

&lt;p&gt;見積もりとか検証とかは出来なさそうだけど、とりあえず何もしないよりはいいだろーっていう想いで、使うことにした。&lt;/p&gt;

&lt;p&gt;ボードによると、目下最優先のタスクは、 &lt;code&gt;markdwon-mode&lt;/code&gt; で &lt;code&gt;skk-mode&lt;/code&gt; の確定キーバインドが想定通り機能しない件の対応である。
やるぞ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTTPSに対応してついでにHTTP/2対応された日</title>
      <link>https://www.yewton.net/2016/01/18/diary</link>
      <pubDate>Mon, 18 Jan 2016 00:06:20 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/01/18/diary</guid>
      <description>

&lt;h2 id=&#34;https-http-2-対応:e6a1a03cb41557bae8d628ec222879e1&#34;&gt;HTTPS + HTTP/2 対応&lt;/h2&gt;

&lt;p&gt;世の中的にHTTPS対応してないといかんような気がしたので、
このサイトもHTTPSで配信するように対応した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://1000ch.net/posts/2015/github-pages-custom-domain-in-https.html&#34;&gt;GitHub Pagesに設定しているカスタムドメインをHTTPS対応させる - 1000ch.net&lt;/a&gt;を大いに参考にさせていただいた。
もう本当に書いてある通りにすればいい。 &lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;CloudFlare&lt;/a&gt; 様々である。&lt;/p&gt;

&lt;p&gt;敢えて付け加えるとしたら、(CloudFlareのサイト上に注記されてはいるけども)Flexible SSLが実際に動くようになるまでは結構時間がかかること。
自分の場合は、都合7〜8時間程度かかった。
この間、ステータスは &lt;code&gt;AUTHORIZING CERTIFICATES&lt;/code&gt; から &lt;code&gt;ISSUING CERTIFICATES&lt;/code&gt; になり、最終的に &lt;code&gt;ACTIVE CERTIFICATE&lt;/code&gt; になった。&lt;/p&gt;

&lt;p&gt;この方法でサイトをHTTPS対応するのは簡単だけども懸念もあるらしい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e6a1a03cb41557bae8d628ec222879e1:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e6a1a03cb41557bae8d628ec222879e1:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;ので、
また今度この辺が実際どういう仕組みで動いてるのか調べてまとめたいと思う。&lt;/p&gt;

&lt;p&gt;なお、CloudFlareを利用することで副次的に HTTP/2 にも対応することになった。
Chromeで &lt;a href=&#34;https://chrome.google.com/webstore/detail/http2-and-spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin&#34;&gt;HTTP/2 and SPDY indicator&lt;/a&gt;
を入れてアクセスしたりすると分かる。&lt;/p&gt;

&lt;h2 id=&#34;ddd:e6a1a03cb41557bae8d628ec222879e1&#34;&gt;DDD&lt;/h2&gt;

&lt;p&gt;開発チームビルディングの一環で、ドメイン駆動設計について改めて色々調べたりしている。&lt;/p&gt;

&lt;p&gt;図やドキュメントに本質はないとはいえ、ユビキタス言語のサポートとして用語集を作ったり、
深いモデルの洞察のために図が役に立ったりするので、そのへんのサポートツールが欲しくなる。&lt;/p&gt;

&lt;p&gt;色々探してたら&lt;a href=&#34;https://skillsmatter.com/skillscasts/6259-ddd-and-microservices-at-last-some-bounderies&#34;&gt;エヴァンス先生がマイクロサービスとの関わりについて講習してる動画&lt;/a&gt;があった。
境界づけられたコンテキストはサービスじゃないから、別に実サービスと一対一対応する必要はない。
例えば、複数のコンテキストにまたがってやりとりされるようなあるコンテキストのメッセージがあるなら、
それは Interchange Context (日本語で言うと相互連結コンテキスト？)のように別のコンテキストとして定義すればいいよね、みたいな話があった。&lt;/p&gt;

&lt;p&gt;せっかく内製開発してて、スクラムやってて、物理的にステークホルダー達とも近い距離にいるのだから、
その恩恵を最大限に活かせるようにしたい。
そのためにDDDって実践的に役立つと思うので、もっと勉強しなければ。&lt;/p&gt;

&lt;p&gt;勉強の一環として今度&lt;a href=&#34;http://ddd-alliance.connpass.com/event/25209/&#34;&gt;DDD Alliance! ドメイン駆動設計のためのオブジェクト指向入門&lt;/a&gt;に行ってみる。
日本でDDDのコミュニティってここくらい？な気がするので、勉強会の内容というよりはコミュニティの様子が気になるので。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:e6a1a03cb41557bae8d628ec222879e1:1&#34;&gt;&lt;a href=&#34;https://konklone.com/post/github-pages-now-supports-https-so-use-it&#34;&gt;GitHub Pages Now (Sorta) Supports HTTPS, So Use It&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e6a1a03cb41557bae8d628ec222879e1:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>