<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dns | yewton.net</title><link>https://www.yewton.net/tags/dns/</link><atom:link href="https://www.yewton.net/tags/dns/index.xml" rel="self" type="application/rss+xml"/><description>dns</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ja-jp</language><copyright>© 2016-2020 yewton</copyright><lastBuildDate>Tue, 02 Feb 2016 18:44:21 +0900</lastBuildDate><image><url>https://www.yewton.net/img/icon.png</url><title>dns</title><link>https://www.yewton.net/tags/dns/</link></image><item><title>Hugo + GitHub Pages でお手軽にブログを始めよう</title><link>https://www.yewton.net/2016/02/02/blog-with-hugo/</link><pubDate>Tue, 02 Feb 2016 18:44:21 +0900</pubDate><guid>https://www.yewton.net/2016/02/02/blog-with-hugo/</guid><description>&lt;h2 id="heading">はじめに&lt;/h2>
&lt;p>この記事は「いい感じのブログを無料で手軽に作れないかなー」、と思っている人が主な対象です。&lt;/p>
&lt;p>〈いい感じ〉というのが抽象的ですが、以下のような欲求をイメージしています:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.staticgen.com/">Top Open-Source Static Site Generators - StaticGen&lt;/a> にあるような静的サイトジェネレータがいい&lt;/li>
&lt;li>サイト生成は速ければ速いほどいい&lt;/li>
&lt;li>モダンでレスポンシブルなのがいい&lt;/li>
&lt;li>記事を書いたら即確認出来るのがいい&lt;/li>
&lt;li>GitHub Pagesに簡単にデプロイ出来るのがいい&lt;/li>
&lt;li>独自ドメインは使いたい&lt;/li>
&lt;li>ブログにありがちなコメント機能とかアクセス解析とかが出来るといい&lt;/li>
&lt;li>HTTPSなのがいい&lt;/li>
&lt;li>HTTP/2なのがいい&lt;/li>
&lt;/ul>
&lt;h2 id="heading-1">サイトの方式を考える&lt;/h2>
&lt;p>手軽に始めたいので、準備はなるべく少ない方が嬉しいですね。&lt;/p>
&lt;p>WordPress みたいな動的な方式はサーバを用意しないといけないので手間ですし、場合によっては金もかかります。&lt;/p>
&lt;p>一方の静的サイト配信であれば、必要なのは HTML を配信出来る場所だけです。
GitHub Pages や類似のサービスを使えば無料で利用できますね。&lt;/p>
&lt;h2 id="heading-2">静的サイトジェネレータを選ぶ&lt;/h2>
&lt;p>というわけで静的サイトを作成するためのジェネレータを選びます。&lt;/p>
&lt;p>&lt;a href="https://www.staticgen.com/">Top Open-Source Static Site Generators - StaticGen&lt;/a> の中から適当に選びましょう。&lt;/p>
&lt;p>&lt;a href="http://jekyllrb.com/">Jekyll&lt;/a> や &lt;a href="http://octopress.org/">Octopress&lt;/a> はメジャーっぽいですが検索してみると、何だか遅いみたいです(使ったことない)。&lt;/p>
&lt;p>&lt;a href="https://www.gitbook.com/">GitBook&lt;/a> はドキュメントを書くのには向いています(自分も利用しています)。ですがブログを書くためのものではありません。&lt;/p>
&lt;p>&lt;a href="http://hexo.io/">Hexo&lt;/a> か &lt;a href="http://gohugo.io/">Hugo&lt;/a> あたりがよさそうです。
これら二つはコンセプトもよく似ているし、最早好みの世界ですね。自分は何となく Hugo を使っています。&lt;/p>
&lt;h2 id="hugo">Hugo&lt;/h2>
&lt;p>&lt;img src="https://www.yewton.net/img/2016-01-11_184419/hugo.png" alt="Hugoのロゴ">&lt;/p>
&lt;p>&lt;a href="http://gohugo.io/">Hugo&lt;/a> は超高速でシンプルかつ柔軟な静的サイトジェネレータだそうです。
Go言語で書かれていて、インストールはとってもカンタン。すぐに使えます。&lt;/p>
&lt;p>使い方もとってもカンタン…というワケではないかもしれません。
といっても、それは Hugo が殊更難しいというワケではなく、
そもそも静的サイトジェネレーターというモノを理解している必要がある、ということだと思います。&lt;/p>
&lt;p>ブログを書く、ということだけに目的を絞れば、覚える必要がある用語は
&lt;em>Content&lt;/em>, &lt;em>Themes&lt;/em>, &lt;em>Taxonomies&lt;/em> の3つだけです。&lt;/p>
&lt;h3 id="content">Content&lt;/h3>
&lt;p>ブログで言えば記事のことです。&lt;/p>
&lt;p>Content がどのように表示されるかは使用しているテーマによりますが、
ブログ用テーマのほとんどは &lt;code>post&lt;/code> ディレクトリ以下にあるファイルを記事として扱うようです。&lt;/p>
&lt;h3 id="themes">Themes&lt;/h3>
&lt;p>そのまま、サイトに適用するテーマです。&lt;/p>
&lt;p>Hugoの場合、テーマはそのサイトの構成まで決めてしまいます。
独自にテンプレートを書くことでカスタマイズ出来るとはいえ、目的に沿ったテーマを選択するのが無難です。&lt;/p>
&lt;p>テーマ選択の方法については後述します。&lt;/p>
&lt;h3 id="taxonomies">Taxonomies&lt;/h3>
&lt;p>やけに難しい単語ですが、分類方法のことです。
ブログなら &lt;strong>カテゴリ&lt;/strong> や &lt;strong>タグ&lt;/strong> といった類のものです。&lt;/p>
&lt;p>幸い、カテゴリとタグによる基本的な分類であればデフォルトで対応しているため、あまり意識する必要はありません。
カテゴリやタグのことを Taxonomies と呼ぶことだけ押さえておけばOKです。&lt;/p>
&lt;h2 id="heading-3">サイトを作る&lt;/h2>
&lt;p>早速サイトを作っていきましょう。&lt;/p>
&lt;p>&lt;a href="http://gohugo.io/overview/quickstart/">Hugo - Hugo Quickstart Guide&lt;/a> に従えば基本的に迷うことは無いと思います。
ここでは、適当にサイトを作って、ひとつ記事を書いてみて、それがブラウザで確認出来るようになれば大丈夫です。&lt;/p>
&lt;p>ただし、 &lt;strong>日本語に対応させる設定は追加で必要&lt;/strong> です。&lt;/p>
&lt;h3 id="heading-4">日本語対応&lt;/h3>
&lt;p>ありがたいことに、Hugoは日本語や中国語の為の特別な設定を用意してくれています。
設定ファイルに &lt;code>hasCJKLanguage = true&lt;/code> という行を追加しましょう。&lt;/p>
&lt;p>これをやらないと、一覧用に記事を自動で切り詰めてくれる機能や、
読み終えるまでの予想時間の計算が滅茶苦茶になってしまいます。&lt;/p>
&lt;h2 id="heading-5">テーマを決める&lt;/h2>
&lt;p>次はサイトに適用するテーマを選択しましょう。&lt;/p>
&lt;p>&lt;a href="http://themes.gohugo.io/">Hugo Themes Site&lt;/a> で実際の例を見ながらテーマを選ぶことが出来ます。
ブログ用のテーマのみに絞って見たい場合は &lt;a href="http://themes.gohugo.io/tags/blog">こちら&lt;/a> からどうぞ。&lt;/p>
&lt;p>注意点として、Hugoには記事を読み終えるまでの時間やおおよその文字数を表示する機能が組込まれているのですが、テーマがサポートしていない場合は表示されません。
このような機能を使いたい場合は、テーマでサポートされているかを確認しましょう。&lt;/p>
&lt;p>このサイトは &lt;a href="http://themes.gohugo.io/hugo-icarus/">Icarus&lt;/a> を使っています。
ショーケースの中では使える機能が一番多いと思うので、どういうことが出来るのか知るには丁度よいテーマだと思います。&lt;/p>
&lt;h2 id="favicon-">favicon を置こう&lt;/h2>
&lt;p>デフォルトでは Hugo の favicon が表示されてしまうので、カスタマイズしましょう。
&lt;a href="http://www.favicon-generator.org/">Favicon &amp;amp; App Icon Generator&lt;/a> などを使うとよいです。&lt;/p>
&lt;p>生成した &lt;code>.ico&lt;/code> ファイルを &lt;code>static&lt;/code> 直下に配置すればOKです。&lt;/p>
&lt;h2 id="heading-6">記事を書く&lt;/h2>
&lt;p>記事はMarkdownで書きます。&lt;/p>
&lt;p>ここで困るのは、Markdownにもいくつか方言があることです。
何を参考に書けばいいか迷ってしまいますね。&lt;/p>
&lt;p>HugoではMarkdownの処理に &lt;a href="https://github.com/russross/blackfriday">russross/blackfriday: Blackfriday: a markdown processor for Go&lt;/a> を使っています。
Blackfriday特有の書式(脚注など)もある為、こちらを参照しながら書くとよいでしょう。&lt;/p>
&lt;h3 id="heading-7">記事のファイル名について&lt;/h3>
&lt;p>日記や思い付きで即興で記事を書く場合、いちいち被らないようにファイル名を考えるのは面倒ですよね。&lt;/p>
&lt;p>Hugoの場合ファイル名は管理上の問題でしかないので、適当に日付やタイムスタンプでも入れておけばよいです。
デフォルトではファイル名がURLに使われますが、記事毎の設定で &lt;code>slug = &amp;quot;hogehoge&amp;quot;&lt;/code> のように設定しておけば、
実際のURLは &lt;code>/post/hogehoge&lt;/code> のようになります。&lt;/p>
&lt;p>また、以下のように設定ファイルに書いておけば、年月日がURLのプレフィクスに付くので被る心配もありません:&lt;/p>
&lt;pre>&lt;code>[permalinks]
post = &amp;quot;/:year/:month/:day/:slug&amp;quot;
&lt;/code>&lt;/pre>&lt;h2 id="heading-8">コメント対応&lt;/h2>
&lt;p>なんとなくコメント欄があるとオープンな感じでいいですよね？
ということでコメントにも対応させてみましょう。&lt;/p>
&lt;p>Hugo自身が&lt;a href="https://github.com/spf13/hugo/blob/cd36d752a3e8e2b75965fe281e6466d7a274cd94/tpl/template_embedded.go#L131-L145">Disqusに対応している&lt;/a>ので、
&lt;a href="https://disqus.com/">Disqus&lt;/a>を使いましょう。
ただし、Disqusによるコメント対応も、テーマによってはサポートされていない場合があるので要注意です。&lt;/p>
&lt;p>何よりもまず Disqus への登録です。
&lt;a href="https://help.disqus.com/customer/portal/articles/466182-publisher-quick-start-guide">ヘルプ&lt;/a>を見ながら行いましょう。
設定は特に必要ありませんので登録だけ済ませれば一旦OKです。後から言語設定を日本語にしたりすることも出来ます。&lt;/p>
&lt;p>登録が完了したら、登録時に入力した shortname (unique Disqus URL) を以下のように設定に追記しましょう:&lt;/p>
&lt;pre>&lt;code>disqusShortname = &amp;quot;sitename&amp;quot;
&lt;/code>&lt;/pre>&lt;p>これだけでHugoの設定は完了です。(テーマが対応していれば)個別の記事ページにコメント欄が出現します。&lt;/p>
&lt;h2 id="heading-9">デプロイ&lt;/h2>
&lt;p>生成したブログは GitHub Pages でホスティングします。&lt;/p>
&lt;p>&lt;code>gh-pages&lt;/code> ではなく、ユーザや Organization のページとして公開する場合は、
&lt;a href="https://gohugo.io/tutorials/github-pages-blog/#hosting-personal-organization-pages">Hosting Personal/Organization Pages&lt;/a>に
何も考えずに従えばOKです。
例示されているスクリプトもそのままコピペで使えます。&lt;/p>
&lt;p>実際にこのブログで使われているモノは全て&lt;a href="https://github.com/yewton/yewton-hugo">こちら&lt;/a>にあるので参考にしてください。&lt;/p>
&lt;h2 id="heading-10">独自ドメイン対応&lt;/h2>
&lt;p>github.com ドメインでホスティングするだけでよければ、ここから先の作業は不要です。おめでとうございます。&lt;/p>
&lt;p>以降はHugoとは関係ない話が続きます。&lt;/p>
&lt;p>既に独自ドメインを持っていて、それをブログでも使いたい場合は、
&lt;a href="https://help.github.com/articles/adding-a-cname-file-to-your-repository/">CNAME&lt;/a>の設定をGitHub上で行う必要があります。
&lt;a href="https://github.com/yewton/yewton.github.io/blob/master/CNAME">こんなファイル&lt;/a>を作ってあげて、
DNSレジストラ側で &lt;code>CNAME&lt;/code> とか &lt;code>ANAME&lt;/code> の設定を行ないます。&lt;/p>
&lt;h3 id="-vs-">サブドメイン vs ルートドメイン&lt;/h3>
&lt;p>&lt;code>CNAME&lt;/code> の設定をするか &lt;code>ANAME&lt;/code> の設定をするかは、サブドメインを使うかルートドメインを使うかの違いです。
GitHubのヘルプによると、&lt;a href="https://help.github.com/articles/about-custom-domains-for-github-pages-sites/#subdomains">サブドメインを強く推奨している&lt;/a>そうです。&lt;/p>
&lt;p>サブドメインを推奨する理由は以下のようです:&lt;/p>
&lt;ul>
&lt;li>GitHubのCDNの恩恵を受けられる&lt;/li>
&lt;li>GitHub自体のIPアドレス変更に影響を受けない&lt;/li>
&lt;li>DoS対策がより効率的になるのでページロードが高速になる&lt;/li>
&lt;/ul>
&lt;p>というわけで、特別な事情がない限りはサブドメインを利用するのがよいでしょう&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。&lt;/p>
&lt;h2 id="https">HTTPS化&lt;/h2>
&lt;p>ここまででブログとしての体裁は整いました。
ですが、折角つくったサイトですからHTTPSで配信したいですよね？しましょう。&lt;/p>
&lt;p>これには&lt;a href="https://www.cloudflare.com/">CloudFlare&lt;/a>を利用出来ます。
&lt;a href="https://1000ch.net/posts/2015/github-pages-custom-domain-in-https.html">GitHub Pagesに設定しているカスタムドメインをHTTPS対応させる - 1000ch.net&lt;/a>が非常に参考になります。&lt;/p>
&lt;p>設定が反映されるまでは最長1日程度かかりますので、ゆっくりと待ちましょう。&lt;/p>
&lt;p>なおCloudFlareを利用すると、ついでに HTTP/2 も有効になります。
他にもJSの軽量化などの各種高速化の設定を利用出来ますので、設定項目を見てみるのもよいでしょう。&lt;/p>
&lt;h3 id="heading-11">注意&lt;/h3>
&lt;p>注意点として、この際に Flexible SSL を用いる場合は、あくまでユーザとCloudFlare間の通信が暗号化されるだけで、 &lt;strong>CloudFlareとGitHub Pages間の通信は暗号化されていません&lt;/strong> 。
後者の間の通信は改竄されうる状態で、かつ、ユーザはそれを知る術が無いという状態に…。&lt;/p>
&lt;p>&lt;a href="https://konklone.com/post/github-pages-now-supports-https-so-use-it">GitHub Pages Now (Sorta) Supports HTTPS, So Use It&lt;/a>に詳しく書かれていますが、
一応そういう状態であるということは認識しておきましょう。&lt;/p>
&lt;h2 id="heading-12">終わりに&lt;/h2>
&lt;p>いい感じのブログを無料で手軽に作る方法についてまとめました。
改めてまとめてみるとそれなりにボリュームがあってちょっと大変でした…。&lt;/p>
&lt;p>これからブログを始めるぞーと思っている誰かの役に立てばいいなーと思います。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>こう書いている自分も、最初は特に気にせずにルートドメインで登録してしまっていました。この記事を書きながら気づいて、慌てて &lt;code>www&lt;/code> サブドメインに移行しました。 &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>