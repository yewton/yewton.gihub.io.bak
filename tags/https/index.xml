<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>https | yewton.net</title><link>https://www.yewton.net/tags/https/</link><atom:link href="https://www.yewton.net/tags/https/index.xml" rel="self" type="application/rss+xml"/><description>https</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ja-jp</language><copyright>© 2016-2020 yewton</copyright><lastBuildDate>Sun, 21 Feb 2016 22:49:52 +0900</lastBuildDate><image><url>https://www.yewton.net/img/icon.png</url><title>https</title><link>https://www.yewton.net/tags/https/</link></image><item><title>WordPressをHTTP/2+HHVMで動かす環境をdocker-composeで構築してみた</title><link>https://www.yewton.net/2016/02/21/wordpress-http2-hhvm/</link><pubDate>Sun, 21 Feb 2016 22:49:52 +0900</pubDate><guid>https://www.yewton.net/2016/02/21/wordpress-http2-hhvm/</guid><description>&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;p>&lt;a href="https://github.com/yewton/wordpress-nginx-http2-hhvm">このリポジトリ&lt;/a>を &lt;code>clone&lt;/code> して &lt;code>docker-compose up -d&lt;/code> して下さい
(要 &lt;a href="https://github.com/docker/compose/releases/tag/1.6.0">バージョン 1.6.0 以上&lt;/a>)。
その後 &lt;code>open &amp;quot;https://$(docker-machine ip default)&amp;quot;&lt;/code> すると、ブラウザでWordPressが立ち上がります。&lt;/p>
&lt;p>&lt;img src="https://www.yewton.net/img/2016-02-21_224951/wordpress.png" alt="デモ">&lt;/p>
&lt;h2 id="heading">動機&lt;/h2>
&lt;p>WordPressをHHVMで動かしたら超速くなった!やったぜ!!という記事はをよく見るのだけれど、
具体的にどうやって構築しているのか解説している記事があんまり無かったので、実際にやってみることにしました。&lt;/p>
&lt;p>ついでに、HTTP/2で提供出来るとイケてる気がしたので、併せて対応してみることにします。&lt;/p>
&lt;h2 id="hhvm">HHVM&lt;/h2>
&lt;p>&lt;img src="https://www.yewton.net/img/2016-02-21_224951/hugo.png" alt="HHVM">&lt;/p>
&lt;p>&lt;a href="http://hhvm.com/">HHVM&lt;/a>は、Facebookがオープンソースとして開発している仮想実行環境で、
&lt;a href="http://php.net/">PHP&lt;/a>と&lt;a href="http://hacklang.org/">Hack&lt;/a>を動かすための環境らしいです。&lt;/p>
&lt;p>まぁ、個人的にはHackもHHVMも &lt;strong>すごいPHP&lt;/strong> ぐらいの認識しかありませんが…。
Hackは言語的にすごくて、HHVMは実行環境がすごい。今回用があるのはHHVMだけです。&lt;/p>
&lt;h2 id="http2">HTTP/2&lt;/h2>
&lt;p>&lt;a href="https://http2.github.io/">HTTP/2&lt;/a>は… &lt;strong>すごいHTTP&lt;/strong> です。&lt;/p>
&lt;p>HTTP/1.xとの互換性を保ちつつ、効率化したもののようです。ヘッダの圧縮とか、リクエストの多重化とか。
&lt;a href="http://summerwind.jp/docs/rfc7540/">RFC7540 日本語訳&lt;/a>や&lt;a href="http://http2.info/faq.html#who-made-http2">日本語のFAQ&lt;/a>もあります。
自分は全然見てないけれど…必要になったら読みます。&lt;/p>
&lt;p>とにかく、このプロトコルで配信するだけでより効率的でより早くなる、ということです。&lt;/p>
&lt;h3 id="http2-">HTTP/2 の実装&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/">nginx&lt;/a>の1.9.5からHTTP/2をサポートしているようです&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。
&lt;a href="https://hub.docker.com/_/nginx/">公式Dockerリポジトリ&lt;/a>で配信されている最新イメージでもちゃんとサポートされていました。&lt;/p>
&lt;p>他にも&lt;a href="http://httpd.apache.org/">Apache HTTP Server 2.4.17+&lt;/a>や
&lt;a href="http://dena.com/intl/">DeNA&lt;/a>の&lt;a href="https://h2o.examp1e.net/">H2O&lt;/a>など&lt;a href="https://github.com/http2/http2-spec/wiki/Implementations">色々ある&lt;/a>ようです。&lt;/p>
&lt;p>今回はApacheよりは速かろうというのと、WordPress稼動の実例も多いことから、nginxを選択しました。適当。&lt;/p>
&lt;h2 id="heading-1">構成&lt;/h2>
&lt;p>リライトルールとか複雑なリクエスト制御が不要なら、
HHVMに組込みのWebサーバーがあるのでそれを使うのが簡単だし、速度面でも問題なさそうです。&lt;/p>
&lt;p>ただ、WordPressでパーマリンクを利用する場合はURLのリライトが必須です。&lt;/p>
&lt;p>HHVMでもバーチャルホスト切ってリライトの設定するとか出来るみたいですが、
iniファイルに設定書いていくのは何だかしんどそうです。&lt;/p>
&lt;p>他にもSSLとか静的ファイルの配信とか諸々考えると、餅は餅屋ということでリバースプロキシを立てた方がよさそうですね。&lt;/p>
&lt;p>というわけで、リバースプロキシとして nginx を立てて、HHVMをFastCGIモードで起動してバックエンドとします。&lt;/p>
&lt;p>今回はとにかくお手軽に手元で動かしてみたかったので、諸々Dockerで動かすことにしました。
雑に図解すると以下のような感じです:&lt;/p>
&lt;p>&lt;img src="https://www.yewton.net/img/2016-02-21_224951/structure.png" alt="構成図">&lt;/p>
&lt;p>FrontとかBackはDockerの&lt;a href="https://docs.docker.com/engine/userguide/networking/dockernetworks/#user-defined-networks">ユーザー定義ネットワーク&lt;/a>です。
&lt;a href="https://github.com/docker/docker/blob/master/CHANGELOG.md#1100-2016-02-04">Docker 1.10.0&lt;/a>で link に代わるものとして導入されたような気がします。
&lt;code>/etc/hosts&lt;/code> じゃなくてDNSで名前解決出来るようになってて最高にハッピーですね。&lt;/p>
&lt;p>FastCGIはUnixソケットで通信した方が速いと思うんですが、
今回は nginx と HHVM を別々のコンテナで動かすので、TCPで通信するようにしました。
同一システム上にFastCGIサーバとプロセスが稼動するって、実環境でもあんまり無いような気がするけど、どうなんだろう？&lt;/p>
&lt;p>コンテナひとつひとつ立てていくのは辛いので、常套手段の &lt;code>docker-compose&lt;/code> を使って作ります。&lt;/p>
&lt;h2 id="heading-2">動かす&lt;/h2>
&lt;p>&lt;a href="https://github.com/yewton/wordpress-nginx-http2-hhvm">このリポジトリ&lt;/a>に実際に稼動するものが置いてあります。
&lt;code>clone&lt;/code> して &lt;code>docker-compose up -d&lt;/code> すれば、HTTP/2でWordPressが動いている様子が確認出来ます。&lt;/p>
&lt;p>nginxやHHVMの設定はほぼデフォルトのままいじってないので、本気で動かすなら細かいチューニングは必要です。
が、全体の構成は実環境でもこのようになると思います。&lt;/p>
&lt;p>&lt;img src="https://www.yewton.net/img/2016-02-21_224951/wordpress.png" alt="デモ">&lt;/p>
&lt;h2 id="heading-3">終わりに&lt;/h2>
&lt;p>以上で、お手軽に手元でHTTP/2+HHVMなWordPressを試すことが出来るようになりました。&lt;/p>
&lt;p>あとは実環境へのデプロイだけなんですが、さてどうしたものか。
&lt;code>docker-compose.yml&lt;/code> からいい感じにデプロイしてくれるような何か、ありませんかねぇ。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://www.nginx.com/blog/nginx-1-9-5/">HTTP/2 Supported with NGINX Open Source 1.9.5 | NGINX&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>HTTPSに対応してついでにHTTP/2対応された日</title><link>https://www.yewton.net/2016/01/18/diary/</link><pubDate>Mon, 18 Jan 2016 00:06:20 +0900</pubDate><guid>https://www.yewton.net/2016/01/18/diary/</guid><description>&lt;h2 id="https--http2-">HTTPS + HTTP/2 対応&lt;/h2>
&lt;p>世の中的にHTTPS対応してないといかんような気がしたので、
このサイトもHTTPSで配信するように対応した。&lt;/p>
&lt;p>&lt;a href="https://1000ch.net/posts/2015/github-pages-custom-domain-in-https.html">GitHub Pagesに設定しているカスタムドメインをHTTPS対応させる - 1000ch.net&lt;/a>を大いに参考にさせていただいた。
もう本当に書いてある通りにすればいい。 &lt;a href="https://www.cloudflare.com/">CloudFlare&lt;/a> 様々である。&lt;/p>
&lt;p>敢えて付け加えるとしたら、(CloudFlareのサイト上に注記されてはいるけども)Flexible SSLが実際に動くようになるまでは結構時間がかかること。
自分の場合は、都合7〜8時間程度かかった。
この間、ステータスは &lt;code>AUTHORIZING CERTIFICATES&lt;/code> から &lt;code>ISSUING CERTIFICATES&lt;/code> になり、最終的に &lt;code>ACTIVE CERTIFICATE&lt;/code> になった。&lt;/p>
&lt;p>この方法でサイトをHTTPS対応するのは簡単だけども懸念もあるらしい&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>ので、
また今度この辺が実際どういう仕組みで動いてるのか調べてまとめたいと思う。&lt;/p>
&lt;p>なお、CloudFlareを利用することで副次的に HTTP/2 にも対応することになった。
Chromeで &lt;a href="https://chrome.google.com/webstore/detail/http2-and-spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin">HTTP/2 and SPDY indicator&lt;/a>
を入れてアクセスしたりすると分かる。&lt;/p>
&lt;h2 id="ddd">DDD&lt;/h2>
&lt;p>開発チームビルディングの一環で、ドメイン駆動設計について改めて色々調べたりしている。&lt;/p>
&lt;p>図やドキュメントに本質はないとはいえ、ユビキタス言語のサポートとして用語集を作ったり、
深いモデルの洞察のために図が役に立ったりするので、そのへんのサポートツールが欲しくなる。&lt;/p>
&lt;p>色々探してたら&lt;a href="https://skillsmatter.com/skillscasts/6259-ddd-and-microservices-at-last-some-bounderies">エヴァンス先生がマイクロサービスとの関わりについて講習してる動画&lt;/a>があった。
境界づけられたコンテキストはサービスじゃないから、別に実サービスと一対一対応する必要はない。
例えば、複数のコンテキストにまたがってやりとりされるようなあるコンテキストのメッセージがあるなら、
それは Interchange Context (日本語で言うと相互連結コンテキスト？)のように別のコンテキストとして定義すればいいよね、みたいな話があった。&lt;/p>
&lt;p>せっかく内製開発してて、スクラムやってて、物理的にステークホルダー達とも近い距離にいるのだから、
その恩恵を最大限に活かせるようにしたい。
そのためにDDDって実践的に役立つと思うので、もっと勉強しなければ。&lt;/p>
&lt;p>勉強の一環として今度&lt;a href="http://ddd-alliance.connpass.com/event/25209/">DDD Alliance! ドメイン駆動設計のためのオブジェクト指向入門&lt;/a>に行ってみる。
日本でDDDのコミュニティってここくらい？な気がするので、勉強会の内容というよりはコミュニティの様子が気になるので。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://konklone.com/post/github-pages-now-supports-https-so-use-it">GitHub Pages Now (Sorta) Supports HTTPS, So Use It&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>