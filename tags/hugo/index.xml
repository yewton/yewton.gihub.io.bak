<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hugo | yewton.net</title>
    <link>https://www.yewton.net/tags/hugo/</link>
      <atom:link href="https://www.yewton.net/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    <description>hugo</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ja-jp</language><copyright>© 2016-2020 yewton</copyright><lastBuildDate>Thu, 02 Jan 2020 00:00:00 +0900</lastBuildDate>
    <image>
      <url>https://www.yewton.net/img/icon.png</url>
      <title>hugo</title>
      <link>https://www.yewton.net/tags/hugo/</link>
    </image>
    
    <item>
      <title>久々の更新</title>
      <link>https://www.yewton.net/2020/01/02/happy-new-year/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0900</pubDate>
      <guid>https://www.yewton.net/2020/01/02/happy-new-year/</guid>
      <description>&lt;p&gt;最近仕事用のmacを新調して環境を作り直す機会があったことと、 2020 年が始まるということもあり、久々にサイトを更新することにした。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.yewton.net/cv/&#34;&gt;オープン職務経歴書&lt;/a&gt;を書きたかった、というのもある。&lt;/p&gt;
&lt;p&gt;更新にあたっていくつか困難があった。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;まず、このサイトのソースが最近の Hugo では動かせなくなっていた。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;このサイトのテーマには &lt;a href=&#34;https://github.com/digitalcraftsman/hugo-icarus-theme&#34;&gt;Icarus&lt;/a&gt; を使わせていただいているのだが、最終更新が 2017 年となっており、
Hugo 0.55.0 以降で動かなくなってしまっていたり、 Deprecated Warning が出るようになっていた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/digitalcraftsman/hugo-icarus-theme/pull/124&#34;&gt;PRは出されている&lt;/a&gt; のだけれど、マージされる様子が無い。&lt;/p&gt;
&lt;p&gt;そもそも、当時のバージョンに対してカスタマイズしたレイアウトを作ってしまったので、
単純なテーマの更新だけでは追随できない。&lt;/p&gt;
&lt;p&gt;どのバージョンなら動くのか突き止めるのも骨が折れた。
&lt;a href=&#34;https://bitbucket.org/mgladdish/asdf-gohugo&#34;&gt;asdf-gohugo&lt;/a&gt; を入れて、少しずつバージョンを上げながら確認していった。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;asdf plugin add hugo https://bitbucket.org/mgladdish/asdf-gohugo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;そして、そもそも Hugo の使い方を忘れていた。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.yewton.net/2016/02/02/blog-with-hugo/&#34;&gt;Hugo 導入記事&lt;/a&gt; や &lt;a href=&#34;https://www.yewton.net/2016/01/26/hugo-el/&#34;&gt;Hugo 用 Emacs ライブラリ&lt;/a&gt; を書いておいてなんだが、当時から3年も経ってほとんど忘れてしまっていた。&lt;/p&gt;
&lt;p&gt;そこで改めて調べてみると、イマドキは org-mode で書くことも出来るらしい。&lt;/p&gt;
&lt;p&gt;この3年ですっかり org-mode 無しでは生きられない体になってしまっていたし、
せっかくなので本記事からは &lt;a href=&#34;https://ox-hugo.scripter.co/&#34;&gt;ox-hugo&lt;/a&gt; を使って書くことにする。&lt;/p&gt;
&lt;p&gt;使い始めるにあたって色々調べたり考えたりすることも多かったので、そのうち記事にしようと思う。
結論としては、org-mode と Hugo の組み合わせは最高だし、その橋渡しをしてくれる &lt;a href=&#34;https://ox-hugo.scripter.co/&#34;&gt;ox-hugo&lt;/a&gt; は本当にグッジョブだということ。&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;そんなこんなで色々対応していたものの、デプロイする仕組みなどは当時と変わりなく動いたのでその点は助かった。&lt;/p&gt;
&lt;p&gt;org-mode で書けるようになったことだし、少しは記事を書いていきたい所だが、まずは Hugo の最新版に追従する作業が待っている…。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo &#43; GitHub Pages でお手軽にブログを始めよう</title>
      <link>https://www.yewton.net/2016/02/02/blog-with-hugo/</link>
      <pubDate>Tue, 02 Feb 2016 18:44:21 +0900</pubDate>
      <guid>https://www.yewton.net/2016/02/02/blog-with-hugo/</guid>
      <description>&lt;h2 id=&#34;heading&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;この記事は「いい感じのブログを無料で手軽に作れないかなー」、と思っている人が主な対象です。&lt;/p&gt;
&lt;p&gt;〈いい感じ〉というのが抽象的ですが、以下のような欲求をイメージしています:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.staticgen.com/&#34;&gt;Top Open-Source Static Site Generators - StaticGen&lt;/a&gt; にあるような静的サイトジェネレータがいい&lt;/li&gt;
&lt;li&gt;サイト生成は速ければ速いほどいい&lt;/li&gt;
&lt;li&gt;モダンでレスポンシブルなのがいい&lt;/li&gt;
&lt;li&gt;記事を書いたら即確認出来るのがいい&lt;/li&gt;
&lt;li&gt;GitHub Pagesに簡単にデプロイ出来るのがいい&lt;/li&gt;
&lt;li&gt;独自ドメインは使いたい&lt;/li&gt;
&lt;li&gt;ブログにありがちなコメント機能とかアクセス解析とかが出来るといい&lt;/li&gt;
&lt;li&gt;HTTPSなのがいい&lt;/li&gt;
&lt;li&gt;HTTP/2なのがいい&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;サイトの方式を考える&lt;/h2&gt;
&lt;p&gt;手軽に始めたいので、準備はなるべく少ない方が嬉しいですね。&lt;/p&gt;
&lt;p&gt;WordPress みたいな動的な方式はサーバを用意しないといけないので手間ですし、場合によっては金もかかります。&lt;/p&gt;
&lt;p&gt;一方の静的サイト配信であれば、必要なのは HTML を配信出来る場所だけです。
GitHub Pages や類似のサービスを使えば無料で利用できますね。&lt;/p&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;静的サイトジェネレータを選ぶ&lt;/h2&gt;
&lt;p&gt;というわけで静的サイトを作成するためのジェネレータを選びます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.staticgen.com/&#34;&gt;Top Open-Source Static Site Generators - StaticGen&lt;/a&gt; の中から適当に選びましょう。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; や &lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt; はメジャーっぽいですが検索してみると、何だか遅いみたいです(使ったことない)。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.gitbook.com/&#34;&gt;GitBook&lt;/a&gt; はドキュメントを書くのには向いています(自分も利用しています)。ですがブログを書くためのものではありません。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://hexo.io/&#34;&gt;Hexo&lt;/a&gt; か &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; あたりがよさそうです。
これら二つはコンセプトもよく似ているし、最早好みの世界ですね。自分は何となく Hugo を使っています。&lt;/p&gt;
&lt;h2 id=&#34;hugo&#34;&gt;Hugo&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://www.yewton.net/img/2016-01-11_184419/hugo.png&#34; alt=&#34;Hugoのロゴ&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; は超高速でシンプルかつ柔軟な静的サイトジェネレータだそうです。
Go言語で書かれていて、インストールはとってもカンタン。すぐに使えます。&lt;/p&gt;
&lt;p&gt;使い方もとってもカンタン…というワケではないかもしれません。
といっても、それは Hugo が殊更難しいというワケではなく、
そもそも静的サイトジェネレーターというモノを理解している必要がある、ということだと思います。&lt;/p&gt;
&lt;p&gt;ブログを書く、ということだけに目的を絞れば、覚える必要がある用語は
&lt;em&gt;Content&lt;/em&gt;, &lt;em&gt;Themes&lt;/em&gt;, &lt;em&gt;Taxonomies&lt;/em&gt; の3つだけです。&lt;/p&gt;
&lt;h3 id=&#34;content&#34;&gt;Content&lt;/h3&gt;
&lt;p&gt;ブログで言えば記事のことです。&lt;/p&gt;
&lt;p&gt;Content がどのように表示されるかは使用しているテーマによりますが、
ブログ用テーマのほとんどは &lt;code&gt;post&lt;/code&gt; ディレクトリ以下にあるファイルを記事として扱うようです。&lt;/p&gt;
&lt;h3 id=&#34;themes&#34;&gt;Themes&lt;/h3&gt;
&lt;p&gt;そのまま、サイトに適用するテーマです。&lt;/p&gt;
&lt;p&gt;Hugoの場合、テーマはそのサイトの構成まで決めてしまいます。
独自にテンプレートを書くことでカスタマイズ出来るとはいえ、目的に沿ったテーマを選択するのが無難です。&lt;/p&gt;
&lt;p&gt;テーマ選択の方法については後述します。&lt;/p&gt;
&lt;h3 id=&#34;taxonomies&#34;&gt;Taxonomies&lt;/h3&gt;
&lt;p&gt;やけに難しい単語ですが、分類方法のことです。
ブログなら &lt;strong&gt;カテゴリ&lt;/strong&gt; や &lt;strong&gt;タグ&lt;/strong&gt; といった類のものです。&lt;/p&gt;
&lt;p&gt;幸い、カテゴリとタグによる基本的な分類であればデフォルトで対応しているため、あまり意識する必要はありません。
カテゴリやタグのことを Taxonomies と呼ぶことだけ押さえておけばOKです。&lt;/p&gt;
&lt;h2 id=&#34;heading-3&#34;&gt;サイトを作る&lt;/h2&gt;
&lt;p&gt;早速サイトを作っていきましょう。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;Hugo - Hugo Quickstart Guide&lt;/a&gt; に従えば基本的に迷うことは無いと思います。
ここでは、適当にサイトを作って、ひとつ記事を書いてみて、それがブラウザで確認出来るようになれば大丈夫です。&lt;/p&gt;
&lt;p&gt;ただし、 &lt;strong&gt;日本語に対応させる設定は追加で必要&lt;/strong&gt; です。&lt;/p&gt;
&lt;h3 id=&#34;heading-4&#34;&gt;日本語対応&lt;/h3&gt;
&lt;p&gt;ありがたいことに、Hugoは日本語や中国語の為の特別な設定を用意してくれています。
設定ファイルに &lt;code&gt;hasCJKLanguage = true&lt;/code&gt; という行を追加しましょう。&lt;/p&gt;
&lt;p&gt;これをやらないと、一覧用に記事を自動で切り詰めてくれる機能や、
読み終えるまでの予想時間の計算が滅茶苦茶になってしまいます。&lt;/p&gt;
&lt;h2 id=&#34;heading-5&#34;&gt;テーマを決める&lt;/h2&gt;
&lt;p&gt;次はサイトに適用するテーマを選択しましょう。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;Hugo Themes Site&lt;/a&gt; で実際の例を見ながらテーマを選ぶことが出来ます。
ブログ用のテーマのみに絞って見たい場合は &lt;a href=&#34;http://themes.gohugo.io/tags/blog&#34;&gt;こちら&lt;/a&gt; からどうぞ。&lt;/p&gt;
&lt;p&gt;注意点として、Hugoには記事を読み終えるまでの時間やおおよその文字数を表示する機能が組込まれているのですが、テーマがサポートしていない場合は表示されません。
このような機能を使いたい場合は、テーマでサポートされているかを確認しましょう。&lt;/p&gt;
&lt;p&gt;このサイトは &lt;a href=&#34;http://themes.gohugo.io/hugo-icarus/&#34;&gt;Icarus&lt;/a&gt; を使っています。
ショーケースの中では使える機能が一番多いと思うので、どういうことが出来るのか知るには丁度よいテーマだと思います。&lt;/p&gt;
&lt;h2 id=&#34;favicon-&#34;&gt;favicon を置こう&lt;/h2&gt;
&lt;p&gt;デフォルトでは Hugo の favicon が表示されてしまうので、カスタマイズしましょう。
&lt;a href=&#34;http://www.favicon-generator.org/&#34;&gt;Favicon &amp;amp; App Icon Generator&lt;/a&gt; などを使うとよいです。&lt;/p&gt;
&lt;p&gt;生成した &lt;code&gt;.ico&lt;/code&gt; ファイルを &lt;code&gt;static&lt;/code&gt; 直下に配置すればOKです。&lt;/p&gt;
&lt;h2 id=&#34;heading-6&#34;&gt;記事を書く&lt;/h2&gt;
&lt;p&gt;記事はMarkdownで書きます。&lt;/p&gt;
&lt;p&gt;ここで困るのは、Markdownにもいくつか方言があることです。
何を参考に書けばいいか迷ってしまいますね。&lt;/p&gt;
&lt;p&gt;HugoではMarkdownの処理に &lt;a href=&#34;https://github.com/russross/blackfriday&#34;&gt;russross/blackfriday: Blackfriday: a markdown processor for Go&lt;/a&gt; を使っています。
Blackfriday特有の書式(脚注など)もある為、こちらを参照しながら書くとよいでしょう。&lt;/p&gt;
&lt;h3 id=&#34;heading-7&#34;&gt;記事のファイル名について&lt;/h3&gt;
&lt;p&gt;日記や思い付きで即興で記事を書く場合、いちいち被らないようにファイル名を考えるのは面倒ですよね。&lt;/p&gt;
&lt;p&gt;Hugoの場合ファイル名は管理上の問題でしかないので、適当に日付やタイムスタンプでも入れておけばよいです。
デフォルトではファイル名がURLに使われますが、記事毎の設定で &lt;code&gt;slug = &amp;quot;hogehoge&amp;quot;&lt;/code&gt; のように設定しておけば、
実際のURLは &lt;code&gt;/post/hogehoge&lt;/code&gt; のようになります。&lt;/p&gt;
&lt;p&gt;また、以下のように設定ファイルに書いておけば、年月日がURLのプレフィクスに付くので被る心配もありません:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[permalinks]
    post = &amp;quot;/:year/:month/:day/:slug&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;heading-8&#34;&gt;コメント対応&lt;/h2&gt;
&lt;p&gt;なんとなくコメント欄があるとオープンな感じでいいですよね？
ということでコメントにも対応させてみましょう。&lt;/p&gt;
&lt;p&gt;Hugo自身が&lt;a href=&#34;https://github.com/spf13/hugo/blob/cd36d752a3e8e2b75965fe281e6466d7a274cd94/tpl/template_embedded.go#L131-L145&#34;&gt;Disqusに対応している&lt;/a&gt;ので、
&lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt;を使いましょう。
ただし、Disqusによるコメント対応も、テーマによってはサポートされていない場合があるので要注意です。&lt;/p&gt;
&lt;p&gt;何よりもまず Disqus への登録です。
&lt;a href=&#34;https://help.disqus.com/customer/portal/articles/466182-publisher-quick-start-guide&#34;&gt;ヘルプ&lt;/a&gt;を見ながら行いましょう。
設定は特に必要ありませんので登録だけ済ませれば一旦OKです。後から言語設定を日本語にしたりすることも出来ます。&lt;/p&gt;
&lt;p&gt;登録が完了したら、登録時に入力した shortname (unique Disqus URL) を以下のように設定に追記しましょう:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;disqusShortname = &amp;quot;sitename&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これだけでHugoの設定は完了です。(テーマが対応していれば)個別の記事ページにコメント欄が出現します。&lt;/p&gt;
&lt;h2 id=&#34;heading-9&#34;&gt;デプロイ&lt;/h2&gt;
&lt;p&gt;生成したブログは GitHub Pages でホスティングします。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gh-pages&lt;/code&gt; ではなく、ユーザや Organization のページとして公開する場合は、
&lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/#hosting-personal-organization-pages&#34;&gt;Hosting Personal/Organization Pages&lt;/a&gt;に
何も考えずに従えばOKです。
例示されているスクリプトもそのままコピペで使えます。&lt;/p&gt;
&lt;p&gt;実際にこのブログで使われているモノは全て&lt;a href=&#34;https://github.com/yewton/yewton-hugo&#34;&gt;こちら&lt;/a&gt;にあるので参考にしてください。&lt;/p&gt;
&lt;h2 id=&#34;heading-10&#34;&gt;独自ドメイン対応&lt;/h2&gt;
&lt;p&gt;github.com ドメインでホスティングするだけでよければ、ここから先の作業は不要です。おめでとうございます。&lt;/p&gt;
&lt;p&gt;以降はHugoとは関係ない話が続きます。&lt;/p&gt;
&lt;p&gt;既に独自ドメインを持っていて、それをブログでも使いたい場合は、
&lt;a href=&#34;https://help.github.com/articles/adding-a-cname-file-to-your-repository/&#34;&gt;CNAME&lt;/a&gt;の設定をGitHub上で行う必要があります。
&lt;a href=&#34;https://github.com/yewton/yewton.github.io/blob/master/CNAME&#34;&gt;こんなファイル&lt;/a&gt;を作ってあげて、
DNSレジストラ側で &lt;code&gt;CNAME&lt;/code&gt; とか &lt;code&gt;ANAME&lt;/code&gt; の設定を行ないます。&lt;/p&gt;
&lt;h3 id=&#34;-vs-&#34;&gt;サブドメイン vs ルートドメイン&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CNAME&lt;/code&gt; の設定をするか &lt;code&gt;ANAME&lt;/code&gt; の設定をするかは、サブドメインを使うかルートドメインを使うかの違いです。
GitHubのヘルプによると、&lt;a href=&#34;https://help.github.com/articles/about-custom-domains-for-github-pages-sites/#subdomains&#34;&gt;サブドメインを強く推奨している&lt;/a&gt;そうです。&lt;/p&gt;
&lt;p&gt;サブドメインを推奨する理由は以下のようです:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHubのCDNの恩恵を受けられる&lt;/li&gt;
&lt;li&gt;GitHub自体のIPアドレス変更に影響を受けない&lt;/li&gt;
&lt;li&gt;DoS対策がより効率的になるのでページロードが高速になる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;というわけで、特別な事情がない限りはサブドメインを利用するのがよいでしょう&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2 id=&#34;https&#34;&gt;HTTPS化&lt;/h2&gt;
&lt;p&gt;ここまででブログとしての体裁は整いました。
ですが、折角つくったサイトですからHTTPSで配信したいですよね？しましょう。&lt;/p&gt;
&lt;p&gt;これには&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;CloudFlare&lt;/a&gt;を利用出来ます。
&lt;a href=&#34;https://1000ch.net/posts/2015/github-pages-custom-domain-in-https.html&#34;&gt;GitHub Pagesに設定しているカスタムドメインをHTTPS対応させる - 1000ch.net&lt;/a&gt;が非常に参考になります。&lt;/p&gt;
&lt;p&gt;設定が反映されるまでは最長1日程度かかりますので、ゆっくりと待ちましょう。&lt;/p&gt;
&lt;p&gt;なおCloudFlareを利用すると、ついでに HTTP/2 も有効になります。
他にもJSの軽量化などの各種高速化の設定を利用出来ますので、設定項目を見てみるのもよいでしょう。&lt;/p&gt;
&lt;h3 id=&#34;heading-11&#34;&gt;注意&lt;/h3&gt;
&lt;p&gt;注意点として、この際に Flexible SSL を用いる場合は、あくまでユーザとCloudFlare間の通信が暗号化されるだけで、 &lt;strong&gt;CloudFlareとGitHub Pages間の通信は暗号化されていません&lt;/strong&gt; 。
後者の間の通信は改竄されうる状態で、かつ、ユーザはそれを知る術が無いという状態に…。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://konklone.com/post/github-pages-now-supports-https-so-use-it&#34;&gt;GitHub Pages Now (Sorta) Supports HTTPS, So Use It&lt;/a&gt;に詳しく書かれていますが、
一応そういう状態であるということは認識しておきましょう。&lt;/p&gt;
&lt;h2 id=&#34;heading-12&#34;&gt;終わりに&lt;/h2&gt;
&lt;p&gt;いい感じのブログを無料で手軽に作る方法についてまとめました。
改めてまとめてみるとそれなりにボリュームがあってちょっと大変でした…。&lt;/p&gt;
&lt;p&gt;これからブログを始めるぞーと思っている誰かの役に立てばいいなーと思います。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;こう書いている自分も、最初は特に気にせずにルートドメインで登録してしまっていました。この記事を書きながら気づいて、慌てて &lt;code&gt;www&lt;/code&gt; サブドメインに移行しました。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>hugo.elを書いた</title>
      <link>https://www.yewton.net/2016/01/26/hugo-el/</link>
      <pubDate>Tue, 26 Jan 2016 23:25:40 +0900</pubDate>
      <guid>https://www.yewton.net/2016/01/26/hugo-el/</guid>
      <description>&lt;h2 id=&#34;heading&#34;&gt;#とは&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yewton/hugo.el&#34;&gt;hugo.el&lt;/a&gt;は、Hugoでサイト作成する際に便利な関数群を定義したパッケージ。
&lt;a href=&#34;https://marmalade-repo.org/&#34;&gt;marmalade-repo&lt;/a&gt;で公開されているので、パッケージの設定をすれば簡単にインストール出来るハズ。&lt;/p&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;作った動機&lt;/h2&gt;
&lt;p&gt;何か〈物を書く〉という作業をする時、自分はEmacsを使っていて、可能な限りEmacsの中から出たくない。
HugoはCLIのインタフェースなので、ターミナルとEmacsを行き来することになってしまうのは辛い。&lt;/p&gt;
&lt;p&gt;あと色んなテーマを試したい時に、いちいちテーマ名をコピペする必要があり、辛かった。
一覧の中からhelmで選択したかった。&lt;/p&gt;
&lt;p&gt;…というように、Emacsの中で色々作業が完結するようにしたかった。&lt;/p&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;作ってみて&lt;/h2&gt;
&lt;p&gt;正直テーマのインストール補助機能はHugoを初めて触って、色々試してみたいフェーズでしか使わないので、
ほとんどの場合大した価値じゃないかもしれない。&lt;/p&gt;
&lt;p&gt;個人的には、 &lt;code&gt;hugo-new-content&lt;/code&gt; と、 &lt;code&gt;hugo-start-server&lt;/code&gt;, &lt;code&gt;hugo-open-browser&lt;/code&gt; が中々便利だなーと思って使っている。
適当に記事を書き始められるし、プレビューするためにターミナルで確認したアドレスをブラウザに打ち込むとかやらなくてよいので。&lt;/p&gt;
&lt;p&gt;書き終えたあとに &lt;code&gt;hugo-deploy&lt;/code&gt; でひょいっと公開出来るのも地味に便利。
ただ、デプロイスクリプトを呼び出してるだけなんだけどね…。&lt;/p&gt;
&lt;p&gt;普段Emacsで物書きをするひとで、Hugoでブログ書こうと思う人は是非便利に使ってもらいたい。
そんな人あんまりいなさそうだけど…。&lt;/p&gt;
&lt;h2 id=&#34;todo&#34;&gt;TODO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hugo-open-browser&lt;/code&gt; で今開いているcontentを直接開けたらより便利かもしれない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hugo-deploy&lt;/code&gt; が同期処理になってて固まるので、非同期にする&lt;/li&gt;
&lt;li&gt;テスト全然書いてないので、テストを書いてバッジをつけて喜ぶ&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>忙し過ぎてお弁当も食べられなかった日</title>
      <link>https://www.yewton.net/2016/01/15/diary/</link>
      <pubDate>Fri, 15 Jan 2016 23:00:00 +0900</pubDate>
      <guid>https://www.yewton.net/2016/01/15/diary/</guid>
      <description>&lt;p&gt;最近チームが新体制に移行するという時期で色々バタバタしていて、
立ち上げに伴う開発フローの整備とか、JIRA(プロジェクト管理ツール)の設定とか、
ワーキングアグリーメントの検討とかで、頓に忙しい。&lt;/p&gt;
&lt;p&gt;別に、自分の役割はスクラムマスターではなく、いちメンバーに過ぎないのだけれど、
認定スクラムマスターを取得した身としては色々手を焼かずにはいられず、
色んな雑務を買って出ているという状況。&lt;/p&gt;
&lt;p&gt;それもこれも、スプリント中は〈全力疾走〉するのがスクラムである、
というスクラムのあるべき姿を目指して、自分が全力で開発に打ち込めるようにするため。&lt;/p&gt;
&lt;p&gt;…と思ってたけど、最近は &lt;em&gt;チームのパフォーマンスを引き出す&lt;/em&gt; っていうことに全力になっていて、
それはそれで楽しくなってきたので、スクラムマスターもいいかなー、なんて思い始めた。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;サイト改修&lt;/h2&gt;
&lt;p&gt;今日もサイトいじりに勤しんだ。&lt;/p&gt;
&lt;p&gt;いじるときはEmacsを使うんだけれど、自分は適当なのでHTML中にJavaScriptを埋め込んだりする。
するとhtml-modeだとシンタックハイライトとかが無くて辛いことになるので、
&lt;a href=&#34;http://web-mode.org/&#34;&gt;web-mode&lt;/a&gt;を使ってる。&lt;/p&gt;
&lt;p&gt;HTMLファイルはCSSファイルは、始めから関連付けておくといいと思う。&lt;/p&gt;
&lt;h3 id=&#34;gravatar&#34;&gt;gravatar対応&lt;/h3&gt;
&lt;p&gt;静的画像だけでなく、gravatarのアイコンを使えるようにした。&lt;/p&gt;
&lt;p&gt;ついでに、画像を丸く表示するようにした。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cxfksword/greyshade/blob/28fb061bb674a2add89724dfbbf167f88f381d40/layouts/partials/header.html&#34;&gt;gravatarに対応している他のテーマ(greyshade)&lt;/a&gt;と、
&lt;a href=&#34;http://tdwp.us/round-gravatar-images-wordpress/&#34;&gt;How to Round Gravatar Images in WordPress&lt;/a&gt;を参考にした。&lt;/p&gt;
&lt;h3 id=&#34;heading-1&#34;&gt;記念日対応&lt;/h3&gt;
&lt;p&gt;最初は&lt;a href=&#34;http://counting.hatelabo.jp/&#34;&gt;Hatena::Counting&lt;/a&gt;とか類似のサービスを利用しようと思ったんだけど、
あんまりシンプルなのが無かったので自作した。&lt;/p&gt;
&lt;p&gt;自作といったって、&lt;a href=&#34;http://momentjs.com/&#34;&gt;Moment.js&lt;/a&gt;というとても便利なライブラリがあったので、
それを使って適当にJavaScriptを埋め込んだだけ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/text/template/&#34;&gt;template - The Go Programming Language&lt;/a&gt;とか
&lt;a href=&#34;https://gohugo.io/templates/go-templates/&#34;&gt;Hugo - Go Template Primer&lt;/a&gt;あたりも参考にした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>はじめに</title>
      <link>https://www.yewton.net/2016/01/11/at-the-start/</link>
      <pubDate>Mon, 11 Jan 2016 11:11:11 +0900</pubDate>
      <guid>https://www.yewton.net/2016/01/11/at-the-start/</guid>
      <description>&lt;h2 id=&#34;heading&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;今年30歳になる節目の年なので、ブログを書いてみることにした。&lt;/p&gt;
&lt;p&gt;何もこういう試みは初めてではなく、
これまでも、&lt;a href=&#34;http://d.hatena.ne.jp/yuto_sasaki/&#34;&gt;はてなダイアリー&lt;/a&gt;だったり、
&lt;a href=&#34;http://qiita.com/yewton&#34;&gt;Qiita&lt;/a&gt;だったりに断続的に記事を書いたりメモしたりしていた。&lt;/p&gt;
&lt;p&gt;それより以前も、個人でサイト作成したり、既存のブログサービスを使っていたこともあった。&lt;/p&gt;
&lt;p&gt;いずれも、1年と経たずに辞めてしまった。
自分の凝り性でかつ飽きっぽい性質のためだと思う。&lt;/p&gt;
&lt;p&gt;今回また性懲りもなく始めたのは、何かをアウトプットしたいというよりも、
&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;というものを何かのキッカケで知って、
Golangの静的サイト生成ツールだと知り、イマドキは静的サイト生成だよねー
という巷の声を聞いた結果、使ってみたくなった、というのが大きい。&lt;/p&gt;
&lt;p&gt;飽きたらその内また辞めるだろうけれど、
今のところ調整したりカスタマイズしたりしたい部分が多々あるので、当面存在はするだろう。
これらの試みを記事にしたりするかもしれない。&lt;/p&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;何を書くか&lt;/h2&gt;
&lt;p&gt;外部サービスに依存しないので(ホスティングはGitHub使ってるケド)自由奔放に書いていけたらと思っている。&lt;/p&gt;
&lt;p&gt;技術的な話から、日常の駄文、過去の思い出を振り返ってみたり、
あとはペットの話も書くかもしれない。時にはポエムも書くだろう。&lt;/p&gt;
&lt;p&gt;当分人の目に触れぬはずの所なので、好き勝手にやってみよう。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
