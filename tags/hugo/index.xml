<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hugo | yewton.net</title><link>https://www.yewton.net/tags/hugo/</link><atom:link href="https://www.yewton.net/tags/hugo/index.xml" rel="self" type="application/rss+xml"/><description>hugo</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ja-jp</language><copyright>© 2016-2020 yewton</copyright><lastBuildDate>Thu, 02 Jan 2020 00:00:00 +0900</lastBuildDate><image><url>https://www.yewton.net/img/icon.png</url><title>hugo</title><link>https://www.yewton.net/tags/hugo/</link></image><item><title>久々の更新</title><link>https://www.yewton.net/2020/01/02/happy-new-year/</link><pubDate>Thu, 02 Jan 2020 00:00:00 +0900</pubDate><guid>https://www.yewton.net/2020/01/02/happy-new-year/</guid><description>&lt;p>最近仕事用のmacを新調して環境を作り直す機会があったことと、 2020 年が始まるということもあり、久々にサイトを更新することにした。&lt;/p>
&lt;p>&lt;a href="https://www.yewton.net/cv/">オープン職務経歴書&lt;/a>を書きたかった、というのもある。&lt;/p>
&lt;p>更新にあたっていくつか困難があった。&lt;/p>
&lt;p>&lt;strong>まず、このサイトのソースが最近の Hugo では動かせなくなっていた。&lt;/strong>&lt;/p>
&lt;p>このサイトのテーマには &lt;a href="https://github.com/digitalcraftsman/hugo-icarus-theme">Icarus&lt;/a> を使わせていただいているのだが、最終更新が 2017 年となっており、
Hugo 0.55.0 以降で動かなくなってしまっていたり、 Deprecated Warning が出るようになっていた。&lt;/p>
&lt;p>&lt;a href="https://github.com/digitalcraftsman/hugo-icarus-theme/pull/124">PRは出されている&lt;/a> のだけれど、マージされる様子が無い。&lt;/p>
&lt;p>そもそも、当時のバージョンに対してカスタマイズしたレイアウトを作ってしまったので、
単純なテーマの更新だけでは追随できない。&lt;/p>
&lt;p>どのバージョンなら動くのか突き止めるのも骨が折れた。
&lt;a href="https://bitbucket.org/mgladdish/asdf-gohugo">asdf-gohugo&lt;/a> を入れて、少しずつバージョンを上げながら確認していった。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">asdf plugin add hugo https://bitbucket.org/mgladdish/asdf-gohugo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>そして、そもそも Hugo の使い方を忘れていた。&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://www.yewton.net/2016/02/02/blog-with-hugo/">Hugo 導入記事&lt;/a> や &lt;a href="https://www.yewton.net/2016/01/26/hugo-el/">Hugo 用 Emacs ライブラリ&lt;/a> を書いておいてなんだが、当時から3年も経ってほとんど忘れてしまっていた。&lt;/p>
&lt;p>そこで改めて調べてみると、イマドキは org-mode で書くことも出来るらしい。&lt;/p>
&lt;p>この3年ですっかり org-mode 無しでは生きられない体になってしまっていたし、
せっかくなので本記事からは &lt;a href="https://ox-hugo.scripter.co/">ox-hugo&lt;/a> を使って書くことにする。&lt;/p>
&lt;p>使い始めるにあたって色々調べたり考えたりすることも多かったので、そのうち記事にしようと思う。
結論としては、org-mode と Hugo の組み合わせは最高だし、その橋渡しをしてくれる &lt;a href="https://ox-hugo.scripter.co/">ox-hugo&lt;/a> は本当にグッジョブだということ。&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;p>そんなこんなで色々対応していたものの、デプロイする仕組みなどは当時と変わりなく動いたのでその点は助かった。&lt;/p>
&lt;p>org-mode で書けるようになったことだし、少しは記事を書いていきたい所だが、まずは Hugo の最新版に追従する作業が待っている…。&lt;/p></description></item><item><title>Hugo + GitHub Pages でお手軽にブログを始めよう</title><link>https://www.yewton.net/2016/02/02/blog-with-hugo/</link><pubDate>Tue, 02 Feb 2016 18:44:21 +0900</pubDate><guid>https://www.yewton.net/2016/02/02/blog-with-hugo/</guid><description>&lt;h2 id="heading">はじめに&lt;/h2>
&lt;p>この記事は「いい感じのブログを無料で手軽に作れないかなー」、と思っている人が主な対象です。&lt;/p>
&lt;p>〈いい感じ〉というのが抽象的ですが、以下のような欲求をイメージしています:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.staticgen.com/">Top Open-Source Static Site Generators - StaticGen&lt;/a> にあるような静的サイトジェネレータがいい&lt;/li>
&lt;li>サイト生成は速ければ速いほどいい&lt;/li>
&lt;li>モダンでレスポンシブルなのがいい&lt;/li>
&lt;li>記事を書いたら即確認出来るのがいい&lt;/li>
&lt;li>GitHub Pagesに簡単にデプロイ出来るのがいい&lt;/li>
&lt;li>独自ドメインは使いたい&lt;/li>
&lt;li>ブログにありがちなコメント機能とかアクセス解析とかが出来るといい&lt;/li>
&lt;li>HTTPSなのがいい&lt;/li>
&lt;li>HTTP/2なのがいい&lt;/li>
&lt;/ul>
&lt;h2 id="heading-1">サイトの方式を考える&lt;/h2>
&lt;p>手軽に始めたいので、準備はなるべく少ない方が嬉しいですね。&lt;/p>
&lt;p>WordPress みたいな動的な方式はサーバを用意しないといけないので手間ですし、場合によっては金もかかります。&lt;/p>
&lt;p>一方の静的サイト配信であれば、必要なのは HTML を配信出来る場所だけです。
GitHub Pages や類似のサービスを使えば無料で利用できますね。&lt;/p>
&lt;h2 id="heading-2">静的サイトジェネレータを選ぶ&lt;/h2>
&lt;p>というわけで静的サイトを作成するためのジェネレータを選びます。&lt;/p>
&lt;p>&lt;a href="https://www.staticgen.com/">Top Open-Source Static Site Generators - StaticGen&lt;/a> の中から適当に選びましょう。&lt;/p>
&lt;p>&lt;a href="http://jekyllrb.com/">Jekyll&lt;/a> や &lt;a href="http://octopress.org/">Octopress&lt;/a> はメジャーっぽいですが検索してみると、何だか遅いみたいです(使ったことない)。&lt;/p>
&lt;p>&lt;a href="https://www.gitbook.com/">GitBook&lt;/a> はドキュメントを書くのには向いています(自分も利用しています)。ですがブログを書くためのものではありません。&lt;/p>
&lt;p>&lt;a href="http://hexo.io/">Hexo&lt;/a> か &lt;a href="http://gohugo.io/">Hugo&lt;/a> あたりがよさそうです。
これら二つはコンセプトもよく似ているし、最早好みの世界ですね。自分は何となく Hugo を使っています。&lt;/p>
&lt;h2 id="hugo">Hugo&lt;/h2>
&lt;p>&lt;img src="https://www.yewton.net/img/2016-01-11_184419/hugo.png" alt="Hugoのロゴ">&lt;/p>
&lt;p>&lt;a href="http://gohugo.io/">Hugo&lt;/a> は超高速でシンプルかつ柔軟な静的サイトジェネレータだそうです。
Go言語で書かれていて、インストールはとってもカンタン。すぐに使えます。&lt;/p>
&lt;p>使い方もとってもカンタン…というワケではないかもしれません。
といっても、それは Hugo が殊更難しいというワケではなく、
そもそも静的サイトジェネレーターというモノを理解している必要がある、ということだと思います。&lt;/p>
&lt;p>ブログを書く、ということだけに目的を絞れば、覚える必要がある用語は
&lt;em>Content&lt;/em>, &lt;em>Themes&lt;/em>, &lt;em>Taxonomies&lt;/em> の3つだけです。&lt;/p>
&lt;h3 id="content">Content&lt;/h3>
&lt;p>ブログで言えば記事のことです。&lt;/p>
&lt;p>Content がどのように表示されるかは使用しているテーマによりますが、
ブログ用テーマのほとんどは &lt;code>post&lt;/code> ディレクトリ以下にあるファイルを記事として扱うようです。&lt;/p>
&lt;h3 id="themes">Themes&lt;/h3>
&lt;p>そのまま、サイトに適用するテーマです。&lt;/p>
&lt;p>Hugoの場合、テーマはそのサイトの構成まで決めてしまいます。
独自にテンプレートを書くことでカスタマイズ出来るとはいえ、目的に沿ったテーマを選択するのが無難です。&lt;/p>
&lt;p>テーマ選択の方法については後述します。&lt;/p>
&lt;h3 id="taxonomies">Taxonomies&lt;/h3>
&lt;p>やけに難しい単語ですが、分類方法のことです。
ブログなら &lt;strong>カテゴリ&lt;/strong> や &lt;strong>タグ&lt;/strong> といった類のものです。&lt;/p>
&lt;p>幸い、カテゴリとタグによる基本的な分類であればデフォルトで対応しているため、あまり意識する必要はありません。
カテゴリやタグのことを Taxonomies と呼ぶことだけ押さえておけばOKです。&lt;/p>
&lt;h2 id="heading-3">サイトを作る&lt;/h2>
&lt;p>早速サイトを作っていきましょう。&lt;/p>
&lt;p>&lt;a href="http://gohugo.io/overview/quickstart/">Hugo - Hugo Quickstart Guide&lt;/a> に従えば基本的に迷うことは無いと思います。
ここでは、適当にサイトを作って、ひとつ記事を書いてみて、それがブラウザで確認出来るようになれば大丈夫です。&lt;/p>
&lt;p>ただし、 &lt;strong>日本語に対応させる設定は追加で必要&lt;/strong> です。&lt;/p>
&lt;h3 id="heading-4">日本語対応&lt;/h3>
&lt;p>ありがたいことに、Hugoは日本語や中国語の為の特別な設定を用意してくれています。
設定ファイルに &lt;code>hasCJKLanguage = true&lt;/code> という行を追加しましょう。&lt;/p>
&lt;p>これをやらないと、一覧用に記事を自動で切り詰めてくれる機能や、
読み終えるまでの予想時間の計算が滅茶苦茶になってしまいます。&lt;/p>
&lt;h2 id="heading-5">テーマを決める&lt;/h2>
&lt;p>次はサイトに適用するテーマを選択しましょう。&lt;/p>
&lt;p>&lt;a href="http://themes.gohugo.io/">Hugo Themes Site&lt;/a> で実際の例を見ながらテーマを選ぶことが出来ます。
ブログ用のテーマのみに絞って見たい場合は &lt;a href="http://themes.gohugo.io/tags/blog">こちら&lt;/a> からどうぞ。&lt;/p>
&lt;p>注意点として、Hugoには記事を読み終えるまでの時間やおおよその文字数を表示する機能が組込まれているのですが、テーマがサポートしていない場合は表示されません。
このような機能を使いたい場合は、テーマでサポートされているかを確認しましょう。&lt;/p>
&lt;p>このサイトは &lt;a href="http://themes.gohugo.io/hugo-icarus/">Icarus&lt;/a> を使っています。
ショーケースの中では使える機能が一番多いと思うので、どういうことが出来るのか知るには丁度よいテーマだと思います。&lt;/p>
&lt;h2 id="favicon-">favicon を置こう&lt;/h2>
&lt;p>デフォルトでは Hugo の favicon が表示されてしまうので、カスタマイズしましょう。
&lt;a href="http://www.favicon-generator.org/">Favicon &amp;amp; App Icon Generator&lt;/a> などを使うとよいです。&lt;/p>
&lt;p>生成した &lt;code>.ico&lt;/code> ファイルを &lt;code>static&lt;/code> 直下に配置すればOKです。&lt;/p>
&lt;h2 id="heading-6">記事を書く&lt;/h2>
&lt;p>記事はMarkdownで書きます。&lt;/p>
&lt;p>ここで困るのは、Markdownにもいくつか方言があることです。
何を参考に書けばいいか迷ってしまいますね。&lt;/p>
&lt;p>HugoではMarkdownの処理に &lt;a href="https://github.com/russross/blackfriday">russross/blackfriday: Blackfriday: a markdown processor for Go&lt;/a> を使っています。
Blackfriday特有の書式(脚注など)もある為、こちらを参照しながら書くとよいでしょう。&lt;/p>
&lt;h3 id="heading-7">記事のファイル名について&lt;/h3>
&lt;p>日記や思い付きで即興で記事を書く場合、いちいち被らないようにファイル名を考えるのは面倒ですよね。&lt;/p>
&lt;p>Hugoの場合ファイル名は管理上の問題でしかないので、適当に日付やタイムスタンプでも入れておけばよいです。
デフォルトではファイル名がURLに使われますが、記事毎の設定で &lt;code>slug = &amp;quot;hogehoge&amp;quot;&lt;/code> のように設定しておけば、
実際のURLは &lt;code>/post/hogehoge&lt;/code> のようになります。&lt;/p>
&lt;p>また、以下のように設定ファイルに書いておけば、年月日がURLのプレフィクスに付くので被る心配もありません:&lt;/p>
&lt;pre>&lt;code>[permalinks]
post = &amp;quot;/:year/:month/:day/:slug&amp;quot;
&lt;/code>&lt;/pre>&lt;h2 id="heading-8">コメント対応&lt;/h2>
&lt;p>なんとなくコメント欄があるとオープンな感じでいいですよね？
ということでコメントにも対応させてみましょう。&lt;/p>
&lt;p>Hugo自身が&lt;a href="https://github.com/spf13/hugo/blob/cd36d752a3e8e2b75965fe281e6466d7a274cd94/tpl/template_embedded.go#L131-L145">Disqusに対応している&lt;/a>ので、
&lt;a href="https://disqus.com/">Disqus&lt;/a>を使いましょう。
ただし、Disqusによるコメント対応も、テーマによってはサポートされていない場合があるので要注意です。&lt;/p>
&lt;p>何よりもまず Disqus への登録です。
&lt;a href="https://help.disqus.com/customer/portal/articles/466182-publisher-quick-start-guide">ヘルプ&lt;/a>を見ながら行いましょう。
設定は特に必要ありませんので登録だけ済ませれば一旦OKです。後から言語設定を日本語にしたりすることも出来ます。&lt;/p>
&lt;p>登録が完了したら、登録時に入力した shortname (unique Disqus URL) を以下のように設定に追記しましょう:&lt;/p>
&lt;pre>&lt;code>disqusShortname = &amp;quot;sitename&amp;quot;
&lt;/code>&lt;/pre>&lt;p>これだけでHugoの設定は完了です。(テーマが対応していれば)個別の記事ページにコメント欄が出現します。&lt;/p>
&lt;h2 id="heading-9">デプロイ&lt;/h2>
&lt;p>生成したブログは GitHub Pages でホスティングします。&lt;/p>
&lt;p>&lt;code>gh-pages&lt;/code> ではなく、ユーザや Organization のページとして公開する場合は、
&lt;a href="https://gohugo.io/tutorials/github-pages-blog/#hosting-personal-organization-pages">Hosting Personal/Organization Pages&lt;/a>に
何も考えずに従えばOKです。
例示されているスクリプトもそのままコピペで使えます。&lt;/p>
&lt;p>実際にこのブログで使われているモノは全て&lt;a href="https://github.com/yewton/yewton-hugo">こちら&lt;/a>にあるので参考にしてください。&lt;/p>
&lt;h2 id="heading-10">独自ドメイン対応&lt;/h2>
&lt;p>github.com ドメインでホスティングするだけでよければ、ここから先の作業は不要です。おめでとうございます。&lt;/p>
&lt;p>以降はHugoとは関係ない話が続きます。&lt;/p>
&lt;p>既に独自ドメインを持っていて、それをブログでも使いたい場合は、
&lt;a href="https://help.github.com/articles/adding-a-cname-file-to-your-repository/">CNAME&lt;/a>の設定をGitHub上で行う必要があります。
&lt;a href="https://github.com/yewton/yewton.github.io/blob/master/CNAME">こんなファイル&lt;/a>を作ってあげて、
DNSレジストラ側で &lt;code>CNAME&lt;/code> とか &lt;code>ANAME&lt;/code> の設定を行ないます。&lt;/p>
&lt;h3 id="-vs-">サブドメイン vs ルートドメイン&lt;/h3>
&lt;p>&lt;code>CNAME&lt;/code> の設定をするか &lt;code>ANAME&lt;/code> の設定をするかは、サブドメインを使うかルートドメインを使うかの違いです。
GitHubのヘルプによると、&lt;a href="https://help.github.com/articles/about-custom-domains-for-github-pages-sites/#subdomains">サブドメインを強く推奨している&lt;/a>そうです。&lt;/p>
&lt;p>サブドメインを推奨する理由は以下のようです:&lt;/p>
&lt;ul>
&lt;li>GitHubのCDNの恩恵を受けられる&lt;/li>
&lt;li>GitHub自体のIPアドレス変更に影響を受けない&lt;/li>
&lt;li>DoS対策がより効率的になるのでページロードが高速になる&lt;/li>
&lt;/ul>
&lt;p>というわけで、特別な事情がない限りはサブドメインを利用するのがよいでしょう&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。&lt;/p>
&lt;h2 id="https">HTTPS化&lt;/h2>
&lt;p>ここまででブログとしての体裁は整いました。
ですが、折角つくったサイトですからHTTPSで配信したいですよね？しましょう。&lt;/p>
&lt;p>これには&lt;a href="https://www.cloudflare.com/">CloudFlare&lt;/a>を利用出来ます。
&lt;a href="https://1000ch.net/posts/2015/github-pages-custom-domain-in-https.html">GitHub Pagesに設定しているカスタムドメインをHTTPS対応させる - 1000ch.net&lt;/a>が非常に参考になります。&lt;/p>
&lt;p>設定が反映されるまでは最長1日程度かかりますので、ゆっくりと待ちましょう。&lt;/p>
&lt;p>なおCloudFlareを利用すると、ついでに HTTP/2 も有効になります。
他にもJSの軽量化などの各種高速化の設定を利用出来ますので、設定項目を見てみるのもよいでしょう。&lt;/p>
&lt;h3 id="heading-11">注意&lt;/h3>
&lt;p>注意点として、この際に Flexible SSL を用いる場合は、あくまでユーザとCloudFlare間の通信が暗号化されるだけで、 &lt;strong>CloudFlareとGitHub Pages間の通信は暗号化されていません&lt;/strong> 。
後者の間の通信は改竄されうる状態で、かつ、ユーザはそれを知る術が無いという状態に…。&lt;/p>
&lt;p>&lt;a href="https://konklone.com/post/github-pages-now-supports-https-so-use-it">GitHub Pages Now (Sorta) Supports HTTPS, So Use It&lt;/a>に詳しく書かれていますが、
一応そういう状態であるということは認識しておきましょう。&lt;/p>
&lt;h2 id="heading-12">終わりに&lt;/h2>
&lt;p>いい感じのブログを無料で手軽に作る方法についてまとめました。
改めてまとめてみるとそれなりにボリュームがあってちょっと大変でした…。&lt;/p>
&lt;p>これからブログを始めるぞーと思っている誰かの役に立てばいいなーと思います。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>こう書いている自分も、最初は特に気にせずにルートドメインで登録してしまっていました。この記事を書きながら気づいて、慌てて &lt;code>www&lt;/code> サブドメインに移行しました。 &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>hugo.elを書いた</title><link>https://www.yewton.net/2016/01/26/hugo-el/</link><pubDate>Tue, 26 Jan 2016 23:25:40 +0900</pubDate><guid>https://www.yewton.net/2016/01/26/hugo-el/</guid><description>&lt;h2 id="heading">#とは&lt;/h2>
&lt;p>&lt;a href="https://github.com/yewton/hugo.el">hugo.el&lt;/a>は、Hugoでサイト作成する際に便利な関数群を定義したパッケージ。
&lt;a href="https://marmalade-repo.org/">marmalade-repo&lt;/a>で公開されているので、パッケージの設定をすれば簡単にインストール出来るハズ。&lt;/p>
&lt;h2 id="heading-1">作った動機&lt;/h2>
&lt;p>何か〈物を書く〉という作業をする時、自分はEmacsを使っていて、可能な限りEmacsの中から出たくない。
HugoはCLIのインタフェースなので、ターミナルとEmacsを行き来することになってしまうのは辛い。&lt;/p>
&lt;p>あと色んなテーマを試したい時に、いちいちテーマ名をコピペする必要があり、辛かった。
一覧の中からhelmで選択したかった。&lt;/p>
&lt;p>…というように、Emacsの中で色々作業が完結するようにしたかった。&lt;/p>
&lt;h2 id="heading-2">作ってみて&lt;/h2>
&lt;p>正直テーマのインストール補助機能はHugoを初めて触って、色々試してみたいフェーズでしか使わないので、
ほとんどの場合大した価値じゃないかもしれない。&lt;/p>
&lt;p>個人的には、 &lt;code>hugo-new-content&lt;/code> と、 &lt;code>hugo-start-server&lt;/code>, &lt;code>hugo-open-browser&lt;/code> が中々便利だなーと思って使っている。
適当に記事を書き始められるし、プレビューするためにターミナルで確認したアドレスをブラウザに打ち込むとかやらなくてよいので。&lt;/p>
&lt;p>書き終えたあとに &lt;code>hugo-deploy&lt;/code> でひょいっと公開出来るのも地味に便利。
ただ、デプロイスクリプトを呼び出してるだけなんだけどね…。&lt;/p>
&lt;p>普段Emacsで物書きをするひとで、Hugoでブログ書こうと思う人は是非便利に使ってもらいたい。
そんな人あんまりいなさそうだけど…。&lt;/p>
&lt;h2 id="todo">TODO&lt;/h2>
&lt;ul>
&lt;li>&lt;code>hugo-open-browser&lt;/code> で今開いているcontentを直接開けたらより便利かもしれない&lt;/li>
&lt;li>&lt;code>hugo-deploy&lt;/code> が同期処理になってて固まるので、非同期にする&lt;/li>
&lt;li>テスト全然書いてないので、テストを書いてバッジをつけて喜ぶ&lt;/li>
&lt;/ul></description></item><item><title>忙し過ぎてお弁当も食べられなかった日</title><link>https://www.yewton.net/2016/01/15/diary/</link><pubDate>Fri, 15 Jan 2016 23:00:00 +0900</pubDate><guid>https://www.yewton.net/2016/01/15/diary/</guid><description>&lt;p>最近チームが新体制に移行するという時期で色々バタバタしていて、
立ち上げに伴う開発フローの整備とか、JIRA(プロジェクト管理ツール)の設定とか、
ワーキングアグリーメントの検討とかで、頓に忙しい。&lt;/p>
&lt;p>別に、自分の役割はスクラムマスターではなく、いちメンバーに過ぎないのだけれど、
認定スクラムマスターを取得した身としては色々手を焼かずにはいられず、
色んな雑務を買って出ているという状況。&lt;/p>
&lt;p>それもこれも、スプリント中は〈全力疾走〉するのがスクラムである、
というスクラムのあるべき姿を目指して、自分が全力で開発に打ち込めるようにするため。&lt;/p>
&lt;p>…と思ってたけど、最近は &lt;em>チームのパフォーマンスを引き出す&lt;/em> っていうことに全力になっていて、
それはそれで楽しくなってきたので、スクラムマスターもいいかなー、なんて思い始めた。&lt;/p>
&lt;h2 id="heading">サイト改修&lt;/h2>
&lt;p>今日もサイトいじりに勤しんだ。&lt;/p>
&lt;p>いじるときはEmacsを使うんだけれど、自分は適当なのでHTML中にJavaScriptを埋め込んだりする。
するとhtml-modeだとシンタックハイライトとかが無くて辛いことになるので、
&lt;a href="http://web-mode.org/">web-mode&lt;/a>を使ってる。&lt;/p>
&lt;p>HTMLファイルはCSSファイルは、始めから関連付けておくといいと思う。&lt;/p>
&lt;h3 id="gravatar">gravatar対応&lt;/h3>
&lt;p>静的画像だけでなく、gravatarのアイコンを使えるようにした。&lt;/p>
&lt;p>ついでに、画像を丸く表示するようにした。&lt;/p>
&lt;p>&lt;a href="https://github.com/cxfksword/greyshade/blob/28fb061bb674a2add89724dfbbf167f88f381d40/layouts/partials/header.html">gravatarに対応している他のテーマ(greyshade)&lt;/a>と、
&lt;a href="http://tdwp.us/round-gravatar-images-wordpress/">How to Round Gravatar Images in WordPress&lt;/a>を参考にした。&lt;/p>
&lt;h3 id="heading-1">記念日対応&lt;/h3>
&lt;p>最初は&lt;a href="http://counting.hatelabo.jp/">Hatena::Counting&lt;/a>とか類似のサービスを利用しようと思ったんだけど、
あんまりシンプルなのが無かったので自作した。&lt;/p>
&lt;p>自作といったって、&lt;a href="http://momentjs.com/">Moment.js&lt;/a>というとても便利なライブラリがあったので、
それを使って適当にJavaScriptを埋め込んだだけ。&lt;/p>
&lt;p>&lt;a href="https://golang.org/pkg/text/template/">template - The Go Programming Language&lt;/a>とか
&lt;a href="https://gohugo.io/templates/go-templates/">Hugo - Go Template Primer&lt;/a>あたりも参考にした。&lt;/p></description></item><item><title>はじめに</title><link>https://www.yewton.net/2016/01/11/at-the-start/</link><pubDate>Mon, 11 Jan 2016 11:11:11 +0900</pubDate><guid>https://www.yewton.net/2016/01/11/at-the-start/</guid><description>&lt;h2 id="heading">はじめに&lt;/h2>
&lt;p>今年30歳になる節目の年なので、ブログを書いてみることにした。&lt;/p>
&lt;p>何もこういう試みは初めてではなく、
これまでも、&lt;a href="http://d.hatena.ne.jp/yuto_sasaki/">はてなダイアリー&lt;/a>だったり、
&lt;a href="http://qiita.com/yewton">Qiita&lt;/a>だったりに断続的に記事を書いたりメモしたりしていた。&lt;/p>
&lt;p>それより以前も、個人でサイト作成したり、既存のブログサービスを使っていたこともあった。&lt;/p>
&lt;p>いずれも、1年と経たずに辞めてしまった。
自分の凝り性でかつ飽きっぽい性質のためだと思う。&lt;/p>
&lt;p>今回また性懲りもなく始めたのは、何かをアウトプットしたいというよりも、
&lt;a href="https://gohugo.io/">Hugo&lt;/a>というものを何かのキッカケで知って、
Golangの静的サイト生成ツールだと知り、イマドキは静的サイト生成だよねー
という巷の声を聞いた結果、使ってみたくなった、というのが大きい。&lt;/p>
&lt;p>飽きたらその内また辞めるだろうけれど、
今のところ調整したりカスタマイズしたりしたい部分が多々あるので、当面存在はするだろう。
これらの試みを記事にしたりするかもしれない。&lt;/p>
&lt;h2 id="heading-1">何を書くか&lt;/h2>
&lt;p>外部サービスに依存しないので(ホスティングはGitHub使ってるケド)自由奔放に書いていけたらと思っている。&lt;/p>
&lt;p>技術的な話から、日常の駄文、過去の思い出を振り返ってみたり、
あとはペットの話も書くかもしれない。時にはポエムも書くだろう。&lt;/p>
&lt;p>当分人の目に触れぬはずの所なので、好き勝手にやってみよう。&lt;/p></description></item></channel></rss>