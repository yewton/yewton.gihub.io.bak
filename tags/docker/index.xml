<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker | yewton.net</title><link>https://www.yewton.net/tags/docker/</link><atom:link href="https://www.yewton.net/tags/docker/index.xml" rel="self" type="application/rss+xml"/><description>docker</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ja-jp</language><copyright>© 2016-2020 yewton</copyright><lastBuildDate>Sun, 21 Feb 2016 22:49:52 +0900</lastBuildDate><image><url>https://www.yewton.net/img/icon.png</url><title>docker</title><link>https://www.yewton.net/tags/docker/</link></image><item><title>WordPressをHTTP/2+HHVMで動かす環境をdocker-composeで構築してみた</title><link>https://www.yewton.net/2016/02/21/wordpress-http2-hhvm/</link><pubDate>Sun, 21 Feb 2016 22:49:52 +0900</pubDate><guid>https://www.yewton.net/2016/02/21/wordpress-http2-hhvm/</guid><description>&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;p>&lt;a href="https://github.com/yewton/wordpress-nginx-http2-hhvm">このリポジトリ&lt;/a>を &lt;code>clone&lt;/code> して &lt;code>docker-compose up -d&lt;/code> して下さい
(要 &lt;a href="https://github.com/docker/compose/releases/tag/1.6.0">バージョン 1.6.0 以上&lt;/a>)。
その後 &lt;code>open &amp;quot;https://$(docker-machine ip default)&amp;quot;&lt;/code> すると、ブラウザでWordPressが立ち上がります。&lt;/p>
&lt;p>&lt;img src="https://www.yewton.net/img/2016-02-21_224951/wordpress.png" alt="デモ">&lt;/p>
&lt;h2 id="heading">動機&lt;/h2>
&lt;p>WordPressをHHVMで動かしたら超速くなった!やったぜ!!という記事はをよく見るのだけれど、
具体的にどうやって構築しているのか解説している記事があんまり無かったので、実際にやってみることにしました。&lt;/p>
&lt;p>ついでに、HTTP/2で提供出来るとイケてる気がしたので、併せて対応してみることにします。&lt;/p>
&lt;h2 id="hhvm">HHVM&lt;/h2>
&lt;p>&lt;img src="https://www.yewton.net/img/2016-02-21_224951/hugo.png" alt="HHVM">&lt;/p>
&lt;p>&lt;a href="http://hhvm.com/">HHVM&lt;/a>は、Facebookがオープンソースとして開発している仮想実行環境で、
&lt;a href="http://php.net/">PHP&lt;/a>と&lt;a href="http://hacklang.org/">Hack&lt;/a>を動かすための環境らしいです。&lt;/p>
&lt;p>まぁ、個人的にはHackもHHVMも &lt;strong>すごいPHP&lt;/strong> ぐらいの認識しかありませんが…。
Hackは言語的にすごくて、HHVMは実行環境がすごい。今回用があるのはHHVMだけです。&lt;/p>
&lt;h2 id="http2">HTTP/2&lt;/h2>
&lt;p>&lt;a href="https://http2.github.io/">HTTP/2&lt;/a>は… &lt;strong>すごいHTTP&lt;/strong> です。&lt;/p>
&lt;p>HTTP/1.xとの互換性を保ちつつ、効率化したもののようです。ヘッダの圧縮とか、リクエストの多重化とか。
&lt;a href="http://summerwind.jp/docs/rfc7540/">RFC7540 日本語訳&lt;/a>や&lt;a href="http://http2.info/faq.html#who-made-http2">日本語のFAQ&lt;/a>もあります。
自分は全然見てないけれど…必要になったら読みます。&lt;/p>
&lt;p>とにかく、このプロトコルで配信するだけでより効率的でより早くなる、ということです。&lt;/p>
&lt;h3 id="http2-">HTTP/2 の実装&lt;/h3>
&lt;p>&lt;a href="http://nginx.org/en/">nginx&lt;/a>の1.9.5からHTTP/2をサポートしているようです&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。
&lt;a href="https://hub.docker.com/_/nginx/">公式Dockerリポジトリ&lt;/a>で配信されている最新イメージでもちゃんとサポートされていました。&lt;/p>
&lt;p>他にも&lt;a href="http://httpd.apache.org/">Apache HTTP Server 2.4.17+&lt;/a>や
&lt;a href="http://dena.com/intl/">DeNA&lt;/a>の&lt;a href="https://h2o.examp1e.net/">H2O&lt;/a>など&lt;a href="https://github.com/http2/http2-spec/wiki/Implementations">色々ある&lt;/a>ようです。&lt;/p>
&lt;p>今回はApacheよりは速かろうというのと、WordPress稼動の実例も多いことから、nginxを選択しました。適当。&lt;/p>
&lt;h2 id="heading-1">構成&lt;/h2>
&lt;p>リライトルールとか複雑なリクエスト制御が不要なら、
HHVMに組込みのWebサーバーがあるのでそれを使うのが簡単だし、速度面でも問題なさそうです。&lt;/p>
&lt;p>ただ、WordPressでパーマリンクを利用する場合はURLのリライトが必須です。&lt;/p>
&lt;p>HHVMでもバーチャルホスト切ってリライトの設定するとか出来るみたいですが、
iniファイルに設定書いていくのは何だかしんどそうです。&lt;/p>
&lt;p>他にもSSLとか静的ファイルの配信とか諸々考えると、餅は餅屋ということでリバースプロキシを立てた方がよさそうですね。&lt;/p>
&lt;p>というわけで、リバースプロキシとして nginx を立てて、HHVMをFastCGIモードで起動してバックエンドとします。&lt;/p>
&lt;p>今回はとにかくお手軽に手元で動かしてみたかったので、諸々Dockerで動かすことにしました。
雑に図解すると以下のような感じです:&lt;/p>
&lt;p>&lt;img src="https://www.yewton.net/img/2016-02-21_224951/structure.png" alt="構成図">&lt;/p>
&lt;p>FrontとかBackはDockerの&lt;a href="https://docs.docker.com/engine/userguide/networking/dockernetworks/#user-defined-networks">ユーザー定義ネットワーク&lt;/a>です。
&lt;a href="https://github.com/docker/docker/blob/master/CHANGELOG.md#1100-2016-02-04">Docker 1.10.0&lt;/a>で link に代わるものとして導入されたような気がします。
&lt;code>/etc/hosts&lt;/code> じゃなくてDNSで名前解決出来るようになってて最高にハッピーですね。&lt;/p>
&lt;p>FastCGIはUnixソケットで通信した方が速いと思うんですが、
今回は nginx と HHVM を別々のコンテナで動かすので、TCPで通信するようにしました。
同一システム上にFastCGIサーバとプロセスが稼動するって、実環境でもあんまり無いような気がするけど、どうなんだろう？&lt;/p>
&lt;p>コンテナひとつひとつ立てていくのは辛いので、常套手段の &lt;code>docker-compose&lt;/code> を使って作ります。&lt;/p>
&lt;h2 id="heading-2">動かす&lt;/h2>
&lt;p>&lt;a href="https://github.com/yewton/wordpress-nginx-http2-hhvm">このリポジトリ&lt;/a>に実際に稼動するものが置いてあります。
&lt;code>clone&lt;/code> して &lt;code>docker-compose up -d&lt;/code> すれば、HTTP/2でWordPressが動いている様子が確認出来ます。&lt;/p>
&lt;p>nginxやHHVMの設定はほぼデフォルトのままいじってないので、本気で動かすなら細かいチューニングは必要です。
が、全体の構成は実環境でもこのようになると思います。&lt;/p>
&lt;p>&lt;img src="https://www.yewton.net/img/2016-02-21_224951/wordpress.png" alt="デモ">&lt;/p>
&lt;h2 id="heading-3">終わりに&lt;/h2>
&lt;p>以上で、お手軽に手元でHTTP/2+HHVMなWordPressを試すことが出来るようになりました。&lt;/p>
&lt;p>あとは実環境へのデプロイだけなんですが、さてどうしたものか。
&lt;code>docker-compose.yml&lt;/code> からいい感じにデプロイしてくれるような何か、ありませんかねぇ。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://www.nginx.com/blog/nginx-1-9-5/">HTTP/2 Supported with NGINX Open Source 1.9.5 | NGINX&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>VM関連ファイルを外部ストレージに保存して空き容量を確保する</title><link>https://www.yewton.net/2016/02/19/save-storage-space-by-moving-vm-related-files-to-ex-storage/</link><pubDate>Fri, 19 Feb 2016 00:00:00 +0900</pubDate><guid>https://www.yewton.net/2016/02/19/save-storage-space-by-moving-vm-related-files-to-ex-storage/</guid><description>&lt;h2 id="vm">何かと容量を食うVM関連ファイル&lt;/h2>
&lt;p>DockerやらVagrantやらで作業していると、いつのまにかディスク容量が逼迫していることがありますよね。&lt;/p>
&lt;p>自分も128GB SSDのMacBook Proを使っているので、結構いっぱいいっぱいでした。&lt;/p>
&lt;p>そこで拡張ストレージを用意して、容量を食いがちなVM関連のファイルを移動することにしました。&lt;/p>
&lt;h3 id="mac">(参考)Mac用の拡張ストレージ&lt;/h3>
&lt;p>USBで外付けするようなのだと持ち運びに不便なので、
&lt;a rel="nofollow" href="http://www.amazon.co.jp/gp/product/B00TTFOJ4A/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00TTFOJ4A&amp;linkCode=as2&amp;tag=yewton-22">iSlice Pro&lt;/a>&lt;img src="http://ir-jp.amazon-adsystem.com/e/ir?t=yewton-22&amp;l=as2&amp;o=9&amp;a=B00TTFOJ4A" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
のような本体のSDカードスロットに差せるようなタイプを個人的には使っています。
iSliceの場合はただのアダプタなので別途128GBのmicroSDカードを調達する必要がありますが、ストレージと一体になっているモノよりは若干割安です。&lt;/p>
&lt;iframe src="https://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yewton-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00TTFOJ4A" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0">&lt;/iframe>
&lt;h2 id="vagrant">Vagrant&lt;/h2>
&lt;p>Vagrant用のBoxファイルとVMイメージの保存場所を変える際には、以下の記事が参考になります:&lt;/p>
&lt;p>&lt;a href="http://2inc.org/blog/2014/06/28/4311/" title="MacBookAir の容量がきついので Vagrant 環境を外付けに移した話 – モンキーレンチ">MacBookAir の容量がきついので Vagrant 環境を外付けに移した話 – モンキーレンチ&lt;/a>&lt;/p>
&lt;p>上記の記事を参考に諸々のファイルの移動、VB上の設定を済ませたら、
以下のようなコマンドを &lt;code>.bashrc&lt;/code> やら &lt;code>.zshenv&lt;/code> やらに書いておけば大丈夫です:&lt;/p>
&lt;p>&lt;code>export VAGRANT_HOME=/Volumes/data/.vagrant.d&lt;/code>&lt;/p>
&lt;h2 id="docker-machine">Docker Machine&lt;/h2>
&lt;p>Docker Machine用のファイルもデカいので移動させたいです。&lt;/p>
&lt;p>Docker Machineでは &lt;code>MACHINE_STORAGE_PATH&lt;/code> という環境変数を参照しています。
デフォルトは &lt;code>~/.docker/machine&lt;/code> です。&lt;/p>
&lt;p>Vagrantの場合と同じように既存のファイルを新しい場所に移動し、
VB上で除去→追加の手順を踏みます。
そして以下のようなコマンドで環境変数をセットします:&lt;/p>
&lt;p>&lt;code>export MACHINE_STORAGE_PATH=/Volumes/data/.docker/machine&lt;/code>&lt;/p>
&lt;p>これも &lt;code>.bashrc&lt;/code> やらに書いておきましょう。&lt;/p>
&lt;h2 id="-">注意: 外部ストレージのフォーマット&lt;/h2>
&lt;p>自分の場合、SDカードが元々フォーマットされていて、
差すだけで既に利用できたので、フォーマットについては特に気にせず移行作業をしてしまいました。&lt;/p>
&lt;p>ところが、移行後に &lt;code>'docker-machine&lt;/code> が謎のエラーで使えなくなってしまいました。&lt;/p>
&lt;p>&lt;code>-D&lt;/code> を付けてデバッグ情報を表示したとろ、以下のようなエラーが出ていました:&lt;/p>
&lt;pre>&lt;code>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ WARNING: UNPROTECTED PRIVATE KEY FILE! @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0777 for '/Volumes/data/.docker/machine/machines/default/id_rsa' are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.
Load key &amp;quot;/Volumes/data/.docker/machine/machines/default/id_rsa&amp;quot;: bad permissions
debug2: we did not send a packet, disable method
debug1: No more authentication methods to try.
Permission denied (publickey,password,keyboard-interactive).
&lt;/code>&lt;/pre>&lt;p>実は、 &lt;strong>SDカードがexFATでフォーマットされていたため、permissionが777になってしまっていた&lt;/strong>
ことが原因でした。
exFATの場合、 &lt;code>chmod&lt;/code> することも出来ないので、フォーマットを変更する必要があります。&lt;/p>
&lt;p>Mac OS X用拡張ストレージは、 &lt;strong>〈OS X 拡張 (ジャーナリング)〉でフォーマット&lt;/strong> しましょう。
また、この際に &lt;strong>〈大文字／小文字を区別する〉は不要&lt;/strong> です。
OS Xのメインストレージでは区別されませんし、
Adobeなど一部の製品は大文字小文字を区別するファイルシステムをサポートしていません&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。
無用なトラブルを避けるためにも、注意しましょう。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://helpx.adobe.com/jp/x-productkb/global/cpsid_83180.html">Mac OS X ファイルシステムの確認方法と大文字と小文字を区別するファイルシステムについて&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>