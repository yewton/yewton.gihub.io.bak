<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yewton.net</title>
    <link>https://www.yewton.net/</link>
    <description>Recent content on yewton.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 14 Feb 2016 00:26:33 +0900</lastBuildDate>
    <atom:link href="https://www.yewton.net/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hugoの記事をようやく書き上げた日</title>
      <link>https://www.yewton.net/2016/02/14/diary</link>
      <pubDate>Sun, 14 Feb 2016 00:26:33 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/02/14/diary</guid>
      <description>

&lt;p&gt;たまには人類に少しでも役に立つような記事も書こうと思い、
&lt;a href=&#34;https://www.yewton.net/2016/02/02/blog-with-hugo/&#34;&gt;Hugoの記事&lt;/a&gt;を書いていた。&lt;/p&gt;

&lt;p&gt;自分が通しでやったことだし、すぐ書き上がるだろーと高をくくっていたら、
なんだかんだ書き始めてから2週間くらい経ってしまった(もちろん、そればかりやってたワケじゃないけど)。
自分の遅筆さに呆れるばかりである。&lt;/p&gt;

&lt;p&gt;普段から余り人様に見せられるような文章を書いていない、というのが露呈した気がした。
そういえば普段の会話もあまり賢いものとは言えない…。
時を経るごとに、喋るのも下手になっていると感じる。&lt;/p&gt;

&lt;p&gt;やばいなー。やばいヤバイ。&lt;/p&gt;

&lt;p&gt;人とコミュニケーションとらずに生きていくのにそろそろ限界を感じているので、
意図して真っ当な会話をし、文章を書けるように心がけていこうと思う。
そういえば最近まともに読書もしていないし…。
社会生活を営む人間として真っ当に生きていく為の読書くらいは、しよう。&lt;/p&gt;

&lt;h2 id=&#34;業務外のアレコレ:7a2f7ead465353c7838d82b7d8c026fb&#34;&gt;業務外のアレコレ&lt;/h2&gt;

&lt;p&gt;最近(ほぼ)趣味で、 AWS上にシンプルに構築されたWordPressブログを、
HTTPSにしてついでにHTTP/2対応してHHVMで稼動させようぜ、というような試みをしている。&lt;/p&gt;

&lt;p&gt;AWSは最近ようやく触りはじめたばかりなので、
どういったことが出来るのか、から調べつつやっている。&lt;/p&gt;

&lt;p&gt;ベースがAmazonLinuxなので、HHVMは公式にサポートされていない。
なので Docker を利用したいところなのだけれど、
WordPress がダイナミックに自分自身を更新するという話を聞いて、うーん、となった。
HHVMだけをECSで動かしてもしょうがないから、やるならWordPressもコンテナに詰めるのだけど、
コンテナ内で稼動しているWordPressを更新してもしょうがない、というかコンテナ再起動したら消えちゃうしなー、という。
それとも、ECSで使うEC2インスタンスにWordPressを普通に入れちゃえばいいのかな？&lt;/p&gt;

&lt;p&gt;などなど、色々試行錯誤の日々である。
今日はHugoの記事書き上げるのとドメイン移行でいっぱいいっぱいだったので、
明日には何らかの成果を出したい…。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo &#43; GitHub Pages でお手軽にブログを始めよう</title>
      <link>https://www.yewton.net/2016/02/02/blog-with-hugo</link>
      <pubDate>Tue, 02 Feb 2016 18:44:21 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/02/02/blog-with-hugo</guid>
      <description>

&lt;h2 id=&#34;はじめに:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;この記事は「いい感じのブログを無料で手軽に作れないかなー」、と思っている人が主な対象です。&lt;/p&gt;

&lt;p&gt;〈いい感じ〉というのが抽象的ですが、以下のような欲求をイメージしています:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.staticgen.com/&#34;&gt;Top Open-Source Static Site Generators - StaticGen&lt;/a&gt; にあるような静的サイトジェネレータがいい&lt;/li&gt;
&lt;li&gt;サイト生成は速ければ速いほどいい&lt;/li&gt;
&lt;li&gt;モダンでレスポンシブルなのがいい&lt;/li&gt;
&lt;li&gt;記事を書いたら即確認出来るのがいい&lt;/li&gt;
&lt;li&gt;GitHub Pagesに簡単にデプロイ出来るのがいい&lt;/li&gt;
&lt;li&gt;独自ドメインは使いたい&lt;/li&gt;
&lt;li&gt;ブログにありがちなコメント機能とかアクセス解析とかが出来るといい&lt;/li&gt;
&lt;li&gt;HTTPSなのがいい&lt;/li&gt;
&lt;li&gt;HTTP/2なのがいい&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;サイトの方式を考える:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;サイトの方式を考える&lt;/h2&gt;

&lt;p&gt;手軽に始めたいので、準備はなるべく少ない方が嬉しいですね。&lt;/p&gt;

&lt;p&gt;WordPress みたいな動的な方式はサーバを用意しないといけないので手間ですし、場合によっては金もかかります。&lt;/p&gt;

&lt;p&gt;一方の静的サイト配信であれば、必要なのは HTML を配信出来る場所だけです。
GitHub Pages や類似のサービスを使えば無料で利用できますね。&lt;/p&gt;

&lt;h2 id=&#34;静的サイトジェネレータを選ぶ:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;静的サイトジェネレータを選ぶ&lt;/h2&gt;

&lt;p&gt;というわけで静的サイトを作成するためのジェネレータを選びます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.staticgen.com/&#34;&gt;Top Open-Source Static Site Generators - StaticGen&lt;/a&gt; の中から適当に選びましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; や &lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt; はメジャーっぽいですが検索してみると、何だか遅いみたいです(使ったことない)。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gitbook.com/&#34;&gt;GitBook&lt;/a&gt; はドキュメントを書くのには向いています(自分も利用しています)。ですがブログを書くためのものではありません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hexo.io/&#34;&gt;Hexo&lt;/a&gt; か &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; あたりがよさそうです。
これら二つはコンセプトもよく似ているし、最早好みの世界ですね。自分は何となく Hugo を使っています。&lt;/p&gt;

&lt;h2 id=&#34;hugo:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;Hugo&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://www.yewton.net/img/2016-01-11_184419/hugo.png&#34; alt=&#34;Hugoのロゴ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; は超高速でシンプルかつ柔軟な静的サイトジェネレータだそうです。
Go言語で書かれていて、インストールはとってもカンタン。すぐに使えます。&lt;/p&gt;

&lt;p&gt;使い方もとってもカンタン…というワケではないかもしれません。
といっても、それは Hugo が殊更難しいというワケではなく、
そもそも静的サイトジェネレーターというモノを理解している必要がある、ということだと思います。&lt;/p&gt;

&lt;p&gt;ブログを書く、ということだけに目的を絞れば、覚える必要がある用語は
&lt;em&gt;Content&lt;/em&gt;, &lt;em&gt;Themes&lt;/em&gt;, &lt;em&gt;Taxonomies&lt;/em&gt; の3つだけです。&lt;/p&gt;

&lt;h3 id=&#34;content:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;Content&lt;/h3&gt;

&lt;p&gt;ブログで言えば記事のことです。&lt;/p&gt;

&lt;p&gt;Content がどのように表示されるかは使用しているテーマによりますが、
ブログ用テーマのほとんどは &lt;code&gt;post&lt;/code&gt; ディレクトリ以下にあるファイルを記事として扱うようです。&lt;/p&gt;

&lt;h3 id=&#34;themes:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;Themes&lt;/h3&gt;

&lt;p&gt;そのまま、サイトに適用するテーマです。&lt;/p&gt;

&lt;p&gt;Hugoの場合、テーマはそのサイトの構成まで決めてしまいます。
独自にテンプレートを書くことでカスタマイズ出来るとはいえ、目的に沿ったテーマを選択するのが無難です。&lt;/p&gt;

&lt;p&gt;テーマ選択の方法については後述します。&lt;/p&gt;

&lt;h3 id=&#34;taxonomies:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;Taxonomies&lt;/h3&gt;

&lt;p&gt;やけに難しい単語ですが、分類方法のことです。
ブログなら &lt;strong&gt;カテゴリ&lt;/strong&gt; や &lt;strong&gt;タグ&lt;/strong&gt; といった類のものです。&lt;/p&gt;

&lt;p&gt;幸い、カテゴリとタグによる基本的な分類であればデフォルトで対応しているため、あまり意識する必要はありません。
カテゴリやタグのことを Taxonomies と呼ぶことだけ押さえておけばOKです。&lt;/p&gt;

&lt;h2 id=&#34;サイトを作る:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;サイトを作る&lt;/h2&gt;

&lt;p&gt;早速サイトを作っていきましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;Hugo - Hugo Quickstart Guide&lt;/a&gt; に従えば基本的に迷うことは無いと思います。
ここでは、適当にサイトを作って、ひとつ記事を書いてみて、それがブラウザで確認出来るようになれば大丈夫です。&lt;/p&gt;

&lt;p&gt;ただし、 &lt;strong&gt;日本語に対応させる設定は追加で必要&lt;/strong&gt; です。&lt;/p&gt;

&lt;h3 id=&#34;日本語対応:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;日本語対応&lt;/h3&gt;

&lt;p&gt;ありがたいことに、Hugoは日本語や中国語の為の特別な設定を用意してくれています。
設定ファイルに &lt;code&gt;hasCJKLanguage = true&lt;/code&gt; という行を追加しましょう。&lt;/p&gt;

&lt;p&gt;これをやらないと、一覧用に記事を自動で切り詰めてくれる機能や、
読み終えるまでの予想時間の計算が滅茶苦茶になってしまいます。&lt;/p&gt;

&lt;h2 id=&#34;テーマを決める:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;テーマを決める&lt;/h2&gt;

&lt;p&gt;次はサイトに適用するテーマを選択しましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;Hugo Themes Site&lt;/a&gt; で実際の例を見ながらテーマを選ぶことが出来ます。
ブログ用のテーマのみに絞って見たい場合は &lt;a href=&#34;http://themes.gohugo.io/tags/blog&#34;&gt;こちら&lt;/a&gt; からどうぞ。&lt;/p&gt;

&lt;p&gt;注意点として、Hugoには記事を読み終えるまでの時間やおおよその文字数を表示する機能が組込まれているのですが、テーマがサポートしていない場合は表示されません。
このような機能を使いたい場合は、テーマでサポートされているかを確認しましょう。&lt;/p&gt;

&lt;p&gt;このサイトは &lt;a href=&#34;http://themes.gohugo.io/hugo-icarus/&#34;&gt;Icarus&lt;/a&gt; を使っています。
ショーケースの中では使える機能が一番多いと思うので、どういうことが出来るのか知るには丁度よいテーマだと思います。&lt;/p&gt;

&lt;h2 id=&#34;favicon-を置こう:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;favicon を置こう&lt;/h2&gt;

&lt;p&gt;デフォルトでは Hugo の favicon が表示されてしまうので、カスタマイズしましょう。
&lt;a href=&#34;http://www.favicon-generator.org/&#34;&gt;Favicon &amp;amp; App Icon Generator&lt;/a&gt; などを使うとよいです。&lt;/p&gt;

&lt;p&gt;生成した &lt;code&gt;.ico&lt;/code&gt; ファイルを &lt;code&gt;static&lt;/code&gt; 直下に配置すればOKです。&lt;/p&gt;

&lt;h2 id=&#34;記事を書く:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;記事を書く&lt;/h2&gt;

&lt;p&gt;記事はMarkdownで書きます。&lt;/p&gt;

&lt;p&gt;ここで困るのは、Markdownにもいくつか方言があることです。
何を参考に書けばいいか迷ってしまいますね。&lt;/p&gt;

&lt;p&gt;HugoではMarkdownの処理に &lt;a href=&#34;https://github.com/russross/blackfriday&#34;&gt;russross/blackfriday: Blackfriday: a markdown processor for Go&lt;/a&gt; を使っています。
Blackfriday特有の書式(脚注など)もある為、こちらを参照しながら書くとよいでしょう。&lt;/p&gt;

&lt;h3 id=&#34;記事のファイル名について:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;記事のファイル名について&lt;/h3&gt;

&lt;p&gt;日記や思い付きで即興で記事を書く場合、いちいち被らないようにファイル名を考えるのは面倒ですよね。&lt;/p&gt;

&lt;p&gt;Hugoの場合ファイル名は管理上の問題でしかないので、適当に日付やタイムスタンプでも入れておけばよいです。
デフォルトではファイル名がURLに使われますが、記事毎の設定で &lt;code&gt;slug = &amp;quot;hogehoge&amp;quot;&lt;/code&gt; のように設定しておけば、
実際のURLは &lt;code&gt;/post/hogehoge&lt;/code&gt; のようになります。&lt;/p&gt;

&lt;p&gt;また、以下のように設定ファイルに書いておけば、年月日がURLのプレフィクスに付くので被る心配もありません:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[permalinks]
    post = &amp;quot;/:year/:month/:day/:slug&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コメント対応:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;コメント対応&lt;/h2&gt;

&lt;p&gt;なんとなくコメント欄があるとオープンな感じでいいですよね？
ということでコメントにも対応させてみましょう。&lt;/p&gt;

&lt;p&gt;Hugo自身が&lt;a href=&#34;https://github.com/spf13/hugo/blob/cd36d752a3e8e2b75965fe281e6466d7a274cd94/tpl/template_embedded.go#L131-L145&#34;&gt;Disqusに対応している&lt;/a&gt;ので、
&lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt;を使いましょう。
ただし、Disqusによるコメント対応も、テーマによってはサポートされていない場合があるので要注意です。&lt;/p&gt;

&lt;p&gt;何よりもまず Disqus への登録です。
&lt;a href=&#34;https://help.disqus.com/customer/portal/articles/466182-publisher-quick-start-guide&#34;&gt;ヘルプ&lt;/a&gt;を見ながら行いましょう。
設定は特に必要ありませんので登録だけ済ませれば一旦OKです。後から言語設定を日本語にしたりすることも出来ます。&lt;/p&gt;

&lt;p&gt;登録が完了したら、登録時に入力した shortname (unique Disqus URL) を以下のように設定に追記しましょう:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;disqusShortname = &amp;quot;sitename&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでHugoの設定は完了です。(テーマが対応していれば)個別の記事ページにコメント欄が出現します。&lt;/p&gt;

&lt;h2 id=&#34;デプロイ:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;デプロイ&lt;/h2&gt;

&lt;p&gt;生成したブログは GitHub Pages でホスティングします。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gh-pages&lt;/code&gt; ではなく、ユーザや Organization のページとして公開する場合は、
&lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/#hosting-personal-organization-pages&#34;&gt;Hosting Personal/Organization Pages&lt;/a&gt;に
何も考えずに従えばOKです。
例示されているスクリプトもそのままコピペで使えます。&lt;/p&gt;

&lt;p&gt;実際にこのブログで使われているモノは全て&lt;a href=&#34;https://github.com/yewton/yewton-hugo&#34;&gt;こちら&lt;/a&gt;にあるので参考にしてください。&lt;/p&gt;

&lt;h2 id=&#34;独自ドメイン対応:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;独自ドメイン対応&lt;/h2&gt;

&lt;p&gt;github.com ドメインでホスティングするだけでよければ、ここから先の作業は不要です。おめでとうございます。&lt;/p&gt;

&lt;p&gt;以降はHugoとは関係ない話が続きます。&lt;/p&gt;

&lt;p&gt;既に独自ドメインを持っていて、それをブログでも使いたい場合は、
&lt;a href=&#34;https://help.github.com/articles/adding-a-cname-file-to-your-repository/&#34;&gt;CNAME&lt;/a&gt;の設定をGitHub上で行う必要があります。
&lt;a href=&#34;https://github.com/yewton/yewton.github.io/blob/master/CNAME&#34;&gt;こんなファイル&lt;/a&gt;を作ってあげて、
DNSレジストラ側で &lt;code&gt;CNAME&lt;/code&gt; とか &lt;code&gt;ANAME&lt;/code&gt; の設定を行ないます。&lt;/p&gt;

&lt;h3 id=&#34;サブドメイン-vs-ルートドメイン:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;サブドメイン vs ルートドメイン&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;CNAME&lt;/code&gt; の設定をするか &lt;code&gt;ANAME&lt;/code&gt; の設定をするかは、サブドメインを使うかルートドメインを使うかの違いです。
GitHubのヘルプによると、&lt;a href=&#34;https://help.github.com/articles/about-custom-domains-for-github-pages-sites/#subdomains&#34;&gt;サブドメインを強く推奨している&lt;/a&gt;そうです。&lt;/p&gt;

&lt;p&gt;サブドメインを推奨する理由は以下のようです:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHubのCDNの恩恵を受けられる&lt;/li&gt;
&lt;li&gt;GitHub自体のIPアドレス変更に影響を受けない&lt;/li&gt;
&lt;li&gt;DoS対策がより効率的になるのでページロードが高速になる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というわけで、特別な事情がない限りはサブドメインを利用するのがよいでしょう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:072657b3c7db6be31ea1c615ed4cd298:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:072657b3c7db6be31ea1c615ed4cd298:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;https化:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;HTTPS化&lt;/h2&gt;

&lt;p&gt;ここまででブログとしての体裁は整いました。
ですが、折角つくったサイトですからHTTPSで配信したいですよね？しましょう。&lt;/p&gt;

&lt;p&gt;これには&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;CloudFlare&lt;/a&gt;を利用出来ます。
&lt;a href=&#34;https://1000ch.net/posts/2015/github-pages-custom-domain-in-https.html&#34;&gt;GitHub Pagesに設定しているカスタムドメインをHTTPS対応させる - 1000ch.net&lt;/a&gt;が非常に参考になります。&lt;/p&gt;

&lt;p&gt;設定が反映されるまでは最長1日程度かかりますので、ゆっくりと待ちましょう。&lt;/p&gt;

&lt;p&gt;なおCloudFlareを利用すると、ついでに HTTP/2 も有効になります。
他にもJSの軽量化などの各種高速化の設定を利用出来ますので、設定項目を見てみるのもよいでしょう。&lt;/p&gt;

&lt;h3 id=&#34;注意:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;注意&lt;/h3&gt;

&lt;p&gt;注意点として、この際に Flexible SSL を用いる場合は、あくまでユーザとCloudFlare間の通信が暗号化されるだけで、 &lt;strong&gt;CloudFlareとGitHub Pages間の通信は暗号化されていません&lt;/strong&gt; 。
後者の間の通信は改竄されうる状態で、かつ、ユーザはそれを知る術が無いという状態に…。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://konklone.com/post/github-pages-now-supports-https-so-use-it&#34;&gt;GitHub Pages Now (Sorta) Supports HTTPS, So Use It&lt;/a&gt;に詳しく書かれていますが、
一応そういう状態であるということは認識しておきましょう。&lt;/p&gt;

&lt;h2 id=&#34;終わりに:072657b3c7db6be31ea1c615ed4cd298&#34;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;いい感じのブログを無料で手軽に作る方法についてまとめました。
改めてまとめてみるとそれなりにボリュームがあってちょっと大変でした…。&lt;/p&gt;

&lt;p&gt;これからブログを始めるぞーと思っている誰かの役に立てばいいなーと思います。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:072657b3c7db6be31ea1c615ed4cd298:1&#34;&gt;こう書いている自分も、最初は特に気にせずにルートドメインで登録してしまっていました。この記事を書きながら気づいて、慌てて &lt;code&gt;www&lt;/code&gt; サブドメインに移行しました。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:072657b3c7db6be31ea1c615ed4cd298:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>スクラム入門を翻訳する日々</title>
      <link>https://www.yewton.net/2016/01/31/diary</link>
      <pubDate>Sun, 31 Jan 2016 23:18:29 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/01/31/diary</guid>
      <description>&lt;p&gt;最近、&lt;a href=&#34;https://www.gitbook.com/book/yewton/scrumprimer/details&#34;&gt;スクラム入門の翻訳&lt;/a&gt;を
細々とやっている。&lt;/p&gt;

&lt;p&gt;元々は&lt;a href=&#34;http://www.scrumprimer.org/&#34;&gt;Scrum Primer - Short Introduction to Scrum&lt;/a&gt;で配布されているPDFで、
認定スクラムマスター研修でも参照される真っ当な文献(のはす)。&lt;/p&gt;

&lt;p&gt;日本語版があるにはある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:f10cb402008eac2dda64382953d50111:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:f10cb402008eac2dda64382953d50111:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;んだけれど、古いし翻訳の質が怪しいので、
自分の理解を進めるという意味も含めて独力で翻訳してみることにした。&lt;/p&gt;

&lt;p&gt;進捗としては、1週間の空いた時間をほぼそればっかりに費してようやっと &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt; くらい進んだ。
さすがに他のこともやりたいので、完成までは2ヶ月くらいかかってしまうかもしれない…。
3月中には終わるように頑張ろう。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:f10cb402008eac2dda64382953d50111:1&#34;&gt;すくすくスクラムが翻訳した版がある。あるはずなのだけれど公式に配布している所が見当たらない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:f10cb402008eac2dda64382953d50111:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>hugo.elを書いた</title>
      <link>https://www.yewton.net/2016/01/26/hugo-el</link>
      <pubDate>Tue, 26 Jan 2016 23:25:40 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/01/26/hugo-el</guid>
      <description>

&lt;h2 id=&#34;とは:5a4a752293a6cc5230abaaa041746920&#34;&gt;#とは&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yewton/hugo.el&#34;&gt;hugo.el&lt;/a&gt;は、Hugoでサイト作成する際に便利な関数群を定義したパッケージ。
&lt;a href=&#34;https://marmalade-repo.org/&#34;&gt;marmalade-repo&lt;/a&gt;で公開されているので、パッケージの設定をすれば簡単にインストール出来るハズ。&lt;/p&gt;

&lt;h2 id=&#34;作った動機:5a4a752293a6cc5230abaaa041746920&#34;&gt;作った動機&lt;/h2&gt;

&lt;p&gt;何か〈物を書く〉という作業をする時、自分はEmacsを使っていて、可能な限りEmacsの中から出たくない。
HugoはCLIのインタフェースなので、ターミナルとEmacsを行き来することになってしまうのは辛い。&lt;/p&gt;

&lt;p&gt;あと色んなテーマを試したい時に、いちいちテーマ名をコピペする必要があり、辛かった。
一覧の中からhelmで選択したかった。&lt;/p&gt;

&lt;p&gt;…というように、Emacsの中で色々作業が完結するようにしたかった。&lt;/p&gt;

&lt;h2 id=&#34;作ってみて:5a4a752293a6cc5230abaaa041746920&#34;&gt;作ってみて&lt;/h2&gt;

&lt;p&gt;正直テーマのインストール補助機能はHugoを初めて触って、色々試してみたいフェーズでしか使わないので、
ほとんどの場合大した価値じゃないかもしれない。&lt;/p&gt;

&lt;p&gt;個人的には、 &lt;code&gt;hugo-new-content&lt;/code&gt; と、 &lt;code&gt;hugo-start-server&lt;/code&gt;, &lt;code&gt;hugo-open-browser&lt;/code&gt; が中々便利だなーと思って使っている。
適当に記事を書き始められるし、プレビューするためにターミナルで確認したアドレスをブラウザに打ち込むとかやらなくてよいので。&lt;/p&gt;

&lt;p&gt;書き終えたあとに &lt;code&gt;hugo-deploy&lt;/code&gt; でひょいっと公開出来るのも地味に便利。
ただ、デプロイスクリプトを呼び出してるだけなんだけどね…。&lt;/p&gt;

&lt;p&gt;普段Emacsで物書きをするひとで、Hugoでブログ書こうと思う人は是非便利に使ってもらいたい。
そんな人あんまりいなさそうだけど…。&lt;/p&gt;

&lt;h2 id=&#34;todo:5a4a752293a6cc5230abaaa041746920&#34;&gt;TODO&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hugo-open-browser&lt;/code&gt; で今開いているcontentを直接開けたらより便利かもしれない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hugo-deploy&lt;/code&gt; が同期処理になってて固まるので、非同期にする&lt;/li&gt;
&lt;li&gt;テスト全然書いてないので、テストを書いてバッジをつけて喜ぶ&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JIRA Agile用のuserscriptを作ったりした日</title>
      <link>https://www.yewton.net/2016/01/23/diary</link>
      <pubDate>Sat, 23 Jan 2016 23:47:43 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/01/23/diary</guid>
      <description>

&lt;h2 id=&#34;趣味の政策物:94b3c734ee959e37b47a43c2fb129b69&#34;&gt;趣味の政策物&lt;/h2&gt;

&lt;p&gt;弊チームではバックログとしてJIRAを使っている。&lt;/p&gt;

&lt;p&gt;ここ最近しつこく「管理者権限が欲しいなァ〜(ﾁﾗｯ」としていたらめでたく権限を付与してもらえたので、
ここぞとばかりにJIRAをカスタムして使いやすいようにしていた。&lt;/p&gt;

&lt;p&gt;ワークフローを単純にしたり、使わないフィールドを非表示にしたり、
これまで説明文用のテンプレからコピペしたりしていたのを、それぞれ専用のフィールドを設けたり。&lt;/p&gt;

&lt;p&gt;色々準備はしたもの、やはり始まってみると色々不便なところが出てきて、
しかもJIRAの設定じゃどうしようもない部分もあったりする。&lt;/p&gt;

&lt;p&gt;たかがツール、されどツールで、ツールに使われているようじゃ到底円滑にスプリントを回すことなんて出来ない。&lt;/p&gt;

&lt;p&gt;そこで、スクラムマスターがセレモニーを進めやすいように支援するためのuserscriptを書いた。
ソースは&lt;a href=&#34;https://github.com/yewton/userscripts&#34;&gt;yewton/userscripts&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;component-labels-for-jira-scrum:94b3c734ee959e37b47a43c2fb129b69&#34;&gt;Component-labels for JIRA Scrum&lt;/h3&gt;

&lt;p&gt;コンポーネントをエピックのようにスクラムボード上で分かりやすいく表示する。&lt;/p&gt;

&lt;p&gt;ラベリングをしたいが為だけにエピックを使ってしまうという事態は結構そこかしこで起こっているみたいだった。
本来はコンポーネントでやるべきもので、エピックはエピックとして使えるのが健全な状態だと思うので、作った。&lt;/p&gt;

&lt;p&gt;実装は滅茶苦茶単純で、DOMに変更がある度に全課題を舐めて、未設定だったらAPIで該当する課題のコンポーネントを取得している。
なので、バックログに積まれている課題数分、ページを開いた瞬間にリクエストが走ることになる。
リクエストの仕方を何か工夫しないと使いものにならないかなーと思っていたのだけれど、
案外数百リクエスト飛ばすぐらいだとビクともしなかったので、愚直な実装のまま。&lt;/p&gt;

&lt;h3 id=&#34;detail-pop-up-for-jria-scrum:94b3c734ee959e37b47a43c2fb129b69&#34;&gt;Detail Pop-up for JRIA Scrum&lt;/h3&gt;

&lt;p&gt;各課題に詳細画面をポップアップで開くためのボタンを追加する。&lt;/p&gt;

&lt;p&gt;アジャイルボードではカスタムフィールドが表示されないので、
確認するためには編集ポップアップを開くか、詳細画面に飛ぶしかなかった。
しかも、アクティブなスプリント中はクローズされている課題が編集出来ないので、
前者の方法はスプリントレビュー時には使えない。&lt;/p&gt;

&lt;p&gt;画面遷移せずに詳細画面が開ければ用は足りると考え、
&lt;a href=&#34;http://www.ericmmartin.com/projects/simplemodal/&#34;&gt;SimpleModal&lt;/a&gt;という、
その名の通りシンプルなモーダル機能を実装するためのライブラリを使って、
&lt;code&gt;iframe&lt;/code&gt; で詳細画面を開くだけの機能を追加した。&lt;/p&gt;

&lt;h2 id=&#34;第3回-実践的ドメイン駆動設計ワークショップ-connpass-http-ddd-alliance-connpass-com-event-24672:94b3c734ee959e37b47a43c2fb129b69&#34;&gt;&lt;a href=&#34;http://ddd-alliance.connpass.com/event/24672/&#34;&gt;第3回 実践的ドメイン駆動設計ワークショップ - connpass&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;参加してきた。&lt;/p&gt;

&lt;p&gt;エンジニアチームとして、業務と技術両面でどういう風に学んでいけばいいかっていう話と、
実際にやってみたら、コードの雰囲気はこんな感じだぜ、っていう話。&lt;/p&gt;

&lt;p&gt;ドメイン層のクラスが1,000個とかあって、個々のクラスは 30 〜 60 行が大半を占めるそう。
目指すべき方向はそこだっていうのはわかってはいるけど、
実際に稼動してるプロダクトの数字っていうのは説得力がある。&lt;/p&gt;

&lt;p&gt;ドメイン駆動設計を実践するなら、ドメインエキスパートとか、企画者との協調が必須だと思うのだけれど、
それをどうプロセスとして制御可能な形で行えばいいか、あまり掴めてない。&lt;/p&gt;

&lt;p&gt;会話を重視しつつ、かつダラダラやらずに予測可能な状態で、
モデルに関する会話をする場を、開発プロセスのどこで行えばいいんだろう。&lt;/p&gt;

&lt;p&gt;増田さんに上手いやり方無いっすか、と相談してみたけれど、
いい方法っていうのはなくて、エンジニアチームが実績を積み重ねて信頼を得ていって、
協力体制を築くしかないね、ということだった。
それでも駄目なら、職場を変えよ、とも。&lt;/p&gt;

&lt;p&gt;色々仰々しいプロセスやツールを導入せずとも、
いつか阿吽の呼吸で、エンジニアチームと企画陣が協調して最高の仕事が出来るようになったときが、
アジャイルでドメイン駆動な状態なんだろう、たぶん。適当。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>markdown-modeでSKKの変換確定するためにRETするとカーソルが行頭に飛ぶ問題の回避策</title>
      <link>https://www.yewton.net/2016/01/20/markdown-mode-skk-kakutei</link>
      <pubDate>Wed, 20 Jan 2016 22:40:16 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/01/20/markdown-mode-skk-kakutei</guid>
      <description>

&lt;p&gt;markdown-mode 2.1 で SKK 15.2 使ってると、確定しようと思って &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; すると、
確定後にカーソルが行頭に飛んでしまうという問題に遭遇した。
&lt;code&gt;C-j&lt;/code&gt; で確定する場合は起こらない。&lt;/p&gt;

&lt;h2 id=&#34;tl-dr:4303d53c5ca37efd7fdc304227397d56&#34;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;以下を &lt;code&gt;init.el&lt;/code&gt; 相当のファイルに書けば回避出来る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun my--markdown-entery-key-ad (this-func &amp;amp;rest args)
  &amp;quot;markdown-modeでskk-henkan-mode中にエンターすると行頭にカーソルが飛んでしまう問題の対応&amp;quot;
  (if skk-henkan-mode (skk-kakutei)
    (apply this-func args)))
(advice-add #&#39;markdown-enter-key :around #&#39;my--markdown-entery-key-ad)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;原因解明に至るまで:4303d53c5ca37efd7fdc304227397d56&#34;&gt;原因解明に至るまで&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; = &lt;code&gt;&amp;lt;C-m&amp;gt;&lt;/code&gt; では起こり、&lt;code&gt;C-j&lt;/code&gt; では起こらないので、まずはキーバインドを確認したところ、
前者は &lt;code&gt;markdown-enter-key&lt;/code&gt; という関数が割り当てられていた。&lt;/p&gt;

&lt;p&gt;実装は至ってシンプルだった:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun markdown-enter-key ()
  &amp;quot;Handle RET according to to the value of `markdown-indent-on-enter&#39;.&amp;quot;
  (interactive)
  (newline)
  (when markdown-indent-on-enter
    (markdown-indent-line)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に &lt;code&gt;trace-function&lt;/code&gt; で &lt;code&gt;markdown-enter-key&lt;/code&gt; と &lt;code&gt;skk-kakutei&lt;/code&gt; をトレースしたところ、
以下のような出力が得られた:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 -&amp;gt; (markdown-enter-key)
| 2 -&amp;gt; (skk-kakutei)
| 2 &amp;lt;- skk-kakutei: nil
1 &amp;lt;- markdown-enter-key: nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;markdown-enter-key&lt;/code&gt; が発動して &lt;code&gt;(newline)&lt;/code&gt; が評価された結果、
&lt;code&gt;skk-kakutei&lt;/code&gt; が発動して変換確定、その後に &lt;code&gt;markdown-indent-line&lt;/code&gt; が呼ばれているのがどうも悪いらしい。&lt;/p&gt;

&lt;h2 id=&#34;回避方法:4303d53c5ca37efd7fdc304227397d56&#34;&gt;回避方法&lt;/h2&gt;

&lt;p&gt;これは &lt;strong&gt;&lt;code&gt;markdown-enter-key&lt;/code&gt; が呼ばれた時に &lt;code&gt;skk-henkan-mode&lt;/code&gt; 中だったら、&lt;/strong&gt;
&lt;strong&gt;本来の挙動ではなく &lt;code&gt;skk-kakutei&lt;/code&gt; だけを行なうようにする&lt;/strong&gt; ことで回避出来そうだ。&lt;/p&gt;

&lt;p&gt;こういう部分的な挙動の修正には advice を使うといい。
というわけで前述の挙動をそのまま定義すると、冒頭のようなコードになる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>雪が振ったので一日中家に引き込もっていた日の次の日</title>
      <link>https://www.yewton.net/2016/01/19/diary</link>
      <pubDate>Tue, 19 Jan 2016 23:00:00 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/01/19/diary</guid>
      <description>

&lt;p&gt;昨日は都内も大雪(いうほどか？)で出社がダルそうだったので、終日リモートワークしていた。
本当に一歩も家から出ずに、パジャマから着替えもせずに、もくもくとPC作業。&lt;/p&gt;

&lt;h2 id=&#34;個人のタスク管理:cf0329059db40c2a5492126930e90824&#34;&gt;個人のタスク管理&lt;/h2&gt;

&lt;p&gt;最近認定スクラムマスターも取ったし、
一日中スクラムのことばかり考えて悶々とするような続いている。&lt;/p&gt;

&lt;p&gt;そんな中で、個人的な、業務とかまったく関係ない趣味のタスク管理もなんとかしたいなぁと思いはじめた。&lt;/p&gt;

&lt;p&gt;趣味なのでそんなガッツリ管理するわけじゃないのでゆるいので何かないかなーと探したら、
&lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt; というのがいい感じにゆるゆると使えそうな感じだった。&lt;/p&gt;

&lt;p&gt;見積もりとか検証とかは出来なさそうだけど、とりあえず何もしないよりはいいだろーっていう想いで、使うことにした。&lt;/p&gt;

&lt;p&gt;ボードによると、目下最優先のタスクは、 &lt;code&gt;markdwon-mode&lt;/code&gt; で &lt;code&gt;skk-mode&lt;/code&gt; の確定キーバインドが想定通り機能しない件の対応である。
やるぞ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTTPSに対応してついでにHTTP/2対応された日</title>
      <link>https://www.yewton.net/2016/01/18/diary</link>
      <pubDate>Mon, 18 Jan 2016 00:06:20 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/01/18/diary</guid>
      <description>

&lt;h2 id=&#34;https-http-2-対応:e6a1a03cb41557bae8d628ec222879e1&#34;&gt;HTTPS + HTTP/2 対応&lt;/h2&gt;

&lt;p&gt;世の中的にHTTPS対応してないといかんような気がしたので、
このサイトもHTTPSで配信するように対応した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://1000ch.net/posts/2015/github-pages-custom-domain-in-https.html&#34;&gt;GitHub Pagesに設定しているカスタムドメインをHTTPS対応させる - 1000ch.net&lt;/a&gt;を大いに参考にさせていただいた。
もう本当に書いてある通りにすればいい。 &lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;CloudFlare&lt;/a&gt; 様々である。&lt;/p&gt;

&lt;p&gt;敢えて付け加えるとしたら、(CloudFlareのサイト上に注記されてはいるけども)Flexible SSLが実際に動くようになるまでは結構時間がかかること。
自分の場合は、都合7〜8時間程度かかった。
この間、ステータスは &lt;code&gt;AUTHORIZING CERTIFICATES&lt;/code&gt; から &lt;code&gt;ISSUING CERTIFICATES&lt;/code&gt; になり、最終的に &lt;code&gt;ACTIVE CERTIFICATE&lt;/code&gt; になった。&lt;/p&gt;

&lt;p&gt;この方法でサイトをHTTPS対応するのは簡単だけども懸念もあるらしい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e6a1a03cb41557bae8d628ec222879e1:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e6a1a03cb41557bae8d628ec222879e1:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;ので、
また今度この辺が実際どういう仕組みで動いてるのか調べてまとめたいと思う。&lt;/p&gt;

&lt;p&gt;なお、CloudFlareを利用することで副次的に HTTP/2 にも対応することになった。
Chromeで &lt;a href=&#34;https://chrome.google.com/webstore/detail/http2-and-spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin&#34;&gt;HTTP/2 and SPDY indicator&lt;/a&gt;
を入れてアクセスしたりすると分かる。&lt;/p&gt;

&lt;h2 id=&#34;ddd:e6a1a03cb41557bae8d628ec222879e1&#34;&gt;DDD&lt;/h2&gt;

&lt;p&gt;開発チームビルディングの一環で、ドメイン駆動設計について改めて色々調べたりしている。&lt;/p&gt;

&lt;p&gt;図やドキュメントに本質はないとはいえ、ユビキタス言語のサポートとして用語集を作ったり、
深いモデルの洞察のために図が役に立ったりするので、そのへんのサポートツールが欲しくなる。&lt;/p&gt;

&lt;p&gt;色々探してたら&lt;a href=&#34;https://skillsmatter.com/skillscasts/6259-ddd-and-microservices-at-last-some-bounderies&#34;&gt;エヴァンス先生がマイクロサービスとの関わりについて講習してる動画&lt;/a&gt;があった。
境界づけられたコンテキストはサービスじゃないから、別に実サービスと一対一対応する必要はない。
例えば、複数のコンテキストにまたがってやりとりされるようなあるコンテキストのメッセージがあるなら、
それは Interchange Context (日本語で言うと相互連結コンテキスト？)のように別のコンテキストとして定義すればいいよね、みたいな話があった。&lt;/p&gt;

&lt;p&gt;せっかく内製開発してて、スクラムやってて、物理的にステークホルダー達とも近い距離にいるのだから、
その恩恵を最大限に活かせるようにしたい。
そのためにDDDって実践的に役立つと思うので、もっと勉強しなければ。&lt;/p&gt;

&lt;p&gt;勉強の一環として今度&lt;a href=&#34;http://ddd-alliance.connpass.com/event/25209/&#34;&gt;DDD Alliance! ドメイン駆動設計のためのオブジェクト指向入門&lt;/a&gt;に行ってみる。
日本でDDDのコミュニティってここくらい？な気がするので、勉強会の内容というよりはコミュニティの様子が気になるので。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:e6a1a03cb41557bae8d628ec222879e1:1&#34;&gt;&lt;a href=&#34;https://konklone.com/post/github-pages-now-supports-https-so-use-it&#34;&gt;GitHub Pages Now (Sorta) Supports HTTPS, So Use It&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e6a1a03cb41557bae8d628ec222879e1:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>忙し過ぎてお弁当も食べられなかった日</title>
      <link>https://www.yewton.net/2016/01/15/diary</link>
      <pubDate>Fri, 15 Jan 2016 23:00:00 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/01/15/diary</guid>
      <description>

&lt;p&gt;最近チームが新体制に移行するという時期で色々バタバタしていて、
立ち上げに伴う開発フローの整備とか、JIRA(プロジェクト管理ツール)の設定とか、
ワーキングアグリーメントの検討とかで、頓に忙しい。&lt;/p&gt;

&lt;p&gt;別に、自分の役割はスクラムマスターではなく、いちメンバーに過ぎないのだけれど、
認定スクラムマスターを取得した身としては色々手を焼かずにはいられず、
色んな雑務を買って出ているという状況。&lt;/p&gt;

&lt;p&gt;それもこれも、スプリント中は〈全力疾走〉するのがスクラムである、
というスクラムのあるべき姿を目指して、自分が全力で開発に打ち込めるようにするため。&lt;/p&gt;

&lt;p&gt;…と思ってたけど、最近は &lt;em&gt;チームのパフォーマンスを引き出す&lt;/em&gt; っていうことに全力になっていて、
それはそれで楽しくなってきたので、スクラムマスターもいいかなー、なんて思い始めた。&lt;/p&gt;

&lt;h2 id=&#34;サイト改修:ef7e58fa0c4840571f9df66ecc7036f0&#34;&gt;サイト改修&lt;/h2&gt;

&lt;p&gt;今日もサイトいじりに勤しんだ。&lt;/p&gt;

&lt;p&gt;いじるときはEmacsを使うんだけれど、自分は適当なのでHTML中にJavaScriptを埋め込んだりする。
するとhtml-modeだとシンタックハイライトとかが無くて辛いことになるので、
&lt;a href=&#34;http://web-mode.org/&#34;&gt;web-mode&lt;/a&gt;を使ってる。&lt;/p&gt;

&lt;p&gt;HTMLファイルはCSSファイルは、始めから関連付けておくといいと思う。&lt;/p&gt;

&lt;h3 id=&#34;gravatar対応:ef7e58fa0c4840571f9df66ecc7036f0&#34;&gt;gravatar対応&lt;/h3&gt;

&lt;p&gt;静的画像だけでなく、gravatarのアイコンを使えるようにした。&lt;/p&gt;

&lt;p&gt;ついでに、画像を丸く表示するようにした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/cxfksword/greyshade/blob/28fb061bb674a2add89724dfbbf167f88f381d40/layouts/partials/header.html&#34;&gt;gravatarに対応している他のテーマ(greyshade)&lt;/a&gt;と、
&lt;a href=&#34;http://tdwp.us/round-gravatar-images-wordpress/&#34;&gt;How to Round Gravatar Images in WordPress&lt;/a&gt;を参考にした。&lt;/p&gt;

&lt;h3 id=&#34;記念日対応:ef7e58fa0c4840571f9df66ecc7036f0&#34;&gt;記念日対応&lt;/h3&gt;

&lt;p&gt;最初は&lt;a href=&#34;http://counting.hatelabo.jp/&#34;&gt;Hatena::Counting&lt;/a&gt;とか類似のサービスを利用しようと思ったんだけど、
あんまりシンプルなのが無かったので自作した。&lt;/p&gt;

&lt;p&gt;自作といったって、&lt;a href=&#34;http://momentjs.com/&#34;&gt;Moment.js&lt;/a&gt;というとても便利なライブラリがあったので、
それを使って適当にJavaScriptを埋め込んだだけ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/text/template/&#34;&gt;template - The Go Programming Language&lt;/a&gt;とか
&lt;a href=&#34;https://gohugo.io/templates/go-templates/&#34;&gt;Hugo - Go Template Primer&lt;/a&gt;あたりも参考にした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BettorTouchToolが無料じゃなくなると分かったりした日</title>
      <link>https://www.yewton.net/2016/01/13/diary</link>
      <pubDate>Wed, 13 Jan 2016 23:00:00 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/01/13/diary</guid>
      <description>

&lt;h2 id=&#34;bettertouchtool-will-switch-from-free-to-a-pay-what-you-want-model-early-next-year-bettertouchtool-btt-remote-bettersnaptool-and-more-http-www-boastr-net-bettertouchtool-may-switch-from-free-to-a-pay-what-you-want-model-early-next-year:824dcdd6f1a52d669a57ccbb65be9cd9&#34;&gt;&lt;a href=&#34;http://www.boastr.net/bettertouchtool-may-switch-from-free-to-a-pay-what-you-want-model-early-next-year/&#34;&gt;BetterTouchTool will switch from free to a “Pay what you want” model early next year. – BetterTouchTool, BTT Remote, BetterSnapTool and more&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.boastr.net/&#34;&gt;BetterTouchTool&lt;/a&gt;が1月末を目処に無料じゃなくなるらしい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.boastr.net/btt-paid-faq/&#34;&gt;FAQ&lt;/a&gt;によると、ライセンスは買い切りで(当面)更新の必要は無く、
過去に寄付してたりといった一定の条件を満たす人は無料でライセンスを取得する手段が提供されるらしい。&lt;/p&gt;

&lt;p&gt;なお、古いのを使い続けるといったことは出来ず、そのうち使えなくなってしまうもよう。&lt;/p&gt;

&lt;p&gt;買うしかないなー。&lt;/p&gt;

&lt;h2 id=&#34;割と本気で家庭用slack-botを作ってみた-八発白中-http-blog-8arrow-org-entry-2016-01-13-183349:824dcdd6f1a52d669a57ccbb65be9cd9&#34;&gt;&lt;a href=&#34;http://blog.8arrow.org/entry/2016/01/13/183349&#34;&gt;割と本気で家庭用Slack Botを作ってみた - 八発白中&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;うちの嫁はSlack使ってくれないから無理ぽ。。
自分もカナヘイスタンプ超気に入ってるから、LINE辞めるのは無理だな。&lt;/p&gt;

&lt;p&gt;記事中で&lt;a href=&#34;http://counting.hatelabo.jp/&#34;&gt;Hatena::Counting&lt;/a&gt;についての言及があった。
ちょうどこういうサービス探してたのでありがたい。
他に世界的にデファクトスタンダードなやつがあるのかとか、調べてみたい。
&lt;a href=&#34;https://countingdownto.com/&#34;&gt;Create a Countdown Clock | CountingDownTo.com&lt;/a&gt;とかが、それらしい感じがする。&lt;/p&gt;

&lt;h2 id=&#34;エンジニアにお勧めしたいメモアプリ5選-geechs-magazine-https-geechs-magazine-com-tag-lifehack-20160113:824dcdd6f1a52d669a57ccbb65be9cd9&#34;&gt;&lt;a href=&#34;https://geechs-magazine.com/tag/lifehack/20160113&#34;&gt;エンジニアにお勧めしたいメモアプリ5選 | geechs magazine&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;org-modeでだいたい間に合ってるけど、やっぱ同期と多デバイス対応が欲しいよなー。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mobileorg.ncogni.to/&#34;&gt;MobileOrg : What is MobileOrg?&lt;/a&gt;はちょっと使ってみて微妙だった。。&lt;/p&gt;

&lt;p&gt;そこだけ何とかなれば。。。&lt;/p&gt;

&lt;h2 id=&#34;雑感:824dcdd6f1a52d669a57ccbb65be9cd9&#34;&gt;雑感&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;markdown-modeとskkの相性悪いんかな、変換確定しようとすると行頭にカーソルが行ってしまってストレスフルだ。。&lt;/li&gt;
&lt;li&gt;シンタックスハイライトとかEmojiとか使えんのかな。調べよう。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://www.yewton.net/about/</link>
      <pubDate>Mon, 11 Jan 2016 18:47:04 +0900</pubDate>
      
      <guid>https://www.yewton.net/about/</guid>
      <description>

&lt;h1 id=&#34;omochi:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;omochi&lt;/h1&gt;

&lt;p&gt;wow.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>はじめに</title>
      <link>https://www.yewton.net/2016/01/11/at-the-start</link>
      <pubDate>Mon, 11 Jan 2016 11:11:11 +0900</pubDate>
      
      <guid>https://www.yewton.net/2016/01/11/at-the-start</guid>
      <description>

&lt;h2 id=&#34;はじめに:a34b8bc0f6383f320533be9df46dffd7&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;今年30歳になる節目の年なので、ブログを書いてみることにした。&lt;/p&gt;

&lt;p&gt;何もこういう試みは初めてではなく、
これまでも、&lt;a href=&#34;http://d.hatena.ne.jp/yuto_sasaki/&#34;&gt;はてなダイアリー&lt;/a&gt;だったり、
&lt;a href=&#34;http://qiita.com/yewton&#34;&gt;Qiita&lt;/a&gt;だったりに断続的に記事を書いたりメモしたりしていた。&lt;/p&gt;

&lt;p&gt;それより以前も、個人でサイト作成したり、既存のブログサービスを使っていたこともあった。&lt;/p&gt;

&lt;p&gt;いずれも、1年と経たずに辞めてしまった。
自分の凝り性でかつ飽きっぽい性質のためだと思う。&lt;/p&gt;

&lt;p&gt;今回また性懲りもなく始めたのは、何かをアウトプットしたいというよりも、
&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;というものを何かのキッカケで知って、
Golangの静的サイト生成ツールだと知り、イマドキは静的サイト生成だよねー
という巷の声を聞いた結果、使ってみたくなった、というのが大きい。&lt;/p&gt;

&lt;p&gt;飽きたらその内また辞めるだろうけれど、
今のところ調整したりカスタマイズしたりしたい部分が多々あるので、当面存在はするだろう。
これらの試みを記事にしたりするかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;何を書くか:a34b8bc0f6383f320533be9df46dffd7&#34;&gt;何を書くか&lt;/h2&gt;

&lt;p&gt;外部サービスに依存しないので(ホスティングはGitHub使ってるケド)自由奔放に書いていけたらと思っている。&lt;/p&gt;

&lt;p&gt;技術的な話から、日常の駄文、過去の思い出を振り返ってみたり、
あとはペットの話も書くかもしれない。時にはポエムも書くだろう。&lt;/p&gt;

&lt;p&gt;当分人の目に触れぬはずの所なので、好き勝手にやってみよう。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>