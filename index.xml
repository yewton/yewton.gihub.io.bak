<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yewton.net</title>
    <link>https://yewton.net/</link>
    <description>Recent content on yewton.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 23 Jan 2016 23:47:43 +0900</lastBuildDate>
    <atom:link href="https://yewton.net/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JIRA Agile用のuserscriptを作ったりした日</title>
      <link>https://yewton.net/2016/01/23/diary</link>
      <pubDate>Sat, 23 Jan 2016 23:47:43 +0900</pubDate>
      
      <guid>https://yewton.net/2016/01/23/diary</guid>
      <description>

&lt;h2 id=&#34;趣味の政策物:94b3c734ee959e37b47a43c2fb129b69&#34;&gt;趣味の政策物&lt;/h2&gt;

&lt;p&gt;弊チームではバックログとしてJIRAを使っている。&lt;/p&gt;

&lt;p&gt;ここ最近しつこく「管理者権限が欲しいなァ〜(ﾁﾗｯ」としていたらめでたく権限を付与してもらえたので、
ここぞとばかりにJIRAをカスタムして使いやすいようにしていた。&lt;/p&gt;

&lt;p&gt;ワークフローを単純にしたり、使わないフィールドを非表示にしたり、
これまで説明文用のテンプレからコピペしたりしていたのを、それぞれ専用のフィールドを設けたり。&lt;/p&gt;

&lt;p&gt;色々準備はしたもの、やはり始まってみると色々不便なところが出てきて、
しかもJIRAの設定じゃどうしようもない部分もあったりする。&lt;/p&gt;

&lt;p&gt;たかがツール、されどツールで、ツールに使われているようじゃ到底円滑にスプリントを回すことなんて出来ない。&lt;/p&gt;

&lt;p&gt;そこで、スクラムマスターがセレモニーを進めやすいように支援するためのuserscriptを書いた。
ソースは&lt;a href=&#34;https://github.com/yewton/userscripts&#34;&gt;yewton/userscripts&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;component-labels-for-jira-scrum:94b3c734ee959e37b47a43c2fb129b69&#34;&gt;Component-labels for JIRA Scrum&lt;/h3&gt;

&lt;p&gt;コンポーネントをエピックのようにスクラムボード上で分かりやすいく表示する。&lt;/p&gt;

&lt;p&gt;ラベリングをしたいが為だけにエピックを使ってしまうという事態は結構そこかしこで起こっているみたいだった。
本来はコンポーネントでやるべきもので、エピックはエピックとして使えるのが健全な状態だと思うので、作った。&lt;/p&gt;

&lt;p&gt;実装は滅茶苦茶単純で、DOMに変更がある度に全課題を舐めて、未設定だったらAPIで該当する課題のコンポーネントを取得している。
なので、バックログに積まれている課題数分、ページを開いた瞬間にリクエストが走ることになる。
リクエストの仕方を何か工夫しないと使いものにならないかなーと思っていたのだけれど、
案外数百リクエスト飛ばすぐらいだとビクともしなかったので、愚直な実装のまま。&lt;/p&gt;

&lt;h3 id=&#34;detail-pop-up-for-jria-scrum:94b3c734ee959e37b47a43c2fb129b69&#34;&gt;Detail Pop-up for JRIA Scrum&lt;/h3&gt;

&lt;p&gt;各課題に詳細画面をポップアップで開くためのボタンを追加する。&lt;/p&gt;

&lt;p&gt;アジャイルボードではカスタムフィールドが表示されないので、
確認するためには編集ポップアップを開くか、詳細画面に飛ぶしかなかった。
しかも、アクティブなスプリント中はクローズされている課題が編集出来ないので、
前者の方法はスプリントレビュー時には使えない。&lt;/p&gt;

&lt;p&gt;画面遷移せずに詳細画面が開ければ用は足りると考え、
&lt;a href=&#34;http://www.ericmmartin.com/projects/simplemodal/&#34;&gt;SimpleModal&lt;/a&gt;という、
その名の通りシンプルなモーダル機能を実装するためのライブラリを使って、
&lt;code&gt;iframe&lt;/code&gt; で詳細画面を開くだけの機能を追加した。&lt;/p&gt;

&lt;h2 id=&#34;第3回-実践的ドメイン駆動設計ワークショップ-connpass-http-ddd-alliance-connpass-com-event-24672:94b3c734ee959e37b47a43c2fb129b69&#34;&gt;&lt;a href=&#34;http://ddd-alliance.connpass.com/event/24672/&#34;&gt;第3回 実践的ドメイン駆動設計ワークショップ - connpass&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;参加してきた。&lt;/p&gt;

&lt;p&gt;エンジニアチームとして、業務と技術両面でどういう風に学んでいけばいいかっていう話と、
実際にやってみたら、コードの雰囲気はこんな感じだぜ、っていう話。&lt;/p&gt;

&lt;p&gt;ドメイン層のクラスが1,000個とかあって、個々のクラスは 30 〜 60 行が大半を占めるそう。
目指すべき方向はそこだっていうのはわかってはいるけど、
実際に稼動してるプロダクトの数字っていうのは説得力がある。&lt;/p&gt;

&lt;p&gt;ドメイン駆動設計を実践するなら、ドメインエキスパートとか、企画者との協調が必須だと思うのだけれど、
それをどうプロセスとして制御可能な形で行えばいいか、あまり掴めてない。&lt;/p&gt;

&lt;p&gt;会話を重視しつつ、かつダラダラやらずに予測可能な状態で、
モデルに関する会話をする場を、開発プロセスのどこで行えばいいんだろう。&lt;/p&gt;

&lt;p&gt;増田さんに上手いやり方無いっすか、と相談してみたけれど、
いい方法っていうのはなくて、エンジニアチームが実績を積み重ねて信頼を得ていって、
協力体制を築くしかないね、ということだった。
それでも駄目なら、職場を変えよ、とも。&lt;/p&gt;

&lt;p&gt;色々仰々しいプロセスやツールを導入せずとも、
いつか阿吽の呼吸で、エンジニアチームと企画陣が協調して最高の仕事が出来るようになったときが、
アジャイルでドメイン駆動な状態なんだろう、たぶん。適当。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>markdown-modeでSKKの変換確定するためにRETするとカーソルが行頭に飛ぶ問題の回避策</title>
      <link>https://yewton.net/2016/01/20/markdown-mode-skk-kakutei</link>
      <pubDate>Wed, 20 Jan 2016 22:40:16 +0900</pubDate>
      
      <guid>https://yewton.net/2016/01/20/markdown-mode-skk-kakutei</guid>
      <description>

&lt;p&gt;markdown-mode 2.1 で SKK 15.2 使ってると、確定しようと思って &lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; すると、
確定後にカーソルが行頭に飛んでしまうという問題に遭遇した。
&lt;code&gt;C-j&lt;/code&gt; で確定する場合は起こらない。&lt;/p&gt;

&lt;h2 id=&#34;tl-dr:4303d53c5ca37efd7fdc304227397d56&#34;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;以下を &lt;code&gt;init.el&lt;/code&gt; 相当のファイルに書けば回避出来る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun my--markdown-entery-key-ad (this-func &amp;amp;rest args)
  &amp;quot;markdown-modeでskk-henkan-mode中にエンターすると行頭にカーソルが飛んでしまう問題の対応&amp;quot;
  (if skk-henkan-mode (skk-kakutei)
    (apply this-func args)))
(advice-add #&#39;markdown-enter-key :around #&#39;my--markdown-entery-key-ad)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;原因解明に至るまで:4303d53c5ca37efd7fdc304227397d56&#34;&gt;原因解明に至るまで&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;return&amp;gt;&lt;/code&gt; = &lt;code&gt;&amp;lt;C-m&amp;gt;&lt;/code&gt; では起こり、&lt;code&gt;C-j&lt;/code&gt; では起こらないので、まずはキーバインドを確認したところ、
前者は &lt;code&gt;markdown-enter-key&lt;/code&gt; という関数が割り当てられていた。&lt;/p&gt;

&lt;p&gt;実装は至ってシンプルだった:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun markdown-enter-key ()
  &amp;quot;Handle RET according to to the value of `markdown-indent-on-enter&#39;.&amp;quot;
  (interactive)
  (newline)
  (when markdown-indent-on-enter
    (markdown-indent-line)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に &lt;code&gt;trace-function&lt;/code&gt; で &lt;code&gt;markdown-enter-key&lt;/code&gt; と &lt;code&gt;skk-kakutei&lt;/code&gt; をトレースしたところ、
以下のような出力が得られた:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 -&amp;gt; (markdown-enter-key)
| 2 -&amp;gt; (skk-kakutei)
| 2 &amp;lt;- skk-kakutei: nil
1 &amp;lt;- markdown-enter-key: nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;markdown-enter-key&lt;/code&gt; が発動して &lt;code&gt;(newline)&lt;/code&gt; が評価された結果、
&lt;code&gt;skk-kakutei&lt;/code&gt; が発動して変換確定、その後に &lt;code&gt;markdown-indent-line&lt;/code&gt; が呼ばれているのがどうも悪いらしい。&lt;/p&gt;

&lt;h2 id=&#34;回避方法:4303d53c5ca37efd7fdc304227397d56&#34;&gt;回避方法&lt;/h2&gt;

&lt;p&gt;これは &lt;strong&gt;&lt;code&gt;markdown-enter-key&lt;/code&gt; が呼ばれた時に &lt;code&gt;skk-henkan-mode&lt;/code&gt; 中だったら、&lt;/strong&gt;
&lt;strong&gt;本来の挙動ではなく &lt;code&gt;skk-kakutei&lt;/code&gt; だけを行なうようにする&lt;/strong&gt; ことで回避出来そうだ。&lt;/p&gt;

&lt;p&gt;こういう部分的な挙動の修正には advice を使うといい。
というわけで前述の挙動をそのまま定義すると、冒頭のようなコードになる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>雪が振ったので一日中家に引き込もっていた日の次の日</title>
      <link>https://yewton.net/2016/01/19/diary</link>
      <pubDate>Tue, 19 Jan 2016 23:00:00 +0900</pubDate>
      
      <guid>https://yewton.net/2016/01/19/diary</guid>
      <description>

&lt;p&gt;昨日は都内も大雪(いうほどか？)で出社がダルそうだったので、終日リモートワークしていた。
本当に一歩も家から出ずに、パジャマから着替えもせずに、もくもくとPC作業。&lt;/p&gt;

&lt;h2 id=&#34;個人のタスク管理:cf0329059db40c2a5492126930e90824&#34;&gt;個人のタスク管理&lt;/h2&gt;

&lt;p&gt;最近認定スクラムマスターも取ったし、
一日中スクラムのことばかり考えて悶々とするような続いている。&lt;/p&gt;

&lt;p&gt;そんな中で、個人的な、業務とかまったく関係ない趣味のタスク管理もなんとかしたいなぁと思いはじめた。&lt;/p&gt;

&lt;p&gt;趣味なのでそんなガッツリ管理するわけじゃないのでゆるいので何かないかなーと探したら、
&lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt; というのがいい感じにゆるゆると使えそうな感じだった。&lt;/p&gt;

&lt;p&gt;見積もりとか検証とかは出来なさそうだけど、とりあえず何もしないよりはいいだろーっていう想いで、使うことにした。&lt;/p&gt;

&lt;p&gt;ボードによると、目下最優先のタスクは、 &lt;code&gt;markdwon-mode&lt;/code&gt; で &lt;code&gt;skk-mode&lt;/code&gt; の確定キーバインドが想定通り機能しない件の対応である。
やるぞ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTTPSに対応してついでにHTTP/2対応された日</title>
      <link>https://yewton.net/2016/01/18/diary</link>
      <pubDate>Mon, 18 Jan 2016 00:06:20 +0900</pubDate>
      
      <guid>https://yewton.net/2016/01/18/diary</guid>
      <description>

&lt;h2 id=&#34;https-http-2-対応:e6a1a03cb41557bae8d628ec222879e1&#34;&gt;HTTPS + HTTP/2 対応&lt;/h2&gt;

&lt;p&gt;世の中的にHTTPS対応してないといかんような気がしたので、
このサイトもHTTPSで配信するように対応した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://1000ch.net/posts/2015/github-pages-custom-domain-in-https.html&#34;&gt;GitHub Pagesに設定しているカスタムドメインをHTTPS対応させる - 1000ch.net&lt;/a&gt;を大いに参考にさせていただいた。
もう本当に書いてある通りにすればいい。 &lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;CloudFlare&lt;/a&gt; 様々である。&lt;/p&gt;

&lt;p&gt;敢えて付け加えるとしたら、(CloudFlareのサイト上に注記されてはいるけども)Flexible SSLが実際に動くようになるまでは結構時間がかかること。
自分の場合は、都合7〜8時間程度かかった。
この間、ステータスは &lt;code&gt;AUTHORIZING CERTIFICATES&lt;/code&gt; から &lt;code&gt;ISSUING CERTIFICATES&lt;/code&gt; になり、最終的に &lt;code&gt;ACTIVE CERTIFICATE&lt;/code&gt; になった。&lt;/p&gt;

&lt;p&gt;この方法でサイトをHTTPS対応するのは簡単だけども懸念もあるらしい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e6a1a03cb41557bae8d628ec222879e1:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e6a1a03cb41557bae8d628ec222879e1:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;ので、
また今度この辺が実際どういう仕組みで動いてるのか調べてまとめたいと思う。&lt;/p&gt;

&lt;p&gt;なお、CloudFlareを利用することで副次的に HTTP/2 にも対応することになった。
Chromeで &lt;a href=&#34;https://chrome.google.com/webstore/detail/http2-and-spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin&#34;&gt;HTTP/2 and SPDY indicator&lt;/a&gt;
を入れてアクセスしたりすると分かる。&lt;/p&gt;

&lt;h2 id=&#34;ddd:e6a1a03cb41557bae8d628ec222879e1&#34;&gt;DDD&lt;/h2&gt;

&lt;p&gt;開発チームビルディングの一環で、ドメイン駆動設計について改めて色々調べたりしている。&lt;/p&gt;

&lt;p&gt;図やドキュメントに本質はないとはいえ、ユビキタス言語のサポートとして用語集を作ったり、
深いモデルの洞察のために図が役に立ったりするので、そのへんのサポートツールが欲しくなる。&lt;/p&gt;

&lt;p&gt;色々探してたら&lt;a href=&#34;https://skillsmatter.com/skillscasts/6259-ddd-and-microservices-at-last-some-bounderies&#34;&gt;エヴァンス先生がマイクロサービスとの関わりについて講習してる動画&lt;/a&gt;があった。
境界づけられたコンテキストはサービスじゃないから、別に実サービスと一対一対応する必要はない。
例えば、複数のコンテキストにまたがってやりとりされるようなあるコンテキストのメッセージがあるなら、
それは Interchange Context (日本語で言うと相互連結コンテキスト？)のように別のコンテキストとして定義すればいいよね、みたいな話があった。&lt;/p&gt;

&lt;p&gt;せっかく内製開発してて、スクラムやってて、物理的にステークホルダー達とも近い距離にいるのだから、
その恩恵を最大限に活かせるようにしたい。
そのためにDDDって実践的に役立つと思うので、もっと勉強しなければ。&lt;/p&gt;

&lt;p&gt;勉強の一環として今度&lt;a href=&#34;http://ddd-alliance.connpass.com/event/25209/&#34;&gt;DDD Alliance! ドメイン駆動設計のためのオブジェクト指向入門&lt;/a&gt;に行ってみる。
日本でDDDのコミュニティってここくらい？な気がするので、勉強会の内容というよりはコミュニティの様子が気になるので。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:e6a1a03cb41557bae8d628ec222879e1:1&#34;&gt;&lt;a href=&#34;https://konklone.com/post/github-pages-now-supports-https-so-use-it&#34;&gt;GitHub Pages Now (Sorta) Supports HTTPS, So Use It&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e6a1a03cb41557bae8d628ec222879e1:1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>忙し過ぎてお弁当も食べられなかった日</title>
      <link>https://yewton.net/2016/01/15/diary</link>
      <pubDate>Fri, 15 Jan 2016 23:00:00 +0900</pubDate>
      
      <guid>https://yewton.net/2016/01/15/diary</guid>
      <description>

&lt;p&gt;最近チームが新体制に移行するという時期で色々バタバタしていて、
立ち上げに伴う開発フローの整備とか、JIRA(プロジェクト管理ツール)の設定とか、
ワーキングアグリーメントの検討とかで、頓に忙しい。&lt;/p&gt;

&lt;p&gt;別に、自分の役割はスクラムマスターではなく、いちメンバーに過ぎないのだけれど、
認定スクラムマスターを取得した身としては色々手を焼かずにはいられず、
色んな雑務を買って出ているという状況。&lt;/p&gt;

&lt;p&gt;それもこれも、スプリント中は〈全力疾走〉するのがスクラムである、
というスクラムのあるべき姿を目指して、自分が全力で開発に打ち込めるようにするため。&lt;/p&gt;

&lt;p&gt;…と思ってたけど、最近は &lt;em&gt;チームのパフォーマンスを引き出す&lt;/em&gt; っていうことに全力になっていて、
それはそれで楽しくなってきたので、スクラムマスターもいいかなー、なんて思い始めた。&lt;/p&gt;

&lt;h2 id=&#34;サイト改修:ef7e58fa0c4840571f9df66ecc7036f0&#34;&gt;サイト改修&lt;/h2&gt;

&lt;p&gt;今日もサイトいじりに勤しんだ。&lt;/p&gt;

&lt;p&gt;いじるときはEmacsを使うんだけれど、自分は適当なのでHTML中にJavaScriptを埋め込んだりする。
するとhtml-modeだとシンタックハイライトとかが無くて辛いことになるので、
&lt;a href=&#34;http://web-mode.org/&#34;&gt;web-mode&lt;/a&gt;を使ってる。&lt;/p&gt;

&lt;p&gt;HTMLファイルはCSSファイルは、始めから関連付けておくといいと思う。&lt;/p&gt;

&lt;h3 id=&#34;gravatar対応:ef7e58fa0c4840571f9df66ecc7036f0&#34;&gt;gravatar対応&lt;/h3&gt;

&lt;p&gt;静的画像だけでなく、gravatarのアイコンを使えるようにした。&lt;/p&gt;

&lt;p&gt;ついでに、画像を丸く表示するようにした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/cxfksword/greyshade/blob/28fb061bb674a2add89724dfbbf167f88f381d40/layouts/partials/header.html&#34;&gt;gravatarに対応している他のテーマ(greyshade)&lt;/a&gt;と、
&lt;a href=&#34;http://tdwp.us/round-gravatar-images-wordpress/&#34;&gt;How to Round Gravatar Images in WordPress&lt;/a&gt;を参考にした。&lt;/p&gt;

&lt;h3 id=&#34;記念日対応:ef7e58fa0c4840571f9df66ecc7036f0&#34;&gt;記念日対応&lt;/h3&gt;

&lt;p&gt;最初は&lt;a href=&#34;http://counting.hatelabo.jp/&#34;&gt;Hatena::Counting&lt;/a&gt;とか類似のサービスを利用しようと思ったんだけど、
あんまりシンプルなのが無かったので自作した。&lt;/p&gt;

&lt;p&gt;自作といったって、&lt;a href=&#34;http://momentjs.com/&#34;&gt;Moment.js&lt;/a&gt;というとても便利なライブラリがあったので、
それを使って適当にJavaScriptを埋め込んだだけ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/text/template/&#34;&gt;template - The Go Programming Language&lt;/a&gt;とか
&lt;a href=&#34;https://gohugo.io/templates/go-templates/&#34;&gt;Hugo - Go Template Primer&lt;/a&gt;あたりも参考にした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BettorTouchToolが無料じゃなくなると分かったりした日</title>
      <link>https://yewton.net/2016/01/13/diary</link>
      <pubDate>Wed, 13 Jan 2016 23:00:00 +0900</pubDate>
      
      <guid>https://yewton.net/2016/01/13/diary</guid>
      <description>

&lt;h2 id=&#34;bettertouchtool-will-switch-from-free-to-a-pay-what-you-want-model-early-next-year-bettertouchtool-btt-remote-bettersnaptool-and-more-http-www-boastr-net-bettertouchtool-may-switch-from-free-to-a-pay-what-you-want-model-early-next-year:824dcdd6f1a52d669a57ccbb65be9cd9&#34;&gt;&lt;a href=&#34;http://www.boastr.net/bettertouchtool-may-switch-from-free-to-a-pay-what-you-want-model-early-next-year/&#34;&gt;BetterTouchTool will switch from free to a “Pay what you want” model early next year. – BetterTouchTool, BTT Remote, BetterSnapTool and more&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.boastr.net/&#34;&gt;BetterTouchTool&lt;/a&gt;が1月末を目処に無料じゃなくなるらしい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.boastr.net/btt-paid-faq/&#34;&gt;FAQ&lt;/a&gt;によると、ライセンスは買い切りで(当面)更新の必要は無く、
過去に寄付してたりといった一定の条件を満たす人は無料でライセンスを取得する手段が提供されるらしい。&lt;/p&gt;

&lt;p&gt;なお、古いのを使い続けるといったことは出来ず、そのうち使えなくなってしまうもよう。&lt;/p&gt;

&lt;p&gt;買うしかないなー。&lt;/p&gt;

&lt;h2 id=&#34;割と本気で家庭用slack-botを作ってみた-八発白中-http-blog-8arrow-org-entry-2016-01-13-183349:824dcdd6f1a52d669a57ccbb65be9cd9&#34;&gt;&lt;a href=&#34;http://blog.8arrow.org/entry/2016/01/13/183349&#34;&gt;割と本気で家庭用Slack Botを作ってみた - 八発白中&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;うちの嫁はSlack使ってくれないから無理ぽ。。
自分もカナヘイスタンプ超気に入ってるから、LINE辞めるのは無理だな。&lt;/p&gt;

&lt;p&gt;記事中で&lt;a href=&#34;http://counting.hatelabo.jp/&#34;&gt;Hatena::Counting&lt;/a&gt;についての言及があった。
ちょうどこういうサービス探してたのでありがたい。
他に世界的にデファクトスタンダードなやつがあるのかとか、調べてみたい。
&lt;a href=&#34;https://countingdownto.com/&#34;&gt;Create a Countdown Clock | CountingDownTo.com&lt;/a&gt;とかが、それらしい感じがする。&lt;/p&gt;

&lt;h2 id=&#34;エンジニアにお勧めしたいメモアプリ5選-geechs-magazine-https-geechs-magazine-com-tag-lifehack-20160113:824dcdd6f1a52d669a57ccbb65be9cd9&#34;&gt;&lt;a href=&#34;https://geechs-magazine.com/tag/lifehack/20160113&#34;&gt;エンジニアにお勧めしたいメモアプリ5選 | geechs magazine&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;org-modeでだいたい間に合ってるけど、やっぱ同期と多デバイス対応が欲しいよなー。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mobileorg.ncogni.to/&#34;&gt;MobileOrg : What is MobileOrg?&lt;/a&gt;はちょっと使ってみて微妙だった。。&lt;/p&gt;

&lt;p&gt;そこだけ何とかなれば。。。&lt;/p&gt;

&lt;h2 id=&#34;雑感:824dcdd6f1a52d669a57ccbb65be9cd9&#34;&gt;雑感&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;markdown-modeとskkの相性悪いんかな、変換確定しようとすると行頭にカーソルが行ってしまってストレスフルだ。。&lt;/li&gt;
&lt;li&gt;シンタックスハイライトとかEmojiとか使えんのかな。調べよう。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://yewton.net/about/</link>
      <pubDate>Mon, 11 Jan 2016 18:47:04 +0900</pubDate>
      
      <guid>https://yewton.net/about/</guid>
      <description>

&lt;h1 id=&#34;omochi:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;omochi&lt;/h1&gt;

&lt;p&gt;wow.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>はじめに</title>
      <link>https://yewton.net/2016/01/11/at-the-start</link>
      <pubDate>Mon, 11 Jan 2016 11:11:11 +0900</pubDate>
      
      <guid>https://yewton.net/2016/01/11/at-the-start</guid>
      <description>

&lt;h2 id=&#34;はじめに:a34b8bc0f6383f320533be9df46dffd7&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;今年30歳になる節目の年なので、ブログを書いてみることにした。&lt;/p&gt;

&lt;p&gt;何もこういう試みは初めてではなく、
これまでも、&lt;a href=&#34;http://d.hatena.ne.jp/yuto_sasaki/&#34;&gt;はてなダイアリー&lt;/a&gt;だったり、
&lt;a href=&#34;http://qiita.com/yewton&#34;&gt;Qiita&lt;/a&gt;だったりに断続的に記事を書いたりメモしたりしていた。&lt;/p&gt;

&lt;p&gt;それより以前も、個人でサイト作成したり、既存のブログサービスを使っていたこともあった。&lt;/p&gt;

&lt;p&gt;いずれも、1年と経たずに辞めてしまった。
自分の凝り性でかつ飽きっぽい性質のためだと思う。&lt;/p&gt;

&lt;p&gt;今回また性懲りもなく始めたのは、何かをアウトプットしたいというよりも、
&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;というものを何かのキッカケで知って、
Golangの静的サイト生成ツールだと知り、イマドキは静的サイト生成だよねー
という巷の声を聞いた結果、使ってみたくなった、というのが大きい。&lt;/p&gt;

&lt;p&gt;飽きたらその内また辞めるだろうけれど、
今のところ調整したりカスタマイズしたりしたい部分が多々あるので、当面存在はするだろう。
これらの試みを記事にしたりするかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;何を書くか:a34b8bc0f6383f320533be9df46dffd7&#34;&gt;何を書くか&lt;/h2&gt;

&lt;p&gt;外部サービスに依存しないので(ホスティングはGitHub使ってるケド)自由奔放に書いていけたらと思っている。&lt;/p&gt;

&lt;p&gt;技術的な話から、日常の駄文、過去の思い出を振り返ってみたり、
あとはペットの話も書くかもしれない。時にはポエムも書くだろう。&lt;/p&gt;

&lt;p&gt;当分人の目に触れぬはずの所なので、好き勝手にやってみよう。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>